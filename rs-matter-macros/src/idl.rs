/*
 * Copyright (c) 2024 Project CHIP Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

use parser::Cluster;
use proc_macro2::{Ident, Literal, Span, TokenStream};
use quote::quote;

mod bitmap;
mod cluster;
mod enumeration;
mod field;
mod handler;
mod id;
mod parser;
mod struct_in;
mod struct_out;

pub use parser::Idl;

pub const CSA_STANDARD_CLUSTERS_IDL_V1_4_2_0: &str =
    include_str!("idl/parser/controller-clusters-V1.4.2.0.matter");
pub const CSA_STANDARD_CLUSTERS_IDL_V1_4_0_0: &str =
    include_str!("idl/parser/controller-clusters-V1.4.0.0.matter");
pub const CSA_STANDARD_CLUSTERS_IDL_V1_3_0_0: &str =
    include_str!("idl/parser/controller-clusters-V1.3.0.0.matter");
pub const CSA_STANDARD_CLUSTERS_IDL_V1_2_0_1: &str =
    include_str!("idl/parser/controller-clusters-V1.2.0.1.matter");
pub const CSA_STANDARD_CLUSTERS_IDL_V1_1_0_2: &str =
    include_str!("idl/parser/controller-clusters-V1.1.0.2.matter");
pub const CSA_STANDARD_CLUSTERS_IDL_V1_0_0_2: &str =
    include_str!("idl/parser/controller-clusters-V1.0.0.2.matter");

/// Some context data for IDL generation
///
/// Data that is necessary to be able to code generate various bits.
/// In particular, matter_rs types (e.g. TLV or traits) are needed,
/// hence the crate name is provided
pub struct IdlGenerateContext {
    rs_matter_crate: Ident,
}

impl IdlGenerateContext {
    pub fn new(rs_matter_crate: impl AsRef<str>) -> Self {
        Self {
            rs_matter_crate: Ident::new(rs_matter_crate.as_ref(), Span::call_site()),
        }
    }
}

/// Return a token stream containing Rust types corresponding to all definitions
/// in the provided IDL cluster:
///
pub fn cluster(cluster: &Cluster, context: &IdlGenerateContext) -> TokenStream {
    cluster_internal(cluster, true, context)
}

fn cluster_internal(
    cluster: &Cluster,
    with_async: bool,
    context: &IdlGenerateContext,
) -> TokenStream {
    let cluster_module_name = Ident::new(
        &id::idl_field_name_to_rs_name(&cluster.id),
        Span::call_site(),
    );

    let cluster_module_doc = Literal::string(&format!(
        "This module contains generated Rust types for the \"{}\" cluster",
        cluster.id
    ));

    let bitmaps = bitmap::bitmaps(cluster, context);
    let enums = enumeration::enums(cluster, context);
    let struct_tags = struct_in::struct_tags(cluster, context);
    let structs = struct_in::structs(cluster, context);
    let struct_builders = struct_out::struct_builders(cluster, context);

    let attribute_id = cluster::attribute_id(cluster, context);
    let command_id = cluster::command_id(cluster, context);
    let command_response_id = cluster::command_response_id(cluster, context);
    let cluster_meta = cluster::cluster(cluster, context);

    let handler = handler::handler(false, false, cluster, context);
    let handler_inherent_impl = handler::handler(false, true, cluster, context);
    let handler_adaptor = handler::handler_adaptor(false, cluster, context);

    let quote = quote!(
        #bitmaps

        #enums

        #struct_tags

        #structs

        #struct_builders

        #attribute_id

        #command_id

        #command_response_id

        #cluster_meta

        #handler

        #handler_inherent_impl

        #handler_adaptor
    );

    let quote = if with_async {
        let async_handler = handler::handler(true, false, cluster, context);
        let async_handler_inherent_impl = handler::handler(true, true, cluster, context);
        let async_handler_adaptor = handler::handler_adaptor(true, cluster, context);

        quote!(
            #quote

            #async_handler

            #async_handler_inherent_impl

            #async_handler_adaptor
        )
    } else {
        quote
    };

    quote!(
        #[doc = #cluster_module_doc]
        #[allow(async_fn_in_trait)]
        #[allow(unknown_lints)]
        #[allow(clippy::uninlined_format_args)]
        #[allow(unexpected_cfgs)]
        pub mod #cluster_module_name {
            #quote
        }
    )
}

#[cfg(test)]
mod tests {
    use assert_tokenstreams_eq::assert_tokenstreams_eq;

    use super::Idl;
    use super::{Cluster, CSA_STANDARD_CLUSTERS_IDL_V1_3_0_0};

    use crate::idl::IdlGenerateContext;

    use super::cluster_internal;

    pub(crate) fn parse_idl(input: &str) -> Idl {
        Idl::parse(input.into()).expect("valid input")
    }

    pub(crate) fn get_cluster_named<'a>(idl: &'a Idl, name: &str) -> Option<&'a Cluster> {
        idl.clusters.iter().find(|&cluster| cluster.id == name)
    }

    #[test]
    fn test_unit_testing_cluster() {
        let idl = parse_idl(CSA_STANDARD_CLUSTERS_IDL_V1_3_0_0);

        let cluster = get_cluster_named(&idl, "UnitTesting").expect("Cluster exists");
        let context = IdlGenerateContext::new("rs_matter_crate");

        // panic!(
        //     "====\n{}\n====",
        //     &cluster_internal(cluster, false, &context)
        // );

        assert_tokenstreams_eq!(
            &cluster_internal(cluster, false, &context),
            &TOKEN_STREAM_OUTPUT
        );
    }

    const TOKEN_STREAM_OUTPUT: &str = r#"
#[doc = "This module contains generated Rust types for the \"UnitTesting\" cluster"]
#[allow(async_fn_in_trait)]
#[allow(unknown_lints)]
#[allow(clippy::uninlined_format_args)]
#[allow(unexpected_cfgs)]
pub mod unit_testing {
    #[cfg(not(feature = "defmt"))]
    rs_matter_crate::reexport::bitflags::bitflags! { # [repr (transparent)] # [derive (Default , Debug , Copy , Clone , Eq , PartialEq , Hash)] pub struct Bitmap16MaskMap : u16 { const MASK_VAL_1 = 1 ; const MASK_VAL_2 = 2 ; const MASK_VAL_3 = 4 ; const MASK_VAL_4 = 16384 ; const _INTERNAL_ALL_BITS = ! 0 ; } }
    #[cfg(feature = "defmt")]
    rs_matter_crate::reexport::defmt::bitflags! { # [repr (transparent)] # [derive (Default)] pub struct Bitmap16MaskMap : u16 { const MASK_VAL_1 = 1 ; const MASK_VAL_2 = 2 ; const MASK_VAL_3 = 4 ; const MASK_VAL_4 = 16384 ; const _INTERNAL_ALL_BITS = ! 0 ; } }
    rs_matter_crate::bitflags_tlv!(Bitmap16MaskMap, u16);
    #[cfg(not(feature = "defmt"))]
    rs_matter_crate::reexport::bitflags::bitflags! { # [repr (transparent)] # [derive (Default , Debug , Copy , Clone , Eq , PartialEq , Hash)] pub struct Bitmap32MaskMap : u32 { const MASK_VAL_1 = 1 ; const MASK_VAL_2 = 2 ; const MASK_VAL_3 = 4 ; const MASK_VAL_4 = 1073741824 ; const _INTERNAL_ALL_BITS = ! 0 ; } }
    #[cfg(feature = "defmt")]
    rs_matter_crate::reexport::defmt::bitflags! { # [repr (transparent)] # [derive (Default)] pub struct Bitmap32MaskMap : u32 { const MASK_VAL_1 = 1 ; const MASK_VAL_2 = 2 ; const MASK_VAL_3 = 4 ; const MASK_VAL_4 = 1073741824 ; const _INTERNAL_ALL_BITS = ! 0 ; } }
    rs_matter_crate::bitflags_tlv!(Bitmap32MaskMap, u32);
    #[cfg(not(feature = "defmt"))]
    rs_matter_crate::reexport::bitflags::bitflags! { # [repr (transparent)] # [derive (Default , Debug , Copy , Clone , Eq , PartialEq , Hash)] pub struct Bitmap64MaskMap : u64 { const MASK_VAL_1 = 1 ; const MASK_VAL_2 = 2 ; const MASK_VAL_3 = 4 ; const MASK_VAL_4 = 4611686018427387904 ; const _INTERNAL_ALL_BITS = ! 0 ; } }
    #[cfg(feature = "defmt")]
    rs_matter_crate::reexport::defmt::bitflags! { # [repr (transparent)] # [derive (Default)] pub struct Bitmap64MaskMap : u64 { const MASK_VAL_1 = 1 ; const MASK_VAL_2 = 2 ; const MASK_VAL_3 = 4 ; const MASK_VAL_4 = 4611686018427387904 ; const _INTERNAL_ALL_BITS = ! 0 ; } }
    rs_matter_crate::bitflags_tlv!(Bitmap64MaskMap, u64);
    #[cfg(not(feature = "defmt"))]
    rs_matter_crate::reexport::bitflags::bitflags! { # [repr (transparent)] # [derive (Default , Debug , Copy , Clone , Eq , PartialEq , Hash)] pub struct Bitmap8MaskMap : u8 { const MASK_VAL_1 = 1 ; const MASK_VAL_2 = 2 ; const MASK_VAL_3 = 4 ; const MASK_VAL_4 = 64 ; const _INTERNAL_ALL_BITS = ! 0 ; } }
    #[cfg(feature = "defmt")]
    rs_matter_crate::reexport::defmt::bitflags! { # [repr (transparent)] # [derive (Default)] pub struct Bitmap8MaskMap : u8 { const MASK_VAL_1 = 1 ; const MASK_VAL_2 = 2 ; const MASK_VAL_3 = 4 ; const MASK_VAL_4 = 64 ; const _INTERNAL_ALL_BITS = ! 0 ; } }
    rs_matter_crate::bitflags_tlv!(Bitmap8MaskMap, u8);
    #[cfg(not(feature = "defmt"))]
    rs_matter_crate::reexport::bitflags::bitflags! { # [repr (transparent)] # [derive (Default , Debug , Copy , Clone , Eq , PartialEq , Hash)] pub struct SimpleBitmap : u8 { const VALUE_A = 1 ; const VALUE_B = 2 ; const VALUE_C = 4 ; const _INTERNAL_ALL_BITS = ! 0 ; } }
    #[cfg(feature = "defmt")]
    rs_matter_crate::reexport::defmt::bitflags! { # [repr (transparent)] # [derive (Default)] pub struct SimpleBitmap : u8 { const VALUE_A = 1 ; const VALUE_B = 2 ; const VALUE_C = 4 ; const _INTERNAL_ALL_BITS = ! 0 ; } }
    rs_matter_crate::bitflags_tlv!(SimpleBitmap, u8);
    #[derive(
        Debug,
        PartialEq,
        Eq,
        Copy,
        Clone,
        Hash,
        rs_matter_crate :: tlv :: FromTLV,
        rs_matter_crate :: tlv :: ToTLV,
    )]
    #[tlvargs(datatype = "u8")]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum SimpleEnum {
        #[enumval(0)]
        Unspecified = 0,
        #[enumval(1)]
        ValueA = 1,
        #[enumval(2)]
        ValueB = 2,
        #[enumval(3)]
        ValueC = 3,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum SimpleStructTag {
        A = 0,
        B = 1,
        C = 2,
        D = 3,
        E = 4,
        F = 5,
        G = 6,
        H = 7,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestFabricScopedTag {
        FabricSensitiveInt8U = 1,
        OptionalFabricSensitiveInt8U = 2,
        NullableFabricSensitiveInt8U = 3,
        NullableOptionalFabricSensitiveInt8U = 4,
        FabricSensitiveCharString = 5,
        FabricSensitiveStruct = 6,
        FabricSensitiveInt8UList = 7,
        FabricIndex = 254,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum NullablesAndOptionalsStructTag {
        NullableInt = 0,
        OptionalInt = 1,
        NullableOptionalInt = 2,
        NullableString = 3,
        OptionalString = 4,
        NullableOptionalString = 5,
        NullableStruct = 6,
        OptionalStruct = 7,
        NullableOptionalStruct = 8,
        NullableList = 9,
        OptionalList = 10,
        NullableOptionalList = 11,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum NestedStructTag {
        A = 0,
        B = 1,
        C = 2,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum NestedStructListTag {
        A = 0,
        B = 1,
        C = 2,
        D = 3,
        E = 4,
        F = 5,
        G = 6,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum DoubleNestedStructListTag {
        A = 0,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestListStructOctetTag {
        Member1 = 0,
        Member2 = 1,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestSpecificResponseTag {
        ReturnValue = 0,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestAddArgumentsResponseTag {
        ReturnValue = 0,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestSimpleArgumentResponseTag {
        ReturnValue = 0,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestStructArrayArgumentResponseTag {
        Arg1 = 0,
        Arg2 = 1,
        Arg3 = 2,
        Arg4 = 3,
        Arg5 = 4,
        Arg6 = 5,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestAddArgumentsRequestTag {
        Arg1 = 0,
        Arg2 = 1,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestListInt8UReverseResponseTag {
        Arg1 = 0,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestSimpleArgumentRequestRequestTag {
        Arg1 = 0,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestEnumsResponseTag {
        Arg1 = 0,
        Arg2 = 1,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestStructArrayArgumentRequestRequestTag {
        Arg1 = 0,
        Arg2 = 1,
        Arg3 = 2,
        Arg4 = 3,
        Arg5 = 4,
        Arg6 = 5,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestNullableOptionalResponseTag {
        WasPresent = 0,
        WasNull = 1,
        Value = 2,
        OriginalValue = 3,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestStructArgumentRequestRequestTag {
        Arg1 = 0,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestComplexNullableOptionalResponseTag {
        NullableIntWasNull = 0,
        NullableIntValue = 1,
        OptionalIntWasPresent = 2,
        OptionalIntValue = 3,
        NullableOptionalIntWasPresent = 4,
        NullableOptionalIntWasNull = 5,
        NullableOptionalIntValue = 6,
        NullableStringWasNull = 7,
        NullableStringValue = 8,
        OptionalStringWasPresent = 9,
        OptionalStringValue = 10,
        NullableOptionalStringWasPresent = 11,
        NullableOptionalStringWasNull = 12,
        NullableOptionalStringValue = 13,
        NullableStructWasNull = 14,
        NullableStructValue = 15,
        OptionalStructWasPresent = 16,
        OptionalStructValue = 17,
        NullableOptionalStructWasPresent = 18,
        NullableOptionalStructWasNull = 19,
        NullableOptionalStructValue = 20,
        NullableListWasNull = 21,
        NullableListValue = 22,
        OptionalListWasPresent = 23,
        OptionalListValue = 24,
        NullableOptionalListWasPresent = 25,
        NullableOptionalListWasNull = 26,
        NullableOptionalListValue = 27,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestNestedStructArgumentRequestRequestTag {
        Arg1 = 0,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum BooleanResponseTag {
        Value = 0,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestListStructArgumentRequestRequestTag {
        Arg1 = 0,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum SimpleStructResponseTag {
        Arg1 = 0,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestListInt8UArgumentRequestRequestTag {
        Arg1 = 0,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestEmitTestEventResponseTag {
        Value = 0,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestNestedStructListArgumentRequestRequestTag {
        Arg1 = 0,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestEmitTestFabricScopedEventResponseTag {
        Value = 0,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestListNestedStructListArgumentRequestRequestTag {
        Arg1 = 0,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestBatchHelperResponseTag {
        Buffer = 0,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestListInt8UReverseRequestRequestTag {
        Arg1 = 0,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestEnumsRequestRequestTag {
        Arg1 = 0,
        Arg2 = 1,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestNullableOptionalRequestRequestTag {
        Arg1 = 0,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestComplexNullableOptionalRequestRequestTag {
        NullableInt = 0,
        OptionalInt = 1,
        NullableOptionalInt = 2,
        NullableString = 3,
        OptionalString = 4,
        NullableOptionalString = 5,
        NullableStruct = 6,
        OptionalStruct = 7,
        NullableOptionalStruct = 8,
        NullableList = 9,
        OptionalList = 10,
        NullableOptionalList = 11,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum SimpleStructEchoRequestRequestTag {
        Arg1 = 0,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestSimpleOptionalArgumentRequestRequestTag {
        Arg1 = 0,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestEmitTestEventRequestRequestTag {
        Arg1 = 0,
        Arg2 = 1,
        Arg3 = 2,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestEmitTestFabricScopedEventRequestRequestTag {
        Arg1 = 0,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestBatchHelperRequestRequestTag {
        SleepBeforeResponseTimeMs = 0,
        SizeOfResponseBuffer = 1,
        FillCharacter = 2,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestSecondBatchHelperRequestRequestTag {
        SleepBeforeResponseTimeMs = 0,
        SizeOfResponseBuffer = 1,
        FillCharacter = 2,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestDifferentVendorMeiRequestRequestTag {
        Arg1 = 0,
    }
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u8)]
    pub enum TestDifferentVendorMeiResponseTag {
        Arg1 = 0,
        EventNumber = 1,
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct SimpleStruct<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> SimpleStruct<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn a(&self) -> Result<u8, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
        pub fn b(&self) -> Result<bool, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(1)?)
        }
        pub fn c(&self) -> Result<SimpleEnum, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(2)?)
        }
        pub fn d(
            &self,
        ) -> Result<rs_matter_crate::tlv::OctetStr<'_>, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(3)?)
        }
        pub fn e(
            &self,
        ) -> Result<rs_matter_crate::tlv::Utf8Str<'_>, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(4)?)
        }
        pub fn f(&self) -> Result<SimpleBitmap, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(5)?)
        }
        pub fn g(&self) -> Result<f32, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(6)?)
        }
        pub fn h(&self) -> Result<f64, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(7)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for SimpleStruct<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for SimpleStruct<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for SimpleStruct<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "SimpleStruct")?;
            match self.a() {
                Ok(value) => write!(f, "{}: {:?},", "a", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "a", e.code())?,
            }
            match self.b() {
                Ok(value) => write!(f, "{}: {:?},", "b", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "b", e.code())?,
            }
            match self.c() {
                Ok(value) => write!(f, "{}: {:?},", "c", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "c", e.code())?,
            }
            match self.d() {
                Ok(value) => write!(f, "{}: {:?},", "d", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "d", e.code())?,
            }
            match self.e() {
                Ok(value) => write!(f, "{}: {:?},", "e", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "e", e.code())?,
            }
            match self.f() {
                Ok(value) => write!(f, "{}: {:?},", "f", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "f", e.code())?,
            }
            match self.g() {
                Ok(value) => write!(f, "{}: {:?},", "g", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "g", e.code())?,
            }
            match self.h() {
                Ok(value) => write!(f, "{}: {:?},", "h", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "h", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for SimpleStruct<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{} {{", "SimpleStruct");
            match self.a() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "a", value),
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "a", e.code())
                }
            }
            match self.b() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "b", value),
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "b", e.code())
                }
            }
            match self.c() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "c", value),
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "c", e.code())
                }
            }
            match self.d() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "d", value),
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "d", e.code())
                }
            }
            match self.e() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "e", value),
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "e", e.code())
                }
            }
            match self.f() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "f", value),
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "f", e.code())
                }
            }
            match self.g() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "g", value),
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "g", e.code())
                }
            }
            match self.h() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "h", value),
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "h", e.code())
                }
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestFabricScoped<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> TestFabricScoped<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn fabric_sensitive_int_8_u(
            &self,
        ) -> Result<Option<u8>, rs_matter_crate::error::Error> {
            let element = self.0.structure()?.find_ctx(1)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn optional_fabric_sensitive_int_8_u(
            &self,
        ) -> Result<Option<u8>, rs_matter_crate::error::Error> {
            let element = self.0.structure()?.find_ctx(2)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn nullable_fabric_sensitive_int_8_u(
            &self,
        ) -> Result<Option<rs_matter_crate::tlv::Nullable<u8>>, rs_matter_crate::error::Error>
        {
            let element = self.0.structure()?.find_ctx(3)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn nullable_optional_fabric_sensitive_int_8_u(
            &self,
        ) -> Result<Option<rs_matter_crate::tlv::Nullable<u8>>, rs_matter_crate::error::Error>
        {
            let element = self.0.structure()?.find_ctx(4)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn fabric_sensitive_char_string(
            &self,
        ) -> Result<Option<rs_matter_crate::tlv::Utf8Str<'_>>, rs_matter_crate::error::Error>
        {
            let element = self.0.structure()?.find_ctx(5)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn fabric_sensitive_struct(
            &self,
        ) -> Result<Option<SimpleStruct<'_>>, rs_matter_crate::error::Error> {
            let element = self.0.structure()?.find_ctx(6)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn fabric_sensitive_int_8_u_list(
            &self,
        ) -> Result<Option<rs_matter_crate::tlv::TLVArray<'_, u8>>, rs_matter_crate::error::Error>
        {
            let element = self.0.structure()?.find_ctx(7)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn fabric_index(&self) -> Result<Option<u8>, rs_matter_crate::error::Error> {
            let element = self.0.structure()?.find_ctx(254)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestFabricScoped<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestFabricScoped<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestFabricScoped<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestFabricScoped")?;
            match self.fabric_sensitive_int_8_u() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "fabric_sensitive_int_8_u", value)?,
                Ok(None) => write!(f, "{}: None,", "fabric_sensitive_int_8_u")?,
                Err(e) => write!(f, "{}: ??? {:?},", "fabric_sensitive_int_8_u", e.code())?,
            }
            match self.optional_fabric_sensitive_int_8_u() {
                Ok(Some(value)) => write!(
                    f,
                    "{}: Some({:?}),",
                    "optional_fabric_sensitive_int_8_u", value
                )?,
                Ok(None) => write!(f, "{}: None,", "optional_fabric_sensitive_int_8_u")?,
                Err(e) => write!(
                    f,
                    "{}: ??? {:?},",
                    "optional_fabric_sensitive_int_8_u",
                    e.code()
                )?,
            }
            match self.nullable_fabric_sensitive_int_8_u() {
                Ok(Some(value)) => write!(
                    f,
                    "{}: Some({:?}),",
                    "nullable_fabric_sensitive_int_8_u", value
                )?,
                Ok(None) => write!(f, "{}: None,", "nullable_fabric_sensitive_int_8_u")?,
                Err(e) => write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_fabric_sensitive_int_8_u",
                    e.code()
                )?,
            }
            match self.nullable_optional_fabric_sensitive_int_8_u() {
                Ok(Some(value)) => write!(
                    f,
                    "{}: Some({:?}),",
                    "nullable_optional_fabric_sensitive_int_8_u", value
                )?,
                Ok(None) => write!(f, "{}: None,", "nullable_optional_fabric_sensitive_int_8_u")?,
                Err(e) => write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_fabric_sensitive_int_8_u",
                    e.code()
                )?,
            }
            match self.fabric_sensitive_char_string() {
                Ok(Some(value)) => {
                    write!(f, "{}: Some({:?}),", "fabric_sensitive_char_string", value)?
                }
                Ok(None) => write!(f, "{}: None,", "fabric_sensitive_char_string")?,
                Err(e) => write!(f, "{}: ??? {:?},", "fabric_sensitive_char_string", e.code())?,
            }
            match self.fabric_sensitive_struct() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "fabric_sensitive_struct", value)?,
                Ok(None) => write!(f, "{}: None,", "fabric_sensitive_struct")?,
                Err(e) => write!(f, "{}: ??? {:?},", "fabric_sensitive_struct", e.code())?,
            }
            match self.fabric_sensitive_int_8_u_list() {
                Ok(Some(value)) => {
                    write!(f, "{}: Some({:?}),", "fabric_sensitive_int_8_u_list", value)?
                }
                Ok(None) => write!(f, "{}: None,", "fabric_sensitive_int_8_u_list")?,
                Err(e) => write!(
                    f,
                    "{}: ??? {:?},",
                    "fabric_sensitive_int_8_u_list",
                    e.code()
                )?,
            }
            match self.fabric_index() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "fabric_index", value)?,
                Ok(None) => write!(f, "{}: None,", "fabric_index")?,
                Err(e) => write!(f, "{}: ??? {:?},", "fabric_index", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestFabricScoped<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{} {{", "TestFabricScoped");
            match self.fabric_sensitive_int_8_u() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "fabric_sensitive_int_8_u",
                    value
                ),
                Ok(None) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: None,",
                    "fabric_sensitive_int_8_u"
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "fabric_sensitive_int_8_u",
                    e.code()
                ),
            }
            match self.optional_fabric_sensitive_int_8_u() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "optional_fabric_sensitive_int_8_u",
                    value
                ),
                Ok(None) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: None,",
                    "optional_fabric_sensitive_int_8_u"
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "optional_fabric_sensitive_int_8_u",
                    e.code()
                ),
            }
            match self.nullable_fabric_sensitive_int_8_u() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "nullable_fabric_sensitive_int_8_u",
                    value
                ),
                Ok(None) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: None,",
                    "nullable_fabric_sensitive_int_8_u"
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_fabric_sensitive_int_8_u",
                    e.code()
                ),
            }
            match self.nullable_optional_fabric_sensitive_int_8_u() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "nullable_optional_fabric_sensitive_int_8_u",
                    value
                ),
                Ok(None) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: None,",
                    "nullable_optional_fabric_sensitive_int_8_u"
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_fabric_sensitive_int_8_u",
                    e.code()
                ),
            }
            match self.fabric_sensitive_char_string() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "fabric_sensitive_char_string",
                    value
                ),
                Ok(None) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: None,",
                    "fabric_sensitive_char_string"
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "fabric_sensitive_char_string",
                    e.code()
                ),
            }
            match self.fabric_sensitive_struct() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "fabric_sensitive_struct",
                    value
                ),
                Ok(None) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: None,",
                    "fabric_sensitive_struct"
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "fabric_sensitive_struct",
                    e.code()
                ),
            }
            match self.fabric_sensitive_int_8_u_list() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "fabric_sensitive_int_8_u_list",
                    value
                ),
                Ok(None) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: None,",
                    "fabric_sensitive_int_8_u_list"
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "fabric_sensitive_int_8_u_list",
                    e.code()
                ),
            }
            match self.fabric_index() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "fabric_index",
                    value
                ),
                Ok(None) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: None,", "fabric_index")
                }
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "fabric_index",
                    e.code()
                ),
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct NullablesAndOptionalsStruct<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> NullablesAndOptionalsStruct<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn nullable_int(
            &self,
        ) -> Result<rs_matter_crate::tlv::Nullable<u16>, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
        pub fn optional_int(&self) -> Result<Option<u16>, rs_matter_crate::error::Error> {
            let element = self.0.structure()?.find_ctx(1)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn nullable_optional_int(
            &self,
        ) -> Result<Option<rs_matter_crate::tlv::Nullable<u16>>, rs_matter_crate::error::Error>
        {
            let element = self.0.structure()?.find_ctx(2)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn nullable_string(
            &self,
        ) -> Result<
            rs_matter_crate::tlv::Nullable<rs_matter_crate::tlv::Utf8Str<'_>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(3)?)
        }
        pub fn optional_string(
            &self,
        ) -> Result<Option<rs_matter_crate::tlv::Utf8Str<'_>>, rs_matter_crate::error::Error>
        {
            let element = self.0.structure()?.find_ctx(4)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn nullable_optional_string(
            &self,
        ) -> Result<
            Option<rs_matter_crate::tlv::Nullable<rs_matter_crate::tlv::Utf8Str<'_>>>,
            rs_matter_crate::error::Error,
        > {
            let element = self.0.structure()?.find_ctx(5)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn nullable_struct(
            &self,
        ) -> Result<rs_matter_crate::tlv::Nullable<SimpleStruct<'_>>, rs_matter_crate::error::Error>
        {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(6)?)
        }
        pub fn optional_struct(
            &self,
        ) -> Result<Option<SimpleStruct<'_>>, rs_matter_crate::error::Error> {
            let element = self.0.structure()?.find_ctx(7)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn nullable_optional_struct(
            &self,
        ) -> Result<
            Option<rs_matter_crate::tlv::Nullable<SimpleStruct<'_>>>,
            rs_matter_crate::error::Error,
        > {
            let element = self.0.structure()?.find_ctx(8)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn nullable_list(
            &self,
        ) -> Result<
            rs_matter_crate::tlv::Nullable<rs_matter_crate::tlv::TLVArray<'_, SimpleEnum>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(9)?)
        }
        pub fn optional_list(
            &self,
        ) -> Result<
            Option<rs_matter_crate::tlv::TLVArray<'_, SimpleEnum>>,
            rs_matter_crate::error::Error,
        > {
            let element = self.0.structure()?.find_ctx(10)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn nullable_optional_list(
            &self,
        ) -> Result<
            Option<rs_matter_crate::tlv::Nullable<rs_matter_crate::tlv::TLVArray<'_, SimpleEnum>>>,
            rs_matter_crate::error::Error,
        > {
            let element = self.0.structure()?.find_ctx(11)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for NullablesAndOptionalsStruct<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for NullablesAndOptionalsStruct<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for NullablesAndOptionalsStruct<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "NullablesAndOptionalsStruct")?;
            match self.nullable_int() {
                Ok(value) => write!(f, "{}: {:?},", "nullable_int", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "nullable_int", e.code())?,
            }
            match self.optional_int() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "optional_int", value)?,
                Ok(None) => write!(f, "{}: None,", "optional_int")?,
                Err(e) => write!(f, "{}: ??? {:?},", "optional_int", e.code())?,
            }
            match self.nullable_optional_int() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "nullable_optional_int", value)?,
                Ok(None) => write!(f, "{}: None,", "nullable_optional_int")?,
                Err(e) => write!(f, "{}: ??? {:?},", "nullable_optional_int", e.code())?,
            }
            match self.nullable_string() {
                Ok(value) => write!(f, "{}: {:?},", "nullable_string", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "nullable_string", e.code())?,
            }
            match self.optional_string() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "optional_string", value)?,
                Ok(None) => write!(f, "{}: None,", "optional_string")?,
                Err(e) => write!(f, "{}: ??? {:?},", "optional_string", e.code())?,
            }
            match self.nullable_optional_string() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "nullable_optional_string", value)?,
                Ok(None) => write!(f, "{}: None,", "nullable_optional_string")?,
                Err(e) => write!(f, "{}: ??? {:?},", "nullable_optional_string", e.code())?,
            }
            match self.nullable_struct() {
                Ok(value) => write!(f, "{}: {:?},", "nullable_struct", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "nullable_struct", e.code())?,
            }
            match self.optional_struct() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "optional_struct", value)?,
                Ok(None) => write!(f, "{}: None,", "optional_struct")?,
                Err(e) => write!(f, "{}: ??? {:?},", "optional_struct", e.code())?,
            }
            match self.nullable_optional_struct() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "nullable_optional_struct", value)?,
                Ok(None) => write!(f, "{}: None,", "nullable_optional_struct")?,
                Err(e) => write!(f, "{}: ??? {:?},", "nullable_optional_struct", e.code())?,
            }
            match self.nullable_list() {
                Ok(value) => write!(f, "{}: {:?},", "nullable_list", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "nullable_list", e.code())?,
            }
            match self.optional_list() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "optional_list", value)?,
                Ok(None) => write!(f, "{}: None,", "optional_list")?,
                Err(e) => write!(f, "{}: ??? {:?},", "optional_list", e.code())?,
            }
            match self.nullable_optional_list() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "nullable_optional_list", value)?,
                Ok(None) => write!(f, "{}: None,", "nullable_optional_list")?,
                Err(e) => write!(f, "{}: ??? {:?},", "nullable_optional_list", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for NullablesAndOptionalsStruct<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{} {{", "NullablesAndOptionalsStruct");
            match self.nullable_int() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "nullable_int", value)
                }
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_int",
                    e.code()
                ),
            }
            match self.optional_int() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "optional_int",
                    value
                ),
                Ok(None) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: None,", "optional_int")
                }
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "optional_int",
                    e.code()
                ),
            }
            match self.nullable_optional_int() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "nullable_optional_int",
                    value
                ),
                Ok(None) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: None,",
                    "nullable_optional_int"
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_int",
                    e.code()
                ),
            }
            match self.nullable_string() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: {:?},",
                    "nullable_string",
                    value
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_string",
                    e.code()
                ),
            }
            match self.optional_string() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "optional_string",
                    value
                ),
                Ok(None) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: None,", "optional_string")
                }
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "optional_string",
                    e.code()
                ),
            }
            match self.nullable_optional_string() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "nullable_optional_string",
                    value
                ),
                Ok(None) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: None,",
                    "nullable_optional_string"
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_string",
                    e.code()
                ),
            }
            match self.nullable_struct() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: {:?},",
                    "nullable_struct",
                    value
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_struct",
                    e.code()
                ),
            }
            match self.optional_struct() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "optional_struct",
                    value
                ),
                Ok(None) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: None,", "optional_struct")
                }
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "optional_struct",
                    e.code()
                ),
            }
            match self.nullable_optional_struct() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "nullable_optional_struct",
                    value
                ),
                Ok(None) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: None,",
                    "nullable_optional_struct"
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_struct",
                    e.code()
                ),
            }
            match self.nullable_list() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "nullable_list", value)
                }
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_list",
                    e.code()
                ),
            }
            match self.optional_list() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "optional_list",
                    value
                ),
                Ok(None) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: None,", "optional_list")
                }
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "optional_list",
                    e.code()
                ),
            }
            match self.nullable_optional_list() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "nullable_optional_list",
                    value
                ),
                Ok(None) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: None,",
                    "nullable_optional_list"
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_list",
                    e.code()
                ),
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct NestedStruct<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> NestedStruct<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn a(&self) -> Result<u8, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
        pub fn b(&self) -> Result<bool, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(1)?)
        }
        pub fn c(&self) -> Result<SimpleStruct<'_>, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(2)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for NestedStruct<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for NestedStruct<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for NestedStruct<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "NestedStruct")?;
            match self.a() {
                Ok(value) => write!(f, "{}: {:?},", "a", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "a", e.code())?,
            }
            match self.b() {
                Ok(value) => write!(f, "{}: {:?},", "b", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "b", e.code())?,
            }
            match self.c() {
                Ok(value) => write!(f, "{}: {:?},", "c", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "c", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for NestedStruct<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{} {{", "NestedStruct");
            match self.a() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "a", value),
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "a", e.code())
                }
            }
            match self.b() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "b", value),
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "b", e.code())
                }
            }
            match self.c() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "c", value),
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "c", e.code())
                }
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct NestedStructList<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> NestedStructList<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn a(&self) -> Result<u8, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
        pub fn b(&self) -> Result<bool, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(1)?)
        }
        pub fn c(&self) -> Result<SimpleStruct<'_>, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(2)?)
        }
        pub fn d(
            &self,
        ) -> Result<
            rs_matter_crate::tlv::TLVArray<'_, SimpleStruct<'_>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(3)?)
        }
        pub fn e(
            &self,
        ) -> Result<rs_matter_crate::tlv::TLVArray<'_, u32>, rs_matter_crate::error::Error>
        {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(4)?)
        }
        pub fn f(
            &self,
        ) -> Result<
            rs_matter_crate::tlv::TLVArray<'_, rs_matter_crate::tlv::OctetStr<'_>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(5)?)
        }
        pub fn g(
            &self,
        ) -> Result<rs_matter_crate::tlv::TLVArray<'_, u8>, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(6)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for NestedStructList<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for NestedStructList<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for NestedStructList<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "NestedStructList")?;
            match self.a() {
                Ok(value) => write!(f, "{}: {:?},", "a", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "a", e.code())?,
            }
            match self.b() {
                Ok(value) => write!(f, "{}: {:?},", "b", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "b", e.code())?,
            }
            match self.c() {
                Ok(value) => write!(f, "{}: {:?},", "c", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "c", e.code())?,
            }
            match self.d() {
                Ok(value) => write!(f, "{}: {:?},", "d", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "d", e.code())?,
            }
            match self.e() {
                Ok(value) => write!(f, "{}: {:?},", "e", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "e", e.code())?,
            }
            match self.f() {
                Ok(value) => write!(f, "{}: {:?},", "f", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "f", e.code())?,
            }
            match self.g() {
                Ok(value) => write!(f, "{}: {:?},", "g", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "g", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for NestedStructList<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{} {{", "NestedStructList");
            match self.a() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "a", value),
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "a", e.code())
                }
            }
            match self.b() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "b", value),
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "b", e.code())
                }
            }
            match self.c() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "c", value),
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "c", e.code())
                }
            }
            match self.d() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "d", value),
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "d", e.code())
                }
            }
            match self.e() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "e", value),
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "e", e.code())
                }
            }
            match self.f() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "f", value),
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "f", e.code())
                }
            }
            match self.g() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "g", value),
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "g", e.code())
                }
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct DoubleNestedStructList<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> DoubleNestedStructList<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn a(
            &self,
        ) -> Result<
            rs_matter_crate::tlv::TLVArray<'_, NestedStructList<'_>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for DoubleNestedStructList<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for DoubleNestedStructList<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for DoubleNestedStructList<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "DoubleNestedStructList")?;
            match self.a() {
                Ok(value) => write!(f, "{}: {:?},", "a", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "a", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for DoubleNestedStructList<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{} {{", "DoubleNestedStructList");
            match self.a() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "a", value),
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "a", e.code())
                }
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestListStructOctet<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> TestListStructOctet<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn member_1(&self) -> Result<u64, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
        pub fn member_2(
            &self,
        ) -> Result<rs_matter_crate::tlv::OctetStr<'_>, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(1)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestListStructOctet<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestListStructOctet<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestListStructOctet<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestListStructOctet")?;
            match self.member_1() {
                Ok(value) => write!(f, "{}: {:?},", "member_1", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "member_1", e.code())?,
            }
            match self.member_2() {
                Ok(value) => write!(f, "{}: {:?},", "member_2", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "member_2", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestListStructOctet<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{} {{", "TestListStructOctet");
            match self.member_1() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "member_1", value)
                }
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "member_1",
                    e.code()
                ),
            }
            match self.member_2() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "member_2", value)
                }
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "member_2",
                    e.code()
                ),
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestSpecificResponse<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> TestSpecificResponse<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn return_value(&self) -> Result<u8, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestSpecificResponse<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestSpecificResponse<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestSpecificResponse<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestSpecificResponse")?;
            match self.return_value() {
                Ok(value) => write!(f, "{}: {:?},", "return_value", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "return_value", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestSpecificResponse<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{} {{", "TestSpecificResponse");
            match self.return_value() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "return_value", value)
                }
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "return_value",
                    e.code()
                ),
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestAddArgumentsResponse<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> TestAddArgumentsResponse<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn return_value(&self) -> Result<u8, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestAddArgumentsResponse<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestAddArgumentsResponse<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestAddArgumentsResponse<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestAddArgumentsResponse")?;
            match self.return_value() {
                Ok(value) => write!(f, "{}: {:?},", "return_value", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "return_value", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestAddArgumentsResponse<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{} {{", "TestAddArgumentsResponse");
            match self.return_value() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "return_value", value)
                }
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "return_value",
                    e.code()
                ),
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestSimpleArgumentResponse<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> TestSimpleArgumentResponse<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn return_value(&self) -> Result<bool, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestSimpleArgumentResponse<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestSimpleArgumentResponse<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestSimpleArgumentResponse<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestSimpleArgumentResponse")?;
            match self.return_value() {
                Ok(value) => write!(f, "{}: {:?},", "return_value", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "return_value", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestSimpleArgumentResponse<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{} {{", "TestSimpleArgumentResponse");
            match self.return_value() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "return_value", value)
                }
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "return_value",
                    e.code()
                ),
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestStructArrayArgumentResponse<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> TestStructArrayArgumentResponse<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn arg_1(
            &self,
        ) -> Result<
            rs_matter_crate::tlv::TLVArray<'_, NestedStructList<'_>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
        pub fn arg_2(
            &self,
        ) -> Result<
            rs_matter_crate::tlv::TLVArray<'_, SimpleStruct<'_>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(1)?)
        }
        pub fn arg_3(
            &self,
        ) -> Result<rs_matter_crate::tlv::TLVArray<'_, SimpleEnum>, rs_matter_crate::error::Error>
        {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(2)?)
        }
        pub fn arg_4(
            &self,
        ) -> Result<rs_matter_crate::tlv::TLVArray<'_, bool>, rs_matter_crate::error::Error>
        {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(3)?)
        }
        pub fn arg_5(&self) -> Result<SimpleEnum, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(4)?)
        }
        pub fn arg_6(&self) -> Result<bool, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(5)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestStructArrayArgumentResponse<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestStructArrayArgumentResponse<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestStructArrayArgumentResponse<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestStructArrayArgumentResponse")?;
            match self.arg_1() {
                Ok(value) => write!(f, "{}: {:?},", "arg_1", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_1", e.code())?,
            }
            match self.arg_2() {
                Ok(value) => write!(f, "{}: {:?},", "arg_2", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_2", e.code())?,
            }
            match self.arg_3() {
                Ok(value) => write!(f, "{}: {:?},", "arg_3", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_3", e.code())?,
            }
            match self.arg_4() {
                Ok(value) => write!(f, "{}: {:?},", "arg_4", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_4", e.code())?,
            }
            match self.arg_5() {
                Ok(value) => write!(f, "{}: {:?},", "arg_5", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_5", e.code())?,
            }
            match self.arg_6() {
                Ok(value) => write!(f, "{}: {:?},", "arg_6", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_6", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestStructArrayArgumentResponse<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{} {{", "TestStructArrayArgumentResponse");
            match self.arg_1() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_1", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_1", e.code())
                }
            }
            match self.arg_2() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_2", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_2", e.code())
                }
            }
            match self.arg_3() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_3", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_3", e.code())
                }
            }
            match self.arg_4() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_4", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_4", e.code())
                }
            }
            match self.arg_5() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_5", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_5", e.code())
                }
            }
            match self.arg_6() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_6", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_6", e.code())
                }
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestAddArgumentsRequest<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> TestAddArgumentsRequest<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn arg_1(&self) -> Result<u8, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
        pub fn arg_2(&self) -> Result<u8, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(1)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestAddArgumentsRequest<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestAddArgumentsRequest<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestAddArgumentsRequest<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestAddArgumentsRequest")?;
            match self.arg_1() {
                Ok(value) => write!(f, "{}: {:?},", "arg_1", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_1", e.code())?,
            }
            match self.arg_2() {
                Ok(value) => write!(f, "{}: {:?},", "arg_2", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_2", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestAddArgumentsRequest<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{} {{", "TestAddArgumentsRequest");
            match self.arg_1() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_1", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_1", e.code())
                }
            }
            match self.arg_2() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_2", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_2", e.code())
                }
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestListInt8UReverseResponse<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> TestListInt8UReverseResponse<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn arg_1(
            &self,
        ) -> Result<rs_matter_crate::tlv::TLVArray<'_, u8>, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestListInt8UReverseResponse<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestListInt8UReverseResponse<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestListInt8UReverseResponse<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestListInt8UReverseResponse")?;
            match self.arg_1() {
                Ok(value) => write!(f, "{}: {:?},", "arg_1", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_1", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestListInt8UReverseResponse<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{} {{", "TestListInt8UReverseResponse");
            match self.arg_1() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_1", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_1", e.code())
                }
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestSimpleArgumentRequestRequest<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> TestSimpleArgumentRequestRequest<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn arg_1(&self) -> Result<bool, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestSimpleArgumentRequestRequest<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestSimpleArgumentRequestRequest<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestSimpleArgumentRequestRequest<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestSimpleArgumentRequestRequest")?;
            match self.arg_1() {
                Ok(value) => write!(f, "{}: {:?},", "arg_1", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_1", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestSimpleArgumentRequestRequest<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{} {{",
                "TestSimpleArgumentRequestRequest"
            );
            match self.arg_1() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_1", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_1", e.code())
                }
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestEnumsResponse<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> TestEnumsResponse<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn arg_1(&self) -> Result<u16, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
        pub fn arg_2(&self) -> Result<SimpleEnum, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(1)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestEnumsResponse<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestEnumsResponse<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestEnumsResponse<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestEnumsResponse")?;
            match self.arg_1() {
                Ok(value) => write!(f, "{}: {:?},", "arg_1", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_1", e.code())?,
            }
            match self.arg_2() {
                Ok(value) => write!(f, "{}: {:?},", "arg_2", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_2", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestEnumsResponse<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{} {{", "TestEnumsResponse");
            match self.arg_1() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_1", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_1", e.code())
                }
            }
            match self.arg_2() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_2", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_2", e.code())
                }
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestStructArrayArgumentRequestRequest<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> TestStructArrayArgumentRequestRequest<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn arg_1(
            &self,
        ) -> Result<
            rs_matter_crate::tlv::TLVArray<'_, NestedStructList<'_>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
        pub fn arg_2(
            &self,
        ) -> Result<
            rs_matter_crate::tlv::TLVArray<'_, SimpleStruct<'_>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(1)?)
        }
        pub fn arg_3(
            &self,
        ) -> Result<rs_matter_crate::tlv::TLVArray<'_, SimpleEnum>, rs_matter_crate::error::Error>
        {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(2)?)
        }
        pub fn arg_4(
            &self,
        ) -> Result<rs_matter_crate::tlv::TLVArray<'_, bool>, rs_matter_crate::error::Error>
        {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(3)?)
        }
        pub fn arg_5(&self) -> Result<SimpleEnum, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(4)?)
        }
        pub fn arg_6(&self) -> Result<bool, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(5)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestStructArrayArgumentRequestRequest<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestStructArrayArgumentRequestRequest<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestStructArrayArgumentRequestRequest<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestStructArrayArgumentRequestRequest")?;
            match self.arg_1() {
                Ok(value) => write!(f, "{}: {:?},", "arg_1", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_1", e.code())?,
            }
            match self.arg_2() {
                Ok(value) => write!(f, "{}: {:?},", "arg_2", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_2", e.code())?,
            }
            match self.arg_3() {
                Ok(value) => write!(f, "{}: {:?},", "arg_3", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_3", e.code())?,
            }
            match self.arg_4() {
                Ok(value) => write!(f, "{}: {:?},", "arg_4", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_4", e.code())?,
            }
            match self.arg_5() {
                Ok(value) => write!(f, "{}: {:?},", "arg_5", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_5", e.code())?,
            }
            match self.arg_6() {
                Ok(value) => write!(f, "{}: {:?},", "arg_6", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_6", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestStructArrayArgumentRequestRequest<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{} {{",
                "TestStructArrayArgumentRequestRequest"
            );
            match self.arg_1() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_1", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_1", e.code())
                }
            }
            match self.arg_2() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_2", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_2", e.code())
                }
            }
            match self.arg_3() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_3", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_3", e.code())
                }
            }
            match self.arg_4() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_4", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_4", e.code())
                }
            }
            match self.arg_5() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_5", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_5", e.code())
                }
            }
            match self.arg_6() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_6", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_6", e.code())
                }
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestNullableOptionalResponse<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> TestNullableOptionalResponse<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn was_present(&self) -> Result<bool, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
        pub fn was_null(&self) -> Result<Option<bool>, rs_matter_crate::error::Error> {
            let element = self.0.structure()?.find_ctx(1)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn value(&self) -> Result<Option<u8>, rs_matter_crate::error::Error> {
            let element = self.0.structure()?.find_ctx(2)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn original_value(
            &self,
        ) -> Result<Option<rs_matter_crate::tlv::Nullable<u8>>, rs_matter_crate::error::Error>
        {
            let element = self.0.structure()?.find_ctx(3)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestNullableOptionalResponse<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestNullableOptionalResponse<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestNullableOptionalResponse<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestNullableOptionalResponse")?;
            match self.was_present() {
                Ok(value) => write!(f, "{}: {:?},", "was_present", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "was_present", e.code())?,
            }
            match self.was_null() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "was_null", value)?,
                Ok(None) => write!(f, "{}: None,", "was_null")?,
                Err(e) => write!(f, "{}: ??? {:?},", "was_null", e.code())?,
            }
            match self.value() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "value", value)?,
                Ok(None) => write!(f, "{}: None,", "value")?,
                Err(e) => write!(f, "{}: ??? {:?},", "value", e.code())?,
            }
            match self.original_value() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "original_value", value)?,
                Ok(None) => write!(f, "{}: None,", "original_value")?,
                Err(e) => write!(f, "{}: ??? {:?},", "original_value", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestNullableOptionalResponse<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{} {{", "TestNullableOptionalResponse");
            match self.was_present() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "was_present", value)
                }
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "was_present",
                    e.code()
                ),
            }
            match self.was_null() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "was_null",
                    value
                ),
                Ok(None) => rs_matter_crate::reexport::defmt::write!(f, "{}: None,", "was_null"),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "was_null",
                    e.code()
                ),
            }
            match self.value() {
                Ok(Some(value)) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: Some({:?}),", "value", value)
                }
                Ok(None) => rs_matter_crate::reexport::defmt::write!(f, "{}: None,", "value"),
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "value", e.code())
                }
            }
            match self.original_value() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "original_value",
                    value
                ),
                Ok(None) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: None,", "original_value")
                }
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "original_value",
                    e.code()
                ),
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestStructArgumentRequestRequest<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> TestStructArgumentRequestRequest<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn arg_1(&self) -> Result<SimpleStruct<'_>, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestStructArgumentRequestRequest<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestStructArgumentRequestRequest<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestStructArgumentRequestRequest<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestStructArgumentRequestRequest")?;
            match self.arg_1() {
                Ok(value) => write!(f, "{}: {:?},", "arg_1", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_1", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestStructArgumentRequestRequest<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{} {{",
                "TestStructArgumentRequestRequest"
            );
            match self.arg_1() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_1", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_1", e.code())
                }
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestComplexNullableOptionalResponse<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> TestComplexNullableOptionalResponse<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn nullable_int_was_null(&self) -> Result<bool, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
        pub fn nullable_int_value(&self) -> Result<Option<u16>, rs_matter_crate::error::Error> {
            let element = self.0.structure()?.find_ctx(1)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn optional_int_was_present(&self) -> Result<bool, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(2)?)
        }
        pub fn optional_int_value(&self) -> Result<Option<u16>, rs_matter_crate::error::Error> {
            let element = self.0.structure()?.find_ctx(3)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn nullable_optional_int_was_present(
            &self,
        ) -> Result<bool, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(4)?)
        }
        pub fn nullable_optional_int_was_null(
            &self,
        ) -> Result<Option<bool>, rs_matter_crate::error::Error> {
            let element = self.0.structure()?.find_ctx(5)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn nullable_optional_int_value(
            &self,
        ) -> Result<Option<u16>, rs_matter_crate::error::Error> {
            let element = self.0.structure()?.find_ctx(6)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn nullable_string_was_null(&self) -> Result<bool, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(7)?)
        }
        pub fn nullable_string_value(
            &self,
        ) -> Result<Option<rs_matter_crate::tlv::Utf8Str<'_>>, rs_matter_crate::error::Error>
        {
            let element = self.0.structure()?.find_ctx(8)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn optional_string_was_present(&self) -> Result<bool, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(9)?)
        }
        pub fn optional_string_value(
            &self,
        ) -> Result<Option<rs_matter_crate::tlv::Utf8Str<'_>>, rs_matter_crate::error::Error>
        {
            let element = self.0.structure()?.find_ctx(10)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn nullable_optional_string_was_present(
            &self,
        ) -> Result<bool, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(11)?)
        }
        pub fn nullable_optional_string_was_null(
            &self,
        ) -> Result<Option<bool>, rs_matter_crate::error::Error> {
            let element = self.0.structure()?.find_ctx(12)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn nullable_optional_string_value(
            &self,
        ) -> Result<Option<rs_matter_crate::tlv::Utf8Str<'_>>, rs_matter_crate::error::Error>
        {
            let element = self.0.structure()?.find_ctx(13)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn nullable_struct_was_null(&self) -> Result<bool, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(14)?)
        }
        pub fn nullable_struct_value(
            &self,
        ) -> Result<Option<SimpleStruct<'_>>, rs_matter_crate::error::Error> {
            let element = self.0.structure()?.find_ctx(15)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn optional_struct_was_present(&self) -> Result<bool, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(16)?)
        }
        pub fn optional_struct_value(
            &self,
        ) -> Result<Option<SimpleStruct<'_>>, rs_matter_crate::error::Error> {
            let element = self.0.structure()?.find_ctx(17)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn nullable_optional_struct_was_present(
            &self,
        ) -> Result<bool, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(18)?)
        }
        pub fn nullable_optional_struct_was_null(
            &self,
        ) -> Result<Option<bool>, rs_matter_crate::error::Error> {
            let element = self.0.structure()?.find_ctx(19)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn nullable_optional_struct_value(
            &self,
        ) -> Result<Option<SimpleStruct<'_>>, rs_matter_crate::error::Error> {
            let element = self.0.structure()?.find_ctx(20)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn nullable_list_was_null(&self) -> Result<bool, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(21)?)
        }
        pub fn nullable_list_value(
            &self,
        ) -> Result<
            Option<rs_matter_crate::tlv::TLVArray<'_, SimpleEnum>>,
            rs_matter_crate::error::Error,
        > {
            let element = self.0.structure()?.find_ctx(22)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn optional_list_was_present(&self) -> Result<bool, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(23)?)
        }
        pub fn optional_list_value(
            &self,
        ) -> Result<
            Option<rs_matter_crate::tlv::TLVArray<'_, SimpleEnum>>,
            rs_matter_crate::error::Error,
        > {
            let element = self.0.structure()?.find_ctx(24)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn nullable_optional_list_was_present(
            &self,
        ) -> Result<bool, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(25)?)
        }
        pub fn nullable_optional_list_was_null(
            &self,
        ) -> Result<Option<bool>, rs_matter_crate::error::Error> {
            let element = self.0.structure()?.find_ctx(26)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn nullable_optional_list_value(
            &self,
        ) -> Result<
            Option<rs_matter_crate::tlv::TLVArray<'_, SimpleEnum>>,
            rs_matter_crate::error::Error,
        > {
            let element = self.0.structure()?.find_ctx(27)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestComplexNullableOptionalResponse<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestComplexNullableOptionalResponse<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestComplexNullableOptionalResponse<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestComplexNullableOptionalResponse")?;
            match self.nullable_int_was_null() {
                Ok(value) => write!(f, "{}: {:?},", "nullable_int_was_null", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "nullable_int_was_null", e.code())?,
            }
            match self.nullable_int_value() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "nullable_int_value", value)?,
                Ok(None) => write!(f, "{}: None,", "nullable_int_value")?,
                Err(e) => write!(f, "{}: ??? {:?},", "nullable_int_value", e.code())?,
            }
            match self.optional_int_was_present() {
                Ok(value) => write!(f, "{}: {:?},", "optional_int_was_present", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "optional_int_was_present", e.code())?,
            }
            match self.optional_int_value() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "optional_int_value", value)?,
                Ok(None) => write!(f, "{}: None,", "optional_int_value")?,
                Err(e) => write!(f, "{}: ??? {:?},", "optional_int_value", e.code())?,
            }
            match self.nullable_optional_int_was_present() {
                Ok(value) => write!(f, "{}: {:?},", "nullable_optional_int_was_present", value)?,
                Err(e) => write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_int_was_present",
                    e.code()
                )?,
            }
            match self.nullable_optional_int_was_null() {
                Ok(Some(value)) => write!(
                    f,
                    "{}: Some({:?}),",
                    "nullable_optional_int_was_null", value
                )?,
                Ok(None) => write!(f, "{}: None,", "nullable_optional_int_was_null")?,
                Err(e) => write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_int_was_null",
                    e.code()
                )?,
            }
            match self.nullable_optional_int_value() {
                Ok(Some(value)) => {
                    write!(f, "{}: Some({:?}),", "nullable_optional_int_value", value)?
                }
                Ok(None) => write!(f, "{}: None,", "nullable_optional_int_value")?,
                Err(e) => write!(f, "{}: ??? {:?},", "nullable_optional_int_value", e.code())?,
            }
            match self.nullable_string_was_null() {
                Ok(value) => write!(f, "{}: {:?},", "nullable_string_was_null", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "nullable_string_was_null", e.code())?,
            }
            match self.nullable_string_value() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "nullable_string_value", value)?,
                Ok(None) => write!(f, "{}: None,", "nullable_string_value")?,
                Err(e) => write!(f, "{}: ??? {:?},", "nullable_string_value", e.code())?,
            }
            match self.optional_string_was_present() {
                Ok(value) => write!(f, "{}: {:?},", "optional_string_was_present", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "optional_string_was_present", e.code())?,
            }
            match self.optional_string_value() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "optional_string_value", value)?,
                Ok(None) => write!(f, "{}: None,", "optional_string_value")?,
                Err(e) => write!(f, "{}: ??? {:?},", "optional_string_value", e.code())?,
            }
            match self.nullable_optional_string_was_present() {
                Ok(value) => write!(
                    f,
                    "{}: {:?},",
                    "nullable_optional_string_was_present", value
                )?,
                Err(e) => write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_string_was_present",
                    e.code()
                )?,
            }
            match self.nullable_optional_string_was_null() {
                Ok(Some(value)) => write!(
                    f,
                    "{}: Some({:?}),",
                    "nullable_optional_string_was_null", value
                )?,
                Ok(None) => write!(f, "{}: None,", "nullable_optional_string_was_null")?,
                Err(e) => write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_string_was_null",
                    e.code()
                )?,
            }
            match self.nullable_optional_string_value() {
                Ok(Some(value)) => write!(
                    f,
                    "{}: Some({:?}),",
                    "nullable_optional_string_value", value
                )?,
                Ok(None) => write!(f, "{}: None,", "nullable_optional_string_value")?,
                Err(e) => write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_string_value",
                    e.code()
                )?,
            }
            match self.nullable_struct_was_null() {
                Ok(value) => write!(f, "{}: {:?},", "nullable_struct_was_null", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "nullable_struct_was_null", e.code())?,
            }
            match self.nullable_struct_value() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "nullable_struct_value", value)?,
                Ok(None) => write!(f, "{}: None,", "nullable_struct_value")?,
                Err(e) => write!(f, "{}: ??? {:?},", "nullable_struct_value", e.code())?,
            }
            match self.optional_struct_was_present() {
                Ok(value) => write!(f, "{}: {:?},", "optional_struct_was_present", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "optional_struct_was_present", e.code())?,
            }
            match self.optional_struct_value() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "optional_struct_value", value)?,
                Ok(None) => write!(f, "{}: None,", "optional_struct_value")?,
                Err(e) => write!(f, "{}: ??? {:?},", "optional_struct_value", e.code())?,
            }
            match self.nullable_optional_struct_was_present() {
                Ok(value) => write!(
                    f,
                    "{}: {:?},",
                    "nullable_optional_struct_was_present", value
                )?,
                Err(e) => write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_struct_was_present",
                    e.code()
                )?,
            }
            match self.nullable_optional_struct_was_null() {
                Ok(Some(value)) => write!(
                    f,
                    "{}: Some({:?}),",
                    "nullable_optional_struct_was_null", value
                )?,
                Ok(None) => write!(f, "{}: None,", "nullable_optional_struct_was_null")?,
                Err(e) => write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_struct_was_null",
                    e.code()
                )?,
            }
            match self.nullable_optional_struct_value() {
                Ok(Some(value)) => write!(
                    f,
                    "{}: Some({:?}),",
                    "nullable_optional_struct_value", value
                )?,
                Ok(None) => write!(f, "{}: None,", "nullable_optional_struct_value")?,
                Err(e) => write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_struct_value",
                    e.code()
                )?,
            }
            match self.nullable_list_was_null() {
                Ok(value) => write!(f, "{}: {:?},", "nullable_list_was_null", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "nullable_list_was_null", e.code())?,
            }
            match self.nullable_list_value() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "nullable_list_value", value)?,
                Ok(None) => write!(f, "{}: None,", "nullable_list_value")?,
                Err(e) => write!(f, "{}: ??? {:?},", "nullable_list_value", e.code())?,
            }
            match self.optional_list_was_present() {
                Ok(value) => write!(f, "{}: {:?},", "optional_list_was_present", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "optional_list_was_present", e.code())?,
            }
            match self.optional_list_value() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "optional_list_value", value)?,
                Ok(None) => write!(f, "{}: None,", "optional_list_value")?,
                Err(e) => write!(f, "{}: ??? {:?},", "optional_list_value", e.code())?,
            }
            match self.nullable_optional_list_was_present() {
                Ok(value) => write!(f, "{}: {:?},", "nullable_optional_list_was_present", value)?,
                Err(e) => write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_list_was_present",
                    e.code()
                )?,
            }
            match self.nullable_optional_list_was_null() {
                Ok(Some(value)) => write!(
                    f,
                    "{}: Some({:?}),",
                    "nullable_optional_list_was_null", value
                )?,
                Ok(None) => write!(f, "{}: None,", "nullable_optional_list_was_null")?,
                Err(e) => write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_list_was_null",
                    e.code()
                )?,
            }
            match self.nullable_optional_list_value() {
                Ok(Some(value)) => {
                    write!(f, "{}: Some({:?}),", "nullable_optional_list_value", value)?
                }
                Ok(None) => write!(f, "{}: None,", "nullable_optional_list_value")?,
                Err(e) => write!(f, "{}: ??? {:?},", "nullable_optional_list_value", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestComplexNullableOptionalResponse<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{} {{",
                "TestComplexNullableOptionalResponse"
            );
            match self.nullable_int_was_null() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: {:?},",
                    "nullable_int_was_null",
                    value
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_int_was_null",
                    e.code()
                ),
            }
            match self.nullable_int_value() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "nullable_int_value",
                    value
                ),
                Ok(None) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: None,", "nullable_int_value")
                }
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_int_value",
                    e.code()
                ),
            }
            match self.optional_int_was_present() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: {:?},",
                    "optional_int_was_present",
                    value
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "optional_int_was_present",
                    e.code()
                ),
            }
            match self.optional_int_value() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "optional_int_value",
                    value
                ),
                Ok(None) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: None,", "optional_int_value")
                }
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "optional_int_value",
                    e.code()
                ),
            }
            match self.nullable_optional_int_was_present() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: {:?},",
                    "nullable_optional_int_was_present",
                    value
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_int_was_present",
                    e.code()
                ),
            }
            match self.nullable_optional_int_was_null() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "nullable_optional_int_was_null",
                    value
                ),
                Ok(None) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: None,",
                    "nullable_optional_int_was_null"
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_int_was_null",
                    e.code()
                ),
            }
            match self.nullable_optional_int_value() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "nullable_optional_int_value",
                    value
                ),
                Ok(None) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: None,",
                    "nullable_optional_int_value"
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_int_value",
                    e.code()
                ),
            }
            match self.nullable_string_was_null() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: {:?},",
                    "nullable_string_was_null",
                    value
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_string_was_null",
                    e.code()
                ),
            }
            match self.nullable_string_value() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "nullable_string_value",
                    value
                ),
                Ok(None) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: None,",
                    "nullable_string_value"
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_string_value",
                    e.code()
                ),
            }
            match self.optional_string_was_present() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: {:?},",
                    "optional_string_was_present",
                    value
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "optional_string_was_present",
                    e.code()
                ),
            }
            match self.optional_string_value() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "optional_string_value",
                    value
                ),
                Ok(None) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: None,",
                    "optional_string_value"
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "optional_string_value",
                    e.code()
                ),
            }
            match self.nullable_optional_string_was_present() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: {:?},",
                    "nullable_optional_string_was_present",
                    value
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_string_was_present",
                    e.code()
                ),
            }
            match self.nullable_optional_string_was_null() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "nullable_optional_string_was_null",
                    value
                ),
                Ok(None) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: None,",
                    "nullable_optional_string_was_null"
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_string_was_null",
                    e.code()
                ),
            }
            match self.nullable_optional_string_value() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "nullable_optional_string_value",
                    value
                ),
                Ok(None) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: None,",
                    "nullable_optional_string_value"
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_string_value",
                    e.code()
                ),
            }
            match self.nullable_struct_was_null() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: {:?},",
                    "nullable_struct_was_null",
                    value
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_struct_was_null",
                    e.code()
                ),
            }
            match self.nullable_struct_value() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "nullable_struct_value",
                    value
                ),
                Ok(None) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: None,",
                    "nullable_struct_value"
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_struct_value",
                    e.code()
                ),
            }
            match self.optional_struct_was_present() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: {:?},",
                    "optional_struct_was_present",
                    value
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "optional_struct_was_present",
                    e.code()
                ),
            }
            match self.optional_struct_value() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "optional_struct_value",
                    value
                ),
                Ok(None) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: None,",
                    "optional_struct_value"
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "optional_struct_value",
                    e.code()
                ),
            }
            match self.nullable_optional_struct_was_present() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: {:?},",
                    "nullable_optional_struct_was_present",
                    value
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_struct_was_present",
                    e.code()
                ),
            }
            match self.nullable_optional_struct_was_null() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "nullable_optional_struct_was_null",
                    value
                ),
                Ok(None) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: None,",
                    "nullable_optional_struct_was_null"
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_struct_was_null",
                    e.code()
                ),
            }
            match self.nullable_optional_struct_value() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "nullable_optional_struct_value",
                    value
                ),
                Ok(None) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: None,",
                    "nullable_optional_struct_value"
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_struct_value",
                    e.code()
                ),
            }
            match self.nullable_list_was_null() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: {:?},",
                    "nullable_list_was_null",
                    value
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_list_was_null",
                    e.code()
                ),
            }
            match self.nullable_list_value() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "nullable_list_value",
                    value
                ),
                Ok(None) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: None,", "nullable_list_value")
                }
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_list_value",
                    e.code()
                ),
            }
            match self.optional_list_was_present() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: {:?},",
                    "optional_list_was_present",
                    value
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "optional_list_was_present",
                    e.code()
                ),
            }
            match self.optional_list_value() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "optional_list_value",
                    value
                ),
                Ok(None) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: None,", "optional_list_value")
                }
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "optional_list_value",
                    e.code()
                ),
            }
            match self.nullable_optional_list_was_present() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: {:?},",
                    "nullable_optional_list_was_present",
                    value
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_list_was_present",
                    e.code()
                ),
            }
            match self.nullable_optional_list_was_null() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "nullable_optional_list_was_null",
                    value
                ),
                Ok(None) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: None,",
                    "nullable_optional_list_was_null"
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_list_was_null",
                    e.code()
                ),
            }
            match self.nullable_optional_list_value() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "nullable_optional_list_value",
                    value
                ),
                Ok(None) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: None,",
                    "nullable_optional_list_value"
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_list_value",
                    e.code()
                ),
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestNestedStructArgumentRequestRequest<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> TestNestedStructArgumentRequestRequest<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn arg_1(&self) -> Result<NestedStruct<'_>, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestNestedStructArgumentRequestRequest<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestNestedStructArgumentRequestRequest<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestNestedStructArgumentRequestRequest<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestNestedStructArgumentRequestRequest")?;
            match self.arg_1() {
                Ok(value) => write!(f, "{}: {:?},", "arg_1", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_1", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestNestedStructArgumentRequestRequest<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{} {{",
                "TestNestedStructArgumentRequestRequest"
            );
            match self.arg_1() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_1", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_1", e.code())
                }
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct BooleanResponse<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> BooleanResponse<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn value(&self) -> Result<bool, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for BooleanResponse<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for BooleanResponse<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for BooleanResponse<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "BooleanResponse")?;
            match self.value() {
                Ok(value) => write!(f, "{}: {:?},", "value", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "value", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for BooleanResponse<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{} {{", "BooleanResponse");
            match self.value() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "value", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "value", e.code())
                }
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestListStructArgumentRequestRequest<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> TestListStructArgumentRequestRequest<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn arg_1(
            &self,
        ) -> Result<
            rs_matter_crate::tlv::TLVArray<'_, SimpleStruct<'_>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestListStructArgumentRequestRequest<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestListStructArgumentRequestRequest<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestListStructArgumentRequestRequest<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestListStructArgumentRequestRequest")?;
            match self.arg_1() {
                Ok(value) => write!(f, "{}: {:?},", "arg_1", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_1", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestListStructArgumentRequestRequest<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{} {{",
                "TestListStructArgumentRequestRequest"
            );
            match self.arg_1() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_1", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_1", e.code())
                }
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct SimpleStructResponse<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> SimpleStructResponse<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn arg_1(&self) -> Result<SimpleStruct<'_>, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for SimpleStructResponse<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for SimpleStructResponse<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for SimpleStructResponse<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "SimpleStructResponse")?;
            match self.arg_1() {
                Ok(value) => write!(f, "{}: {:?},", "arg_1", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_1", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for SimpleStructResponse<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{} {{", "SimpleStructResponse");
            match self.arg_1() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_1", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_1", e.code())
                }
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestListInt8UArgumentRequestRequest<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> TestListInt8UArgumentRequestRequest<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn arg_1(
            &self,
        ) -> Result<rs_matter_crate::tlv::TLVArray<'_, u8>, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestListInt8UArgumentRequestRequest<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestListInt8UArgumentRequestRequest<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestListInt8UArgumentRequestRequest<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestListInt8UArgumentRequestRequest")?;
            match self.arg_1() {
                Ok(value) => write!(f, "{}: {:?},", "arg_1", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_1", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestListInt8UArgumentRequestRequest<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{} {{",
                "TestListInt8UArgumentRequestRequest"
            );
            match self.arg_1() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_1", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_1", e.code())
                }
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestEmitTestEventResponse<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> TestEmitTestEventResponse<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn value(&self) -> Result<u64, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestEmitTestEventResponse<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestEmitTestEventResponse<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestEmitTestEventResponse<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestEmitTestEventResponse")?;
            match self.value() {
                Ok(value) => write!(f, "{}: {:?},", "value", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "value", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestEmitTestEventResponse<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{} {{", "TestEmitTestEventResponse");
            match self.value() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "value", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "value", e.code())
                }
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestNestedStructListArgumentRequestRequest<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> TestNestedStructListArgumentRequestRequest<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn arg_1(&self) -> Result<NestedStructList<'_>, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestNestedStructListArgumentRequestRequest<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestNestedStructListArgumentRequestRequest<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestNestedStructListArgumentRequestRequest<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestNestedStructListArgumentRequestRequest")?;
            match self.arg_1() {
                Ok(value) => write!(f, "{}: {:?},", "arg_1", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_1", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestNestedStructListArgumentRequestRequest<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{} {{",
                "TestNestedStructListArgumentRequestRequest"
            );
            match self.arg_1() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_1", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_1", e.code())
                }
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestEmitTestFabricScopedEventResponse<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> TestEmitTestFabricScopedEventResponse<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn value(&self) -> Result<u64, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestEmitTestFabricScopedEventResponse<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestEmitTestFabricScopedEventResponse<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestEmitTestFabricScopedEventResponse<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestEmitTestFabricScopedEventResponse")?;
            match self.value() {
                Ok(value) => write!(f, "{}: {:?},", "value", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "value", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestEmitTestFabricScopedEventResponse<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{} {{",
                "TestEmitTestFabricScopedEventResponse"
            );
            match self.value() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "value", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "value", e.code())
                }
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestListNestedStructListArgumentRequestRequest<'a>(
        rs_matter_crate::tlv::TLVElement<'a>,
    );
    impl<'a> TestListNestedStructListArgumentRequestRequest<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn arg_1(
            &self,
        ) -> Result<
            rs_matter_crate::tlv::TLVArray<'_, NestedStructList<'_>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestListNestedStructListArgumentRequestRequest<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestListNestedStructListArgumentRequestRequest<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestListNestedStructListArgumentRequestRequest<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestListNestedStructListArgumentRequestRequest")?;
            match self.arg_1() {
                Ok(value) => write!(f, "{}: {:?},", "arg_1", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_1", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format
        for TestListNestedStructListArgumentRequestRequest<'_>
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{} {{",
                "TestListNestedStructListArgumentRequestRequest"
            );
            match self.arg_1() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_1", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_1", e.code())
                }
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestBatchHelperResponse<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> TestBatchHelperResponse<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn buffer(
            &self,
        ) -> Result<rs_matter_crate::tlv::OctetStr<'_>, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestBatchHelperResponse<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestBatchHelperResponse<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestBatchHelperResponse<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestBatchHelperResponse")?;
            match self.buffer() {
                Ok(value) => write!(f, "{}: {:?},", "buffer", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "buffer", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestBatchHelperResponse<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{} {{", "TestBatchHelperResponse");
            match self.buffer() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "buffer", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "buffer", e.code())
                }
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestListInt8UReverseRequestRequest<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> TestListInt8UReverseRequestRequest<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn arg_1(
            &self,
        ) -> Result<rs_matter_crate::tlv::TLVArray<'_, u8>, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestListInt8UReverseRequestRequest<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestListInt8UReverseRequestRequest<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestListInt8UReverseRequestRequest<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestListInt8UReverseRequestRequest")?;
            match self.arg_1() {
                Ok(value) => write!(f, "{}: {:?},", "arg_1", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_1", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestListInt8UReverseRequestRequest<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{} {{",
                "TestListInt8UReverseRequestRequest"
            );
            match self.arg_1() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_1", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_1", e.code())
                }
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestEnumsRequestRequest<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> TestEnumsRequestRequest<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn arg_1(&self) -> Result<u16, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
        pub fn arg_2(&self) -> Result<SimpleEnum, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(1)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestEnumsRequestRequest<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestEnumsRequestRequest<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestEnumsRequestRequest<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestEnumsRequestRequest")?;
            match self.arg_1() {
                Ok(value) => write!(f, "{}: {:?},", "arg_1", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_1", e.code())?,
            }
            match self.arg_2() {
                Ok(value) => write!(f, "{}: {:?},", "arg_2", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_2", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestEnumsRequestRequest<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{} {{", "TestEnumsRequestRequest");
            match self.arg_1() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_1", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_1", e.code())
                }
            }
            match self.arg_2() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_2", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_2", e.code())
                }
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestNullableOptionalRequestRequest<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> TestNullableOptionalRequestRequest<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn arg_1(
            &self,
        ) -> Result<Option<rs_matter_crate::tlv::Nullable<u8>>, rs_matter_crate::error::Error>
        {
            let element = self.0.structure()?.find_ctx(0)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestNullableOptionalRequestRequest<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestNullableOptionalRequestRequest<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestNullableOptionalRequestRequest<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestNullableOptionalRequestRequest")?;
            match self.arg_1() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "arg_1", value)?,
                Ok(None) => write!(f, "{}: None,", "arg_1")?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_1", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestNullableOptionalRequestRequest<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{} {{",
                "TestNullableOptionalRequestRequest"
            );
            match self.arg_1() {
                Ok(Some(value)) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: Some({:?}),", "arg_1", value)
                }
                Ok(None) => rs_matter_crate::reexport::defmt::write!(f, "{}: None,", "arg_1"),
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_1", e.code())
                }
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestComplexNullableOptionalRequestRequest<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> TestComplexNullableOptionalRequestRequest<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn nullable_int(
            &self,
        ) -> Result<rs_matter_crate::tlv::Nullable<u16>, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
        pub fn optional_int(&self) -> Result<Option<u16>, rs_matter_crate::error::Error> {
            let element = self.0.structure()?.find_ctx(1)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn nullable_optional_int(
            &self,
        ) -> Result<Option<rs_matter_crate::tlv::Nullable<u16>>, rs_matter_crate::error::Error>
        {
            let element = self.0.structure()?.find_ctx(2)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn nullable_string(
            &self,
        ) -> Result<
            rs_matter_crate::tlv::Nullable<rs_matter_crate::tlv::Utf8Str<'_>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(3)?)
        }
        pub fn optional_string(
            &self,
        ) -> Result<Option<rs_matter_crate::tlv::Utf8Str<'_>>, rs_matter_crate::error::Error>
        {
            let element = self.0.structure()?.find_ctx(4)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn nullable_optional_string(
            &self,
        ) -> Result<
            Option<rs_matter_crate::tlv::Nullable<rs_matter_crate::tlv::Utf8Str<'_>>>,
            rs_matter_crate::error::Error,
        > {
            let element = self.0.structure()?.find_ctx(5)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn nullable_struct(
            &self,
        ) -> Result<rs_matter_crate::tlv::Nullable<SimpleStruct<'_>>, rs_matter_crate::error::Error>
        {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(6)?)
        }
        pub fn optional_struct(
            &self,
        ) -> Result<Option<SimpleStruct<'_>>, rs_matter_crate::error::Error> {
            let element = self.0.structure()?.find_ctx(7)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn nullable_optional_struct(
            &self,
        ) -> Result<
            Option<rs_matter_crate::tlv::Nullable<SimpleStruct<'_>>>,
            rs_matter_crate::error::Error,
        > {
            let element = self.0.structure()?.find_ctx(8)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn nullable_list(
            &self,
        ) -> Result<
            rs_matter_crate::tlv::Nullable<rs_matter_crate::tlv::TLVArray<'_, SimpleEnum>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(9)?)
        }
        pub fn optional_list(
            &self,
        ) -> Result<
            Option<rs_matter_crate::tlv::TLVArray<'_, SimpleEnum>>,
            rs_matter_crate::error::Error,
        > {
            let element = self.0.structure()?.find_ctx(10)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
        pub fn nullable_optional_list(
            &self,
        ) -> Result<
            Option<rs_matter_crate::tlv::Nullable<rs_matter_crate::tlv::TLVArray<'_, SimpleEnum>>>,
            rs_matter_crate::error::Error,
        > {
            let element = self.0.structure()?.find_ctx(11)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestComplexNullableOptionalRequestRequest<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestComplexNullableOptionalRequestRequest<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestComplexNullableOptionalRequestRequest<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestComplexNullableOptionalRequestRequest")?;
            match self.nullable_int() {
                Ok(value) => write!(f, "{}: {:?},", "nullable_int", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "nullable_int", e.code())?,
            }
            match self.optional_int() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "optional_int", value)?,
                Ok(None) => write!(f, "{}: None,", "optional_int")?,
                Err(e) => write!(f, "{}: ??? {:?},", "optional_int", e.code())?,
            }
            match self.nullable_optional_int() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "nullable_optional_int", value)?,
                Ok(None) => write!(f, "{}: None,", "nullable_optional_int")?,
                Err(e) => write!(f, "{}: ??? {:?},", "nullable_optional_int", e.code())?,
            }
            match self.nullable_string() {
                Ok(value) => write!(f, "{}: {:?},", "nullable_string", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "nullable_string", e.code())?,
            }
            match self.optional_string() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "optional_string", value)?,
                Ok(None) => write!(f, "{}: None,", "optional_string")?,
                Err(e) => write!(f, "{}: ??? {:?},", "optional_string", e.code())?,
            }
            match self.nullable_optional_string() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "nullable_optional_string", value)?,
                Ok(None) => write!(f, "{}: None,", "nullable_optional_string")?,
                Err(e) => write!(f, "{}: ??? {:?},", "nullable_optional_string", e.code())?,
            }
            match self.nullable_struct() {
                Ok(value) => write!(f, "{}: {:?},", "nullable_struct", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "nullable_struct", e.code())?,
            }
            match self.optional_struct() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "optional_struct", value)?,
                Ok(None) => write!(f, "{}: None,", "optional_struct")?,
                Err(e) => write!(f, "{}: ??? {:?},", "optional_struct", e.code())?,
            }
            match self.nullable_optional_struct() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "nullable_optional_struct", value)?,
                Ok(None) => write!(f, "{}: None,", "nullable_optional_struct")?,
                Err(e) => write!(f, "{}: ??? {:?},", "nullable_optional_struct", e.code())?,
            }
            match self.nullable_list() {
                Ok(value) => write!(f, "{}: {:?},", "nullable_list", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "nullable_list", e.code())?,
            }
            match self.optional_list() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "optional_list", value)?,
                Ok(None) => write!(f, "{}: None,", "optional_list")?,
                Err(e) => write!(f, "{}: ??? {:?},", "optional_list", e.code())?,
            }
            match self.nullable_optional_list() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "nullable_optional_list", value)?,
                Ok(None) => write!(f, "{}: None,", "nullable_optional_list")?,
                Err(e) => write!(f, "{}: ??? {:?},", "nullable_optional_list", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestComplexNullableOptionalRequestRequest<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{} {{",
                "TestComplexNullableOptionalRequestRequest"
            );
            match self.nullable_int() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "nullable_int", value)
                }
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_int",
                    e.code()
                ),
            }
            match self.optional_int() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "optional_int",
                    value
                ),
                Ok(None) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: None,", "optional_int")
                }
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "optional_int",
                    e.code()
                ),
            }
            match self.nullable_optional_int() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "nullable_optional_int",
                    value
                ),
                Ok(None) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: None,",
                    "nullable_optional_int"
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_int",
                    e.code()
                ),
            }
            match self.nullable_string() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: {:?},",
                    "nullable_string",
                    value
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_string",
                    e.code()
                ),
            }
            match self.optional_string() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "optional_string",
                    value
                ),
                Ok(None) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: None,", "optional_string")
                }
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "optional_string",
                    e.code()
                ),
            }
            match self.nullable_optional_string() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "nullable_optional_string",
                    value
                ),
                Ok(None) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: None,",
                    "nullable_optional_string"
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_string",
                    e.code()
                ),
            }
            match self.nullable_struct() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: {:?},",
                    "nullable_struct",
                    value
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_struct",
                    e.code()
                ),
            }
            match self.optional_struct() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "optional_struct",
                    value
                ),
                Ok(None) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: None,", "optional_struct")
                }
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "optional_struct",
                    e.code()
                ),
            }
            match self.nullable_optional_struct() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "nullable_optional_struct",
                    value
                ),
                Ok(None) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: None,",
                    "nullable_optional_struct"
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_struct",
                    e.code()
                ),
            }
            match self.nullable_list() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "nullable_list", value)
                }
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_list",
                    e.code()
                ),
            }
            match self.optional_list() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "optional_list",
                    value
                ),
                Ok(None) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: None,", "optional_list")
                }
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "optional_list",
                    e.code()
                ),
            }
            match self.nullable_optional_list() {
                Ok(Some(value)) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: Some({:?}),",
                    "nullable_optional_list",
                    value
                ),
                Ok(None) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: None,",
                    "nullable_optional_list"
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "nullable_optional_list",
                    e.code()
                ),
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct SimpleStructEchoRequestRequest<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> SimpleStructEchoRequestRequest<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn arg_1(&self) -> Result<SimpleStruct<'_>, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for SimpleStructEchoRequestRequest<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for SimpleStructEchoRequestRequest<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for SimpleStructEchoRequestRequest<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "SimpleStructEchoRequestRequest")?;
            match self.arg_1() {
                Ok(value) => write!(f, "{}: {:?},", "arg_1", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_1", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for SimpleStructEchoRequestRequest<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{} {{", "SimpleStructEchoRequestRequest");
            match self.arg_1() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_1", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_1", e.code())
                }
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestSimpleOptionalArgumentRequestRequest<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> TestSimpleOptionalArgumentRequestRequest<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn arg_1(&self) -> Result<Option<bool>, rs_matter_crate::error::Error> {
            let element = self.0.structure()?.find_ctx(0)?;
            if element.is_empty() {
                Ok(None)
            } else {
                Ok(Some(rs_matter_crate::tlv::FromTLV::from_tlv(&element)?))
            }
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestSimpleOptionalArgumentRequestRequest<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestSimpleOptionalArgumentRequestRequest<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestSimpleOptionalArgumentRequestRequest<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestSimpleOptionalArgumentRequestRequest")?;
            match self.arg_1() {
                Ok(Some(value)) => write!(f, "{}: Some({:?}),", "arg_1", value)?,
                Ok(None) => write!(f, "{}: None,", "arg_1")?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_1", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestSimpleOptionalArgumentRequestRequest<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{} {{",
                "TestSimpleOptionalArgumentRequestRequest"
            );
            match self.arg_1() {
                Ok(Some(value)) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: Some({:?}),", "arg_1", value)
                }
                Ok(None) => rs_matter_crate::reexport::defmt::write!(f, "{}: None,", "arg_1"),
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_1", e.code())
                }
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestEmitTestEventRequestRequest<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> TestEmitTestEventRequestRequest<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn arg_1(&self) -> Result<u8, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
        pub fn arg_2(&self) -> Result<SimpleEnum, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(1)?)
        }
        pub fn arg_3(&self) -> Result<bool, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(2)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestEmitTestEventRequestRequest<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestEmitTestEventRequestRequest<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestEmitTestEventRequestRequest<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestEmitTestEventRequestRequest")?;
            match self.arg_1() {
                Ok(value) => write!(f, "{}: {:?},", "arg_1", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_1", e.code())?,
            }
            match self.arg_2() {
                Ok(value) => write!(f, "{}: {:?},", "arg_2", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_2", e.code())?,
            }
            match self.arg_3() {
                Ok(value) => write!(f, "{}: {:?},", "arg_3", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_3", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestEmitTestEventRequestRequest<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{} {{", "TestEmitTestEventRequestRequest");
            match self.arg_1() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_1", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_1", e.code())
                }
            }
            match self.arg_2() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_2", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_2", e.code())
                }
            }
            match self.arg_3() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_3", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_3", e.code())
                }
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestEmitTestFabricScopedEventRequestRequest<'a>(
        rs_matter_crate::tlv::TLVElement<'a>,
    );
    impl<'a> TestEmitTestFabricScopedEventRequestRequest<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn arg_1(&self) -> Result<u8, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestEmitTestFabricScopedEventRequestRequest<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestEmitTestFabricScopedEventRequestRequest<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestEmitTestFabricScopedEventRequestRequest<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestEmitTestFabricScopedEventRequestRequest")?;
            match self.arg_1() {
                Ok(value) => write!(f, "{}: {:?},", "arg_1", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_1", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestEmitTestFabricScopedEventRequestRequest<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{} {{",
                "TestEmitTestFabricScopedEventRequestRequest"
            );
            match self.arg_1() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_1", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_1", e.code())
                }
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestBatchHelperRequestRequest<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> TestBatchHelperRequestRequest<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn sleep_before_response_time_ms(&self) -> Result<u16, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
        pub fn size_of_response_buffer(&self) -> Result<u16, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(1)?)
        }
        pub fn fill_character(&self) -> Result<u8, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(2)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestBatchHelperRequestRequest<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestBatchHelperRequestRequest<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestBatchHelperRequestRequest<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestBatchHelperRequestRequest")?;
            match self.sleep_before_response_time_ms() {
                Ok(value) => write!(f, "{}: {:?},", "sleep_before_response_time_ms", value)?,
                Err(e) => write!(
                    f,
                    "{}: ??? {:?},",
                    "sleep_before_response_time_ms",
                    e.code()
                )?,
            }
            match self.size_of_response_buffer() {
                Ok(value) => write!(f, "{}: {:?},", "size_of_response_buffer", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "size_of_response_buffer", e.code())?,
            }
            match self.fill_character() {
                Ok(value) => write!(f, "{}: {:?},", "fill_character", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "fill_character", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestBatchHelperRequestRequest<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{} {{", "TestBatchHelperRequestRequest");
            match self.sleep_before_response_time_ms() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: {:?},",
                    "sleep_before_response_time_ms",
                    value
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "sleep_before_response_time_ms",
                    e.code()
                ),
            }
            match self.size_of_response_buffer() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: {:?},",
                    "size_of_response_buffer",
                    value
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "size_of_response_buffer",
                    e.code()
                ),
            }
            match self.fill_character() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: {:?},",
                    "fill_character",
                    value
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "fill_character",
                    e.code()
                ),
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestSecondBatchHelperRequestRequest<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> TestSecondBatchHelperRequestRequest<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn sleep_before_response_time_ms(&self) -> Result<u16, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
        pub fn size_of_response_buffer(&self) -> Result<u16, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(1)?)
        }
        pub fn fill_character(&self) -> Result<u8, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(2)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestSecondBatchHelperRequestRequest<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestSecondBatchHelperRequestRequest<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestSecondBatchHelperRequestRequest<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestSecondBatchHelperRequestRequest")?;
            match self.sleep_before_response_time_ms() {
                Ok(value) => write!(f, "{}: {:?},", "sleep_before_response_time_ms", value)?,
                Err(e) => write!(
                    f,
                    "{}: ??? {:?},",
                    "sleep_before_response_time_ms",
                    e.code()
                )?,
            }
            match self.size_of_response_buffer() {
                Ok(value) => write!(f, "{}: {:?},", "size_of_response_buffer", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "size_of_response_buffer", e.code())?,
            }
            match self.fill_character() {
                Ok(value) => write!(f, "{}: {:?},", "fill_character", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "fill_character", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestSecondBatchHelperRequestRequest<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{} {{",
                "TestSecondBatchHelperRequestRequest"
            );
            match self.sleep_before_response_time_ms() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: {:?},",
                    "sleep_before_response_time_ms",
                    value
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "sleep_before_response_time_ms",
                    e.code()
                ),
            }
            match self.size_of_response_buffer() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: {:?},",
                    "size_of_response_buffer",
                    value
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "size_of_response_buffer",
                    e.code()
                ),
            }
            match self.fill_character() {
                Ok(value) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: {:?},",
                    "fill_character",
                    value
                ),
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "fill_character",
                    e.code()
                ),
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestDifferentVendorMeiRequestRequest<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> TestDifferentVendorMeiRequestRequest<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn arg_1(&self) -> Result<u8, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestDifferentVendorMeiRequestRequest<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestDifferentVendorMeiRequestRequest<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestDifferentVendorMeiRequestRequest<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestDifferentVendorMeiRequestRequest")?;
            match self.arg_1() {
                Ok(value) => write!(f, "{}: {:?},", "arg_1", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_1", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestDifferentVendorMeiRequestRequest<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{} {{",
                "TestDifferentVendorMeiRequestRequest"
            );
            match self.arg_1() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_1", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_1", e.code())
                }
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    #[derive(PartialEq, Eq, Clone, Hash)]
    pub struct TestDifferentVendorMeiResponse<'a>(rs_matter_crate::tlv::TLVElement<'a>);
    impl<'a> TestDifferentVendorMeiResponse<'a> {
        #[doc = "Create a new instance"]
        pub const fn new(element: rs_matter_crate::tlv::TLVElement<'a>) -> Self {
            Self(element)
        }
        #[doc = "Return the underlying TLV element"]
        pub const fn tlv_element(&self) -> &rs_matter_crate::tlv::TLVElement<'a> {
            &self.0
        }
        pub fn arg_1(&self) -> Result<u8, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(0)?)
        }
        pub fn event_number(&self) -> Result<u64, rs_matter_crate::error::Error> {
            rs_matter_crate::tlv::FromTLV::from_tlv(&self.0.structure()?.ctx(1)?)
        }
    }
    impl<'a> rs_matter_crate::tlv::FromTLV<'a> for TestDifferentVendorMeiResponse<'a> {
        fn from_tlv(
            element: &rs_matter_crate::tlv::TLVElement<'a>,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Ok(Self::new(element.clone()))
        }
    }
    impl rs_matter_crate::tlv::ToTLV for TestDifferentVendorMeiResponse<'_> {
        fn to_tlv<W: rs_matter_crate::tlv::TLVWrite>(
            &self,
            tag: &rs_matter_crate::tlv::TLVTag,
            tw: W,
        ) -> Result<(), rs_matter_crate::error::Error> {
            self.0.to_tlv(tag, tw)
        }
        fn tlv_iter(
            &self,
            tag: rs_matter_crate::tlv::TLVTag,
        ) -> impl Iterator<Item = Result<rs_matter_crate::tlv::TLV, rs_matter_crate::error::Error>>
        {
            self.0.tlv_iter(tag)
        }
    }
    impl core::fmt::Debug for TestDifferentVendorMeiResponse<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} {{", "TestDifferentVendorMeiResponse")?;
            match self.arg_1() {
                Ok(value) => write!(f, "{}: {:?},", "arg_1", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "arg_1", e.code())?,
            }
            match self.event_number() {
                Ok(value) => write!(f, "{}: {:?},", "event_number", value)?,
                Err(e) => write!(f, "{}: ??? {:?},", "event_number", e.code())?,
            }
            write!(f, "}}")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for TestDifferentVendorMeiResponse<'_> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{} {{", "TestDifferentVendorMeiResponse");
            match self.arg_1() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "arg_1", value)
                }
                Err(e) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: ??? {:?},", "arg_1", e.code())
                }
            }
            match self.event_number() {
                Ok(value) => {
                    rs_matter_crate::reexport::defmt::write!(f, "{}: {:?},", "event_number", value)
                }
                Err(e) => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}: ??? {:?},",
                    "event_number",
                    e.code()
                ),
            }
            rs_matter_crate::reexport::defmt::write!(f, "}}")
        }
    }
    pub struct SimpleStructBuilder<P, const F: usize = 0usize>(P);
    impl<P> SimpleStructBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> SimpleStructBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn a(
            mut self,
            value: u8,
        ) -> Result<SimpleStructBuilder<P, 1usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "a", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "a", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(SimpleStructBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> SimpleStructBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn a(
            mut self,
            value: u8,
        ) -> Result<SimpleStructBuilder<P, 1usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "a", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(SimpleStructBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> SimpleStructBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn b(
            mut self,
            value: bool,
        ) -> Result<SimpleStructBuilder<P, 2usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "b", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "b", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(SimpleStructBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> SimpleStructBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn b(
            mut self,
            value: bool,
        ) -> Result<SimpleStructBuilder<P, 2usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "b", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(SimpleStructBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> SimpleStructBuilder<P, 2>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn c(
            mut self,
            value: SimpleEnum,
        ) -> Result<SimpleStructBuilder<P, 3usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "c", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "c", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(2),
                self.0.writer(),
            )?;
            Ok(SimpleStructBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> SimpleStructBuilder<P, 2>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn c(
            mut self,
            value: SimpleEnum,
        ) -> Result<SimpleStructBuilder<P, 3usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "c", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(2),
                self.0.writer(),
            )?;
            Ok(SimpleStructBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> SimpleStructBuilder<P, 3>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn d(
            mut self,
            value: rs_matter_crate::tlv::OctetStr<'_>,
        ) -> Result<SimpleStructBuilder<P, 4usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "d", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "d", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(3),
                self.0.writer(),
            )?;
            Ok(SimpleStructBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> SimpleStructBuilder<P, 3>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn d(
            mut self,
            value: rs_matter_crate::tlv::OctetStr<'_>,
        ) -> Result<SimpleStructBuilder<P, 4usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "d", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(3),
                self.0.writer(),
            )?;
            Ok(SimpleStructBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> SimpleStructBuilder<P, 4>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn e(
            mut self,
            value: rs_matter_crate::tlv::Utf8Str<'_>,
        ) -> Result<SimpleStructBuilder<P, 5usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "e", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "e", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(4),
                self.0.writer(),
            )?;
            Ok(SimpleStructBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> SimpleStructBuilder<P, 4>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn e(
            mut self,
            value: rs_matter_crate::tlv::Utf8Str<'_>,
        ) -> Result<SimpleStructBuilder<P, 5usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "e", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(4),
                self.0.writer(),
            )?;
            Ok(SimpleStructBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> SimpleStructBuilder<P, 5>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn f(
            mut self,
            value: SimpleBitmap,
        ) -> Result<SimpleStructBuilder<P, 6usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "f", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "f", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(5),
                self.0.writer(),
            )?;
            Ok(SimpleStructBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> SimpleStructBuilder<P, 5>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn f(
            mut self,
            value: SimpleBitmap,
        ) -> Result<SimpleStructBuilder<P, 6usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "f", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(5),
                self.0.writer(),
            )?;
            Ok(SimpleStructBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> SimpleStructBuilder<P, 6>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn g(
            mut self,
            value: f32,
        ) -> Result<SimpleStructBuilder<P, 7usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "g", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "g", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(6),
                self.0.writer(),
            )?;
            Ok(SimpleStructBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> SimpleStructBuilder<P, 6>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn g(
            mut self,
            value: f32,
        ) -> Result<SimpleStructBuilder<P, 7usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "g", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(6),
                self.0.writer(),
            )?;
            Ok(SimpleStructBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> SimpleStructBuilder<P, 7>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn h(
            mut self,
            value: f64,
        ) -> Result<SimpleStructBuilder<P, 8usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "h", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "h", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(7),
                self.0.writer(),
            )?;
            Ok(SimpleStructBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> SimpleStructBuilder<P, 7>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn h(
            mut self,
            value: f64,
        ) -> Result<SimpleStructBuilder<P, 8usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "h", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(7),
                self.0.writer(),
            )?;
            Ok(SimpleStructBuilder(self.0))
        }
    }
    impl<P> SimpleStructBuilder<P, 8usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for SimpleStructBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "SimpleStruct")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format for SimpleStructBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{:?}::{}", self.0, "SimpleStruct")
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent for SimpleStructBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for SimpleStructBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct SimpleStructArrayBuilder<P>(P);
    impl<P> SimpleStructArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<SimpleStructBuilder<SimpleStructArrayBuilder<P>>, rs_matter_crate::error::Error>
        {
            rs_matter_crate::tlv::TLVBuilder::new(
                SimpleStructArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for SimpleStructArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "SimpleStruct[]")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format for SimpleStructArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{:?}::{}", self.0, "SimpleStruct[]")
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent for SimpleStructArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for SimpleStructArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestFabricScopedBuilder<P, const F: usize = 1usize>(P);
    impl<P> TestFabricScopedBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestFabricScopedBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn fabric_sensitive_int_8_u(
            mut self,
            value: Option<u8>,
        ) -> Result<TestFabricScopedBuilder<P, 2usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "fabricSensitiveInt8u",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "fabricSensitiveInt8u",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(TestFabricScopedBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestFabricScopedBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn fabric_sensitive_int_8_u(
            mut self,
            value: Option<u8>,
        ) -> Result<TestFabricScopedBuilder<P, 2usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "fabricSensitiveInt8u",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(TestFabricScopedBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestFabricScopedBuilder<P, 2>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn optional_fabric_sensitive_int_8_u(
            mut self,
            value: Option<u8>,
        ) -> Result<TestFabricScopedBuilder<P, 3usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalFabricSensitiveInt8u",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalFabricSensitiveInt8u",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(2),
                self.0.writer(),
            )?;
            Ok(TestFabricScopedBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestFabricScopedBuilder<P, 2>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn optional_fabric_sensitive_int_8_u(
            mut self,
            value: Option<u8>,
        ) -> Result<TestFabricScopedBuilder<P, 3usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalFabricSensitiveInt8u",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(2),
                self.0.writer(),
            )?;
            Ok(TestFabricScopedBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestFabricScopedBuilder<P, 3>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn nullable_fabric_sensitive_int_8_u(
            mut self,
            value: Option<rs_matter_crate::tlv::Nullable<u8>>,
        ) -> Result<TestFabricScopedBuilder<P, 4usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableFabricSensitiveInt8u",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableFabricSensitiveInt8u",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(3),
                self.0.writer(),
            )?;
            Ok(TestFabricScopedBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestFabricScopedBuilder<P, 3>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn nullable_fabric_sensitive_int_8_u(
            mut self,
            value: Option<rs_matter_crate::tlv::Nullable<u8>>,
        ) -> Result<TestFabricScopedBuilder<P, 4usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableFabricSensitiveInt8u",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(3),
                self.0.writer(),
            )?;
            Ok(TestFabricScopedBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestFabricScopedBuilder<P, 4>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn nullable_optional_fabric_sensitive_int_8_u(
            mut self,
            value: Option<rs_matter_crate::tlv::Nullable<u8>>,
        ) -> Result<TestFabricScopedBuilder<P, 5usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalFabricSensitiveInt8u",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalFabricSensitiveInt8u",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(4),
                self.0.writer(),
            )?;
            Ok(TestFabricScopedBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestFabricScopedBuilder<P, 4>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn nullable_optional_fabric_sensitive_int_8_u(
            mut self,
            value: Option<rs_matter_crate::tlv::Nullable<u8>>,
        ) -> Result<TestFabricScopedBuilder<P, 5usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalFabricSensitiveInt8u",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(4),
                self.0.writer(),
            )?;
            Ok(TestFabricScopedBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestFabricScopedBuilder<P, 5>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn fabric_sensitive_char_string(
            mut self,
            value: Option<rs_matter_crate::tlv::Utf8Str<'_>>,
        ) -> Result<TestFabricScopedBuilder<P, 6usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "fabricSensitiveCharString",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "fabricSensitiveCharString",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(5),
                self.0.writer(),
            )?;
            Ok(TestFabricScopedBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestFabricScopedBuilder<P, 5>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn fabric_sensitive_char_string(
            mut self,
            value: Option<rs_matter_crate::tlv::Utf8Str<'_>>,
        ) -> Result<TestFabricScopedBuilder<P, 6usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "fabricSensitiveCharString",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(5),
                self.0.writer(),
            )?;
            Ok(TestFabricScopedBuilder(self.0))
        }
    }
    impl<P> TestFabricScopedBuilder<P, 6>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn fabric_sensitive_struct(
            self,
        ) -> Result<
            rs_matter_crate::tlv::OptionalBuilder<
                TestFabricScopedBuilder<P, 7usize>,
                SimpleStructBuilder<TestFabricScopedBuilder<P, 7usize>>,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestFabricScopedBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(6),
            )
        }
    }
    impl<P> TestFabricScopedBuilder<P, 7>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn fabric_sensitive_int_8_u_list(
            self,
        ) -> Result<
            rs_matter_crate::tlv::OptionalBuilder<
                TestFabricScopedBuilder<P, 254usize>,
                rs_matter_crate::tlv::ToTLVArrayBuilder<TestFabricScopedBuilder<P, 254usize>, u8>,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestFabricScopedBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(7),
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestFabricScopedBuilder<P, 254>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn fabric_index(
            mut self,
            value: Option<u8>,
        ) -> Result<TestFabricScopedBuilder<P, 255usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "fabricIndex",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "fabricIndex",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(254),
                self.0.writer(),
            )?;
            Ok(TestFabricScopedBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestFabricScopedBuilder<P, 254>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn fabric_index(
            mut self,
            value: Option<u8>,
        ) -> Result<TestFabricScopedBuilder<P, 255usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "fabricIndex",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(254),
                self.0.writer(),
            )?;
            Ok(TestFabricScopedBuilder(self.0))
        }
    }
    impl<P> TestFabricScopedBuilder<P, 255usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for TestFabricScopedBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestFabricScoped")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format for TestFabricScopedBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{:?}::{}", self.0, "TestFabricScoped")
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent for TestFabricScopedBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestFabricScopedBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestFabricScopedArrayBuilder<P>(P);
    impl<P> TestFabricScopedArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestFabricScopedBuilder<TestFabricScopedArrayBuilder<P>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestFabricScopedArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestFabricScopedArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestFabricScoped[]")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format for TestFabricScopedArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{:?}::{}", self.0, "TestFabricScoped[]")
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent for TestFabricScopedArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestFabricScopedArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct NullablesAndOptionalsStructBuilder<P, const F: usize = 0usize>(P);
    impl<P> NullablesAndOptionalsStructBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> NullablesAndOptionalsStructBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn nullable_int(
            mut self,
            value: rs_matter_crate::tlv::Nullable<u16>,
        ) -> Result<NullablesAndOptionalsStructBuilder<P, 1usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableInt",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableInt",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(NullablesAndOptionalsStructBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> NullablesAndOptionalsStructBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn nullable_int(
            mut self,
            value: rs_matter_crate::tlv::Nullable<u16>,
        ) -> Result<NullablesAndOptionalsStructBuilder<P, 1usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableInt",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(NullablesAndOptionalsStructBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> NullablesAndOptionalsStructBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn optional_int(
            mut self,
            value: Option<u16>,
        ) -> Result<NullablesAndOptionalsStructBuilder<P, 2usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalInt",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalInt",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(NullablesAndOptionalsStructBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> NullablesAndOptionalsStructBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn optional_int(
            mut self,
            value: Option<u16>,
        ) -> Result<NullablesAndOptionalsStructBuilder<P, 2usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalInt",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(NullablesAndOptionalsStructBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> NullablesAndOptionalsStructBuilder<P, 2>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn nullable_optional_int(
            mut self,
            value: Option<rs_matter_crate::tlv::Nullable<u16>>,
        ) -> Result<NullablesAndOptionalsStructBuilder<P, 3usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalInt",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalInt",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(2),
                self.0.writer(),
            )?;
            Ok(NullablesAndOptionalsStructBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> NullablesAndOptionalsStructBuilder<P, 2>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn nullable_optional_int(
            mut self,
            value: Option<rs_matter_crate::tlv::Nullable<u16>>,
        ) -> Result<NullablesAndOptionalsStructBuilder<P, 3usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalInt",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(2),
                self.0.writer(),
            )?;
            Ok(NullablesAndOptionalsStructBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> NullablesAndOptionalsStructBuilder<P, 3>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn nullable_string(
            mut self,
            value: rs_matter_crate::tlv::Nullable<rs_matter_crate::tlv::Utf8Str<'_>>,
        ) -> Result<NullablesAndOptionalsStructBuilder<P, 4usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableString",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableString",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(3),
                self.0.writer(),
            )?;
            Ok(NullablesAndOptionalsStructBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> NullablesAndOptionalsStructBuilder<P, 3>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn nullable_string(
            mut self,
            value: rs_matter_crate::tlv::Nullable<rs_matter_crate::tlv::Utf8Str<'_>>,
        ) -> Result<NullablesAndOptionalsStructBuilder<P, 4usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableString",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(3),
                self.0.writer(),
            )?;
            Ok(NullablesAndOptionalsStructBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> NullablesAndOptionalsStructBuilder<P, 4>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn optional_string(
            mut self,
            value: Option<rs_matter_crate::tlv::Utf8Str<'_>>,
        ) -> Result<NullablesAndOptionalsStructBuilder<P, 5usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalString",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalString",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(4),
                self.0.writer(),
            )?;
            Ok(NullablesAndOptionalsStructBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> NullablesAndOptionalsStructBuilder<P, 4>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn optional_string(
            mut self,
            value: Option<rs_matter_crate::tlv::Utf8Str<'_>>,
        ) -> Result<NullablesAndOptionalsStructBuilder<P, 5usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalString",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(4),
                self.0.writer(),
            )?;
            Ok(NullablesAndOptionalsStructBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> NullablesAndOptionalsStructBuilder<P, 5>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn nullable_optional_string(
            mut self,
            value: Option<rs_matter_crate::tlv::Nullable<rs_matter_crate::tlv::Utf8Str<'_>>>,
        ) -> Result<NullablesAndOptionalsStructBuilder<P, 6usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalString",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalString",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(5),
                self.0.writer(),
            )?;
            Ok(NullablesAndOptionalsStructBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> NullablesAndOptionalsStructBuilder<P, 5>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn nullable_optional_string(
            mut self,
            value: Option<rs_matter_crate::tlv::Nullable<rs_matter_crate::tlv::Utf8Str<'_>>>,
        ) -> Result<NullablesAndOptionalsStructBuilder<P, 6usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalString",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(5),
                self.0.writer(),
            )?;
            Ok(NullablesAndOptionalsStructBuilder(self.0))
        }
    }
    impl<P> NullablesAndOptionalsStructBuilder<P, 6>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn nullable_struct(
            self,
        ) -> Result<
            rs_matter_crate::tlv::NullableBuilder<
                NullablesAndOptionalsStructBuilder<P, 7usize>,
                SimpleStructBuilder<NullablesAndOptionalsStructBuilder<P, 7usize>>,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                NullablesAndOptionalsStructBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(6),
            )
        }
    }
    impl<P> NullablesAndOptionalsStructBuilder<P, 7>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn optional_struct(
            self,
        ) -> Result<
            rs_matter_crate::tlv::OptionalBuilder<
                NullablesAndOptionalsStructBuilder<P, 8usize>,
                SimpleStructBuilder<NullablesAndOptionalsStructBuilder<P, 8usize>>,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                NullablesAndOptionalsStructBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(7),
            )
        }
    }
    impl<P> NullablesAndOptionalsStructBuilder<P, 8>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn nullable_optional_struct(
            self,
        ) -> Result<
            rs_matter_crate::tlv::OptionalBuilder<
                NullablesAndOptionalsStructBuilder<P, 9usize>,
                rs_matter_crate::tlv::NullableBuilder<
                    NullablesAndOptionalsStructBuilder<P, 9usize>,
                    SimpleStructBuilder<NullablesAndOptionalsStructBuilder<P, 9usize>>,
                >,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                NullablesAndOptionalsStructBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(8),
            )
        }
    }
    impl<P> NullablesAndOptionalsStructBuilder<P, 9>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn nullable_list(
            self,
        ) -> Result<
            rs_matter_crate::tlv::NullableBuilder<
                NullablesAndOptionalsStructBuilder<P, 10usize>,
                rs_matter_crate::tlv::ToTLVArrayBuilder<
                    NullablesAndOptionalsStructBuilder<P, 10usize>,
                    SimpleEnum,
                >,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                NullablesAndOptionalsStructBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(9),
            )
        }
    }
    impl<P> NullablesAndOptionalsStructBuilder<P, 10>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn optional_list(
            self,
        ) -> Result<
            rs_matter_crate::tlv::OptionalBuilder<
                NullablesAndOptionalsStructBuilder<P, 11usize>,
                rs_matter_crate::tlv::ToTLVArrayBuilder<
                    NullablesAndOptionalsStructBuilder<P, 11usize>,
                    SimpleEnum,
                >,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                NullablesAndOptionalsStructBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(10),
            )
        }
    }
    impl<P> NullablesAndOptionalsStructBuilder<P, 11>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn nullable_optional_list(
            self,
        ) -> Result<
            rs_matter_crate::tlv::OptionalBuilder<
                NullablesAndOptionalsStructBuilder<P, 12usize>,
                rs_matter_crate::tlv::NullableBuilder<
                    NullablesAndOptionalsStructBuilder<P, 12usize>,
                    rs_matter_crate::tlv::ToTLVArrayBuilder<
                        NullablesAndOptionalsStructBuilder<P, 12usize>,
                        SimpleEnum,
                    >,
                >,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                NullablesAndOptionalsStructBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(11),
            )
        }
    }
    impl<P> NullablesAndOptionalsStructBuilder<P, 12usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for NullablesAndOptionalsStructBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "NullablesAndOptionalsStruct")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for NullablesAndOptionalsStructBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "NullablesAndOptionalsStruct"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for NullablesAndOptionalsStructBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for NullablesAndOptionalsStructBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct NullablesAndOptionalsStructArrayBuilder<P>(P);
    impl<P> NullablesAndOptionalsStructArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            NullablesAndOptionalsStructBuilder<NullablesAndOptionalsStructArrayBuilder<P>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                NullablesAndOptionalsStructArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for NullablesAndOptionalsStructArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "NullablesAndOptionalsStruct[]")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format for NullablesAndOptionalsStructArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "NullablesAndOptionalsStruct[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent for NullablesAndOptionalsStructArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for NullablesAndOptionalsStructArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct NestedStructBuilder<P, const F: usize = 0usize>(P);
    impl<P> NestedStructBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> NestedStructBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn a(
            mut self,
            value: u8,
        ) -> Result<NestedStructBuilder<P, 1usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "a", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "a", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(NestedStructBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> NestedStructBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn a(
            mut self,
            value: u8,
        ) -> Result<NestedStructBuilder<P, 1usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "a", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(NestedStructBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> NestedStructBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn b(
            mut self,
            value: bool,
        ) -> Result<NestedStructBuilder<P, 2usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "b", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "b", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(NestedStructBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> NestedStructBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn b(
            mut self,
            value: bool,
        ) -> Result<NestedStructBuilder<P, 2usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "b", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(NestedStructBuilder(self.0))
        }
    }
    impl<P> NestedStructBuilder<P, 2>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn c(
            self,
        ) -> Result<
            SimpleStructBuilder<NestedStructBuilder<P, 3usize>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                NestedStructBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(2),
            )
        }
    }
    impl<P> NestedStructBuilder<P, 3usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for NestedStructBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "NestedStruct")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format for NestedStructBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{:?}::{}", self.0, "NestedStruct")
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent for NestedStructBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for NestedStructBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct NestedStructArrayBuilder<P>(P);
    impl<P> NestedStructArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<NestedStructBuilder<NestedStructArrayBuilder<P>>, rs_matter_crate::error::Error>
        {
            rs_matter_crate::tlv::TLVBuilder::new(
                NestedStructArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for NestedStructArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "NestedStruct[]")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format for NestedStructArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{:?}::{}", self.0, "NestedStruct[]")
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent for NestedStructArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for NestedStructArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct NestedStructListBuilder<P, const F: usize = 0usize>(P);
    impl<P> NestedStructListBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> NestedStructListBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn a(
            mut self,
            value: u8,
        ) -> Result<NestedStructListBuilder<P, 1usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "a", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "a", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(NestedStructListBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> NestedStructListBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn a(
            mut self,
            value: u8,
        ) -> Result<NestedStructListBuilder<P, 1usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "a", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(NestedStructListBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> NestedStructListBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn b(
            mut self,
            value: bool,
        ) -> Result<NestedStructListBuilder<P, 2usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "b", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "b", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(NestedStructListBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> NestedStructListBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn b(
            mut self,
            value: bool,
        ) -> Result<NestedStructListBuilder<P, 2usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "b", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(NestedStructListBuilder(self.0))
        }
    }
    impl<P> NestedStructListBuilder<P, 2>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn c(
            self,
        ) -> Result<
            SimpleStructBuilder<NestedStructListBuilder<P, 3usize>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                NestedStructListBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(2),
            )
        }
    }
    impl<P> NestedStructListBuilder<P, 3>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn d(
            self,
        ) -> Result<
            SimpleStructArrayBuilder<NestedStructListBuilder<P, 4usize>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                NestedStructListBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(3),
            )
        }
    }
    impl<P> NestedStructListBuilder<P, 4>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn e(
            self,
        ) -> Result<
            rs_matter_crate::tlv::ToTLVArrayBuilder<NestedStructListBuilder<P, 5usize>, u32>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                NestedStructListBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(4),
            )
        }
    }
    impl<P> NestedStructListBuilder<P, 5>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn f(
            self,
        ) -> Result<
            rs_matter_crate::tlv::OctetsArrayBuilder<NestedStructListBuilder<P, 6usize>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                NestedStructListBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(5),
            )
        }
    }
    impl<P> NestedStructListBuilder<P, 6>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn g(
            self,
        ) -> Result<
            rs_matter_crate::tlv::ToTLVArrayBuilder<NestedStructListBuilder<P, 7usize>, u8>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                NestedStructListBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(6),
            )
        }
    }
    impl<P> NestedStructListBuilder<P, 7usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for NestedStructListBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "NestedStructList")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format for NestedStructListBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{:?}::{}", self.0, "NestedStructList")
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent for NestedStructListBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for NestedStructListBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct NestedStructListArrayBuilder<P>(P);
    impl<P> NestedStructListArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            NestedStructListBuilder<NestedStructListArrayBuilder<P>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                NestedStructListArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for NestedStructListArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "NestedStructList[]")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format for NestedStructListArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{:?}::{}", self.0, "NestedStructList[]")
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent for NestedStructListArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for NestedStructListArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct DoubleNestedStructListBuilder<P, const F: usize = 0usize>(P);
    impl<P> DoubleNestedStructListBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    impl<P> DoubleNestedStructListBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn a(
            self,
        ) -> Result<
            NestedStructListArrayBuilder<DoubleNestedStructListBuilder<P, 1usize>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                DoubleNestedStructListBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(0),
            )
        }
    }
    impl<P> DoubleNestedStructListBuilder<P, 1usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for DoubleNestedStructListBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "DoubleNestedStructList")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for DoubleNestedStructListBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "DoubleNestedStructList"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for DoubleNestedStructListBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for DoubleNestedStructListBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct DoubleNestedStructListArrayBuilder<P>(P);
    impl<P> DoubleNestedStructListArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            DoubleNestedStructListBuilder<DoubleNestedStructListArrayBuilder<P>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                DoubleNestedStructListArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for DoubleNestedStructListArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "DoubleNestedStructList[]")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format for DoubleNestedStructListArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "DoubleNestedStructList[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent for DoubleNestedStructListArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for DoubleNestedStructListArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestListStructOctetBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestListStructOctetBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestListStructOctetBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn member_1(
            mut self,
            value: u64,
        ) -> Result<TestListStructOctetBuilder<P, 1usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "member1", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "member1", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestListStructOctetBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestListStructOctetBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn member_1(
            mut self,
            value: u64,
        ) -> Result<TestListStructOctetBuilder<P, 1usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "member1", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestListStructOctetBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestListStructOctetBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn member_2(
            mut self,
            value: rs_matter_crate::tlv::OctetStr<'_>,
        ) -> Result<TestListStructOctetBuilder<P, 2usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "member2", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "member2", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(TestListStructOctetBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestListStructOctetBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn member_2(
            mut self,
            value: rs_matter_crate::tlv::OctetStr<'_>,
        ) -> Result<TestListStructOctetBuilder<P, 2usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "member2", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(TestListStructOctetBuilder(self.0))
        }
    }
    impl<P> TestListStructOctetBuilder<P, 2usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for TestListStructOctetBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestListStructOctet")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for TestListStructOctetBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{:?}::{}", self.0, "TestListStructOctet")
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent for TestListStructOctetBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestListStructOctetBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestListStructOctetArrayBuilder<P>(P);
    impl<P> TestListStructOctetArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestListStructOctetBuilder<TestListStructOctetArrayBuilder<P>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestListStructOctetArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestListStructOctetArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestListStructOctet[]")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format for TestListStructOctetArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{:?}::{}", self.0, "TestListStructOctet[]")
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent for TestListStructOctetArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestListStructOctetArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestSpecificResponseBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestSpecificResponseBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestSpecificResponseBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn return_value(
            mut self,
            value: u8,
        ) -> Result<TestSpecificResponseBuilder<P, 1usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "returnValue",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "returnValue",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestSpecificResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestSpecificResponseBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn return_value(
            mut self,
            value: u8,
        ) -> Result<TestSpecificResponseBuilder<P, 1usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "returnValue",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestSpecificResponseBuilder(self.0))
        }
    }
    impl<P> TestSpecificResponseBuilder<P, 1usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for TestSpecificResponseBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestSpecificResponse")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for TestSpecificResponseBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{:?}::{}", self.0, "TestSpecificResponse")
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent for TestSpecificResponseBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestSpecificResponseBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestSpecificResponseArrayBuilder<P>(P);
    impl<P> TestSpecificResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestSpecificResponseBuilder<TestSpecificResponseArrayBuilder<P>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestSpecificResponseArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestSpecificResponseArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestSpecificResponse[]")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format for TestSpecificResponseArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestSpecificResponse[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent for TestSpecificResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestSpecificResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestAddArgumentsResponseBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestAddArgumentsResponseBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestAddArgumentsResponseBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn return_value(
            mut self,
            value: u8,
        ) -> Result<TestAddArgumentsResponseBuilder<P, 1usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "returnValue",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "returnValue",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestAddArgumentsResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestAddArgumentsResponseBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn return_value(
            mut self,
            value: u8,
        ) -> Result<TestAddArgumentsResponseBuilder<P, 1usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "returnValue",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestAddArgumentsResponseBuilder(self.0))
        }
    }
    impl<P> TestAddArgumentsResponseBuilder<P, 1usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for TestAddArgumentsResponseBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestAddArgumentsResponse")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for TestAddArgumentsResponseBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestAddArgumentsResponse"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for TestAddArgumentsResponseBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestAddArgumentsResponseBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestAddArgumentsResponseArrayBuilder<P>(P);
    impl<P> TestAddArgumentsResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestAddArgumentsResponseBuilder<TestAddArgumentsResponseArrayBuilder<P>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestAddArgumentsResponseArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestAddArgumentsResponseArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestAddArgumentsResponse[]")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format for TestAddArgumentsResponseArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestAddArgumentsResponse[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent for TestAddArgumentsResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestAddArgumentsResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestSimpleArgumentResponseBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestSimpleArgumentResponseBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestSimpleArgumentResponseBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn return_value(
            mut self,
            value: bool,
        ) -> Result<TestSimpleArgumentResponseBuilder<P, 1usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "returnValue",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "returnValue",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestSimpleArgumentResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestSimpleArgumentResponseBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn return_value(
            mut self,
            value: bool,
        ) -> Result<TestSimpleArgumentResponseBuilder<P, 1usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "returnValue",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestSimpleArgumentResponseBuilder(self.0))
        }
    }
    impl<P> TestSimpleArgumentResponseBuilder<P, 1usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for TestSimpleArgumentResponseBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestSimpleArgumentResponse")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for TestSimpleArgumentResponseBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestSimpleArgumentResponse"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for TestSimpleArgumentResponseBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestSimpleArgumentResponseBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestSimpleArgumentResponseArrayBuilder<P>(P);
    impl<P> TestSimpleArgumentResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestSimpleArgumentResponseBuilder<TestSimpleArgumentResponseArrayBuilder<P>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestSimpleArgumentResponseArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestSimpleArgumentResponseArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestSimpleArgumentResponse[]")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format for TestSimpleArgumentResponseArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestSimpleArgumentResponse[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent for TestSimpleArgumentResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestSimpleArgumentResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestStructArrayArgumentResponseBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestStructArrayArgumentResponseBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    impl<P> TestStructArrayArgumentResponseBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn arg_1(
            self,
        ) -> Result<
            NestedStructListArrayBuilder<TestStructArrayArgumentResponseBuilder<P, 1usize>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestStructArrayArgumentResponseBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(0),
            )
        }
    }
    impl<P> TestStructArrayArgumentResponseBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn arg_2(
            self,
        ) -> Result<
            SimpleStructArrayBuilder<TestStructArrayArgumentResponseBuilder<P, 2usize>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestStructArrayArgumentResponseBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(1),
            )
        }
    }
    impl<P> TestStructArrayArgumentResponseBuilder<P, 2>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn arg_3(
            self,
        ) -> Result<
            rs_matter_crate::tlv::ToTLVArrayBuilder<
                TestStructArrayArgumentResponseBuilder<P, 3usize>,
                SimpleEnum,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestStructArrayArgumentResponseBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(2),
            )
        }
    }
    impl<P> TestStructArrayArgumentResponseBuilder<P, 3>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn arg_4(
            self,
        ) -> Result<
            rs_matter_crate::tlv::ToTLVArrayBuilder<
                TestStructArrayArgumentResponseBuilder<P, 4usize>,
                bool,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestStructArrayArgumentResponseBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(3),
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestStructArrayArgumentResponseBuilder<P, 4>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn arg_5(
            mut self,
            value: SimpleEnum,
        ) -> Result<TestStructArrayArgumentResponseBuilder<P, 5usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "arg5", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg5", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(4),
                self.0.writer(),
            )?;
            Ok(TestStructArrayArgumentResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestStructArrayArgumentResponseBuilder<P, 4>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn arg_5(
            mut self,
            value: SimpleEnum,
        ) -> Result<TestStructArrayArgumentResponseBuilder<P, 5usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg5", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(4),
                self.0.writer(),
            )?;
            Ok(TestStructArrayArgumentResponseBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestStructArrayArgumentResponseBuilder<P, 5>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn arg_6(
            mut self,
            value: bool,
        ) -> Result<TestStructArrayArgumentResponseBuilder<P, 6usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "arg6", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg6", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(5),
                self.0.writer(),
            )?;
            Ok(TestStructArrayArgumentResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestStructArrayArgumentResponseBuilder<P, 5>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn arg_6(
            mut self,
            value: bool,
        ) -> Result<TestStructArrayArgumentResponseBuilder<P, 6usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg6", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(5),
                self.0.writer(),
            )?;
            Ok(TestStructArrayArgumentResponseBuilder(self.0))
        }
    }
    impl<P> TestStructArrayArgumentResponseBuilder<P, 6usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for TestStructArrayArgumentResponseBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestStructArrayArgumentResponse")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for TestStructArrayArgumentResponseBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestStructArrayArgumentResponse"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for TestStructArrayArgumentResponseBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestStructArrayArgumentResponseBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestStructArrayArgumentResponseArrayBuilder<P>(P);
    impl<P> TestStructArrayArgumentResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestStructArrayArgumentResponseBuilder<TestStructArrayArgumentResponseArrayBuilder<P>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestStructArrayArgumentResponseArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestStructArrayArgumentResponseArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestStructArrayArgumentResponse[]")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format for TestStructArrayArgumentResponseArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestStructArrayArgumentResponse[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent for TestStructArrayArgumentResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestStructArrayArgumentResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestAddArgumentsRequestBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestAddArgumentsRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestAddArgumentsRequestBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn arg_1(
            mut self,
            value: u8,
        ) -> Result<TestAddArgumentsRequestBuilder<P, 1usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "arg1", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg1", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestAddArgumentsRequestBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestAddArgumentsRequestBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn arg_1(
            mut self,
            value: u8,
        ) -> Result<TestAddArgumentsRequestBuilder<P, 1usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg1", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestAddArgumentsRequestBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestAddArgumentsRequestBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn arg_2(
            mut self,
            value: u8,
        ) -> Result<TestAddArgumentsRequestBuilder<P, 2usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "arg2", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg2", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(TestAddArgumentsRequestBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestAddArgumentsRequestBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn arg_2(
            mut self,
            value: u8,
        ) -> Result<TestAddArgumentsRequestBuilder<P, 2usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg2", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(TestAddArgumentsRequestBuilder(self.0))
        }
    }
    impl<P> TestAddArgumentsRequestBuilder<P, 2usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for TestAddArgumentsRequestBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestAddArgumentsRequest")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for TestAddArgumentsRequestBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestAddArgumentsRequest"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for TestAddArgumentsRequestBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestAddArgumentsRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestAddArgumentsRequestArrayBuilder<P>(P);
    impl<P> TestAddArgumentsRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestAddArgumentsRequestBuilder<TestAddArgumentsRequestArrayBuilder<P>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestAddArgumentsRequestArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestAddArgumentsRequestArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestAddArgumentsRequest[]")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format for TestAddArgumentsRequestArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestAddArgumentsRequest[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent for TestAddArgumentsRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestAddArgumentsRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestListInt8UReverseResponseBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestListInt8UReverseResponseBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    impl<P> TestListInt8UReverseResponseBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn arg_1(
            self,
        ) -> Result<
            rs_matter_crate::tlv::ToTLVArrayBuilder<
                TestListInt8UReverseResponseBuilder<P, 1usize>,
                u8,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestListInt8UReverseResponseBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(0),
            )
        }
    }
    impl<P> TestListInt8UReverseResponseBuilder<P, 1usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for TestListInt8UReverseResponseBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestListInt8UReverseResponse")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for TestListInt8UReverseResponseBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestListInt8UReverseResponse"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for TestListInt8UReverseResponseBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestListInt8UReverseResponseBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestListInt8UReverseResponseArrayBuilder<P>(P);
    impl<P> TestListInt8UReverseResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestListInt8UReverseResponseBuilder<TestListInt8UReverseResponseArrayBuilder<P>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestListInt8UReverseResponseArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestListInt8UReverseResponseArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestListInt8UReverseResponse[]")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format for TestListInt8UReverseResponseArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestListInt8UReverseResponse[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent for TestListInt8UReverseResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestListInt8UReverseResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestSimpleArgumentRequestRequestBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestSimpleArgumentRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestSimpleArgumentRequestRequestBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn arg_1(
            mut self,
            value: bool,
        ) -> Result<TestSimpleArgumentRequestRequestBuilder<P, 1usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "arg1", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg1", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestSimpleArgumentRequestRequestBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestSimpleArgumentRequestRequestBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn arg_1(
            mut self,
            value: bool,
        ) -> Result<TestSimpleArgumentRequestRequestBuilder<P, 1usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg1", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestSimpleArgumentRequestRequestBuilder(self.0))
        }
    }
    impl<P> TestSimpleArgumentRequestRequestBuilder<P, 1usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for TestSimpleArgumentRequestRequestBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestSimpleArgumentRequestRequest")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for TestSimpleArgumentRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestSimpleArgumentRequestRequest"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for TestSimpleArgumentRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestSimpleArgumentRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestSimpleArgumentRequestRequestArrayBuilder<P>(P);
    impl<P> TestSimpleArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestSimpleArgumentRequestRequestBuilder<
                TestSimpleArgumentRequestRequestArrayBuilder<P>,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestSimpleArgumentRequestRequestArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestSimpleArgumentRequestRequestArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestSimpleArgumentRequestRequest[]")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format for TestSimpleArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestSimpleArgumentRequestRequest[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent for TestSimpleArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestSimpleArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestEnumsResponseBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestEnumsResponseBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestEnumsResponseBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn arg_1(
            mut self,
            value: u16,
        ) -> Result<TestEnumsResponseBuilder<P, 1usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "arg1", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg1", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestEnumsResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestEnumsResponseBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn arg_1(
            mut self,
            value: u16,
        ) -> Result<TestEnumsResponseBuilder<P, 1usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg1", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestEnumsResponseBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestEnumsResponseBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn arg_2(
            mut self,
            value: SimpleEnum,
        ) -> Result<TestEnumsResponseBuilder<P, 2usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "arg2", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg2", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(TestEnumsResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestEnumsResponseBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn arg_2(
            mut self,
            value: SimpleEnum,
        ) -> Result<TestEnumsResponseBuilder<P, 2usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg2", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(TestEnumsResponseBuilder(self.0))
        }
    }
    impl<P> TestEnumsResponseBuilder<P, 2usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for TestEnumsResponseBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestEnumsResponse")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format for TestEnumsResponseBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{:?}::{}", self.0, "TestEnumsResponse")
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent for TestEnumsResponseBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestEnumsResponseBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestEnumsResponseArrayBuilder<P>(P);
    impl<P> TestEnumsResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestEnumsResponseBuilder<TestEnumsResponseArrayBuilder<P>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestEnumsResponseArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestEnumsResponseArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestEnumsResponse[]")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format for TestEnumsResponseArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{:?}::{}", self.0, "TestEnumsResponse[]")
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent for TestEnumsResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestEnumsResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestStructArrayArgumentRequestRequestBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestStructArrayArgumentRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    impl<P> TestStructArrayArgumentRequestRequestBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn arg_1(
            self,
        ) -> Result<
            NestedStructListArrayBuilder<TestStructArrayArgumentRequestRequestBuilder<P, 1usize>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestStructArrayArgumentRequestRequestBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(0),
            )
        }
    }
    impl<P> TestStructArrayArgumentRequestRequestBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn arg_2(
            self,
        ) -> Result<
            SimpleStructArrayBuilder<TestStructArrayArgumentRequestRequestBuilder<P, 2usize>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestStructArrayArgumentRequestRequestBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(1),
            )
        }
    }
    impl<P> TestStructArrayArgumentRequestRequestBuilder<P, 2>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn arg_3(
            self,
        ) -> Result<
            rs_matter_crate::tlv::ToTLVArrayBuilder<
                TestStructArrayArgumentRequestRequestBuilder<P, 3usize>,
                SimpleEnum,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestStructArrayArgumentRequestRequestBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(2),
            )
        }
    }
    impl<P> TestStructArrayArgumentRequestRequestBuilder<P, 3>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn arg_4(
            self,
        ) -> Result<
            rs_matter_crate::tlv::ToTLVArrayBuilder<
                TestStructArrayArgumentRequestRequestBuilder<P, 4usize>,
                bool,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestStructArrayArgumentRequestRequestBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(3),
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestStructArrayArgumentRequestRequestBuilder<P, 4>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn arg_5(
            mut self,
            value: SimpleEnum,
        ) -> Result<
            TestStructArrayArgumentRequestRequestBuilder<P, 5usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "arg5", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg5", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(4),
                self.0.writer(),
            )?;
            Ok(TestStructArrayArgumentRequestRequestBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestStructArrayArgumentRequestRequestBuilder<P, 4>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn arg_5(
            mut self,
            value: SimpleEnum,
        ) -> Result<
            TestStructArrayArgumentRequestRequestBuilder<P, 5usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg5", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(4),
                self.0.writer(),
            )?;
            Ok(TestStructArrayArgumentRequestRequestBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestStructArrayArgumentRequestRequestBuilder<P, 5>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn arg_6(
            mut self,
            value: bool,
        ) -> Result<
            TestStructArrayArgumentRequestRequestBuilder<P, 6usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "arg6", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg6", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(5),
                self.0.writer(),
            )?;
            Ok(TestStructArrayArgumentRequestRequestBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestStructArrayArgumentRequestRequestBuilder<P, 5>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn arg_6(
            mut self,
            value: bool,
        ) -> Result<
            TestStructArrayArgumentRequestRequestBuilder<P, 6usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg6", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(5),
                self.0.writer(),
            )?;
            Ok(TestStructArrayArgumentRequestRequestBuilder(self.0))
        }
    }
    impl<P> TestStructArrayArgumentRequestRequestBuilder<P, 6usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for TestStructArrayArgumentRequestRequestBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(
                f,
                "{:?}::{}",
                self.0, "TestStructArrayArgumentRequestRequest"
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for TestStructArrayArgumentRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestStructArrayArgumentRequestRequest"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for TestStructArrayArgumentRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestStructArrayArgumentRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestStructArrayArgumentRequestRequestArrayBuilder<P>(P);
    impl<P> TestStructArrayArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestStructArrayArgumentRequestRequestBuilder<
                TestStructArrayArgumentRequestRequestArrayBuilder<P>,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestStructArrayArgumentRequestRequestArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestStructArrayArgumentRequestRequestArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(
                f,
                "{:?}::{}",
                self.0, "TestStructArrayArgumentRequestRequest[]"
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format
        for TestStructArrayArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestStructArrayArgumentRequestRequest[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent
        for TestStructArrayArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestStructArrayArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestNullableOptionalResponseBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestNullableOptionalResponseBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestNullableOptionalResponseBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn was_present(
            mut self,
            value: bool,
        ) -> Result<TestNullableOptionalResponseBuilder<P, 1usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "wasPresent",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "wasPresent", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestNullableOptionalResponseBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn was_present(
            mut self,
            value: bool,
        ) -> Result<TestNullableOptionalResponseBuilder<P, 1usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "wasPresent", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestNullableOptionalResponseBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn was_null(
            mut self,
            value: Option<bool>,
        ) -> Result<TestNullableOptionalResponseBuilder<P, 2usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "wasNull", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "wasNull", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(TestNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestNullableOptionalResponseBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn was_null(
            mut self,
            value: Option<bool>,
        ) -> Result<TestNullableOptionalResponseBuilder<P, 2usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "wasNull", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(TestNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestNullableOptionalResponseBuilder<P, 2>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn value(
            mut self,
            value: Option<u8>,
        ) -> Result<TestNullableOptionalResponseBuilder<P, 3usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "value", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "value", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(2),
                self.0.writer(),
            )?;
            Ok(TestNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestNullableOptionalResponseBuilder<P, 2>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn value(
            mut self,
            value: Option<u8>,
        ) -> Result<TestNullableOptionalResponseBuilder<P, 3usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "value", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(2),
                self.0.writer(),
            )?;
            Ok(TestNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestNullableOptionalResponseBuilder<P, 3>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn original_value(
            mut self,
            value: Option<rs_matter_crate::tlv::Nullable<u8>>,
        ) -> Result<TestNullableOptionalResponseBuilder<P, 4usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "originalValue",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "originalValue",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(3),
                self.0.writer(),
            )?;
            Ok(TestNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestNullableOptionalResponseBuilder<P, 3>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn original_value(
            mut self,
            value: Option<rs_matter_crate::tlv::Nullable<u8>>,
        ) -> Result<TestNullableOptionalResponseBuilder<P, 4usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "originalValue",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(3),
                self.0.writer(),
            )?;
            Ok(TestNullableOptionalResponseBuilder(self.0))
        }
    }
    impl<P> TestNullableOptionalResponseBuilder<P, 4usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for TestNullableOptionalResponseBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestNullableOptionalResponse")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for TestNullableOptionalResponseBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestNullableOptionalResponse"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for TestNullableOptionalResponseBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestNullableOptionalResponseBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestNullableOptionalResponseArrayBuilder<P>(P);
    impl<P> TestNullableOptionalResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestNullableOptionalResponseBuilder<TestNullableOptionalResponseArrayBuilder<P>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestNullableOptionalResponseArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestNullableOptionalResponseArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestNullableOptionalResponse[]")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format for TestNullableOptionalResponseArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestNullableOptionalResponse[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent for TestNullableOptionalResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestNullableOptionalResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestStructArgumentRequestRequestBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestStructArgumentRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    impl<P> TestStructArgumentRequestRequestBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn arg_1(
            self,
        ) -> Result<
            SimpleStructBuilder<TestStructArgumentRequestRequestBuilder<P, 1usize>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestStructArgumentRequestRequestBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(0),
            )
        }
    }
    impl<P> TestStructArgumentRequestRequestBuilder<P, 1usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for TestStructArgumentRequestRequestBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestStructArgumentRequestRequest")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for TestStructArgumentRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestStructArgumentRequestRequest"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for TestStructArgumentRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestStructArgumentRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestStructArgumentRequestRequestArrayBuilder<P>(P);
    impl<P> TestStructArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestStructArgumentRequestRequestBuilder<
                TestStructArgumentRequestRequestArrayBuilder<P>,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestStructArgumentRequestRequestArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestStructArgumentRequestRequestArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestStructArgumentRequestRequest[]")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format for TestStructArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestStructArgumentRequestRequest[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent for TestStructArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestStructArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestComplexNullableOptionalResponseBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestComplexNullableOptionalResponseBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn nullable_int_was_null(
            mut self,
            value: bool,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 1usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableIntWasNull",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableIntWasNull",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn nullable_int_was_null(
            mut self,
            value: bool,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 1usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableIntWasNull",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn nullable_int_value(
            mut self,
            value: Option<u16>,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 2usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableIntValue",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableIntValue",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn nullable_int_value(
            mut self,
            value: Option<u16>,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 2usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableIntValue",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 2>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn optional_int_was_present(
            mut self,
            value: bool,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 3usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalIntWasPresent",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalIntWasPresent",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(2),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 2>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn optional_int_was_present(
            mut self,
            value: bool,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 3usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalIntWasPresent",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(2),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 3>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn optional_int_value(
            mut self,
            value: Option<u16>,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 4usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalIntValue",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalIntValue",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(3),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 3>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn optional_int_value(
            mut self,
            value: Option<u16>,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 4usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalIntValue",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(3),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 4>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn nullable_optional_int_was_present(
            mut self,
            value: bool,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 5usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalIntWasPresent",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalIntWasPresent",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(4),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 4>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn nullable_optional_int_was_present(
            mut self,
            value: bool,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 5usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalIntWasPresent",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(4),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 5>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn nullable_optional_int_was_null(
            mut self,
            value: Option<bool>,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 6usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalIntWasNull",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalIntWasNull",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(5),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 5>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn nullable_optional_int_was_null(
            mut self,
            value: Option<bool>,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 6usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalIntWasNull",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(5),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 6>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn nullable_optional_int_value(
            mut self,
            value: Option<u16>,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 7usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalIntValue",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalIntValue",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(6),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 6>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn nullable_optional_int_value(
            mut self,
            value: Option<u16>,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 7usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalIntValue",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(6),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 7>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn nullable_string_was_null(
            mut self,
            value: bool,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 8usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableStringWasNull",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableStringWasNull",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(7),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 7>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn nullable_string_was_null(
            mut self,
            value: bool,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 8usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableStringWasNull",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(7),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 8>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn nullable_string_value(
            mut self,
            value: Option<rs_matter_crate::tlv::Utf8Str<'_>>,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 9usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableStringValue",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableStringValue",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(8),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 8>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn nullable_string_value(
            mut self,
            value: Option<rs_matter_crate::tlv::Utf8Str<'_>>,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 9usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableStringValue",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(8),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 9>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn optional_string_was_present(
            mut self,
            value: bool,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 10usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalStringWasPresent",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalStringWasPresent",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(9),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 9>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn optional_string_was_present(
            mut self,
            value: bool,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 10usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalStringWasPresent",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(9),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 10>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn optional_string_value(
            mut self,
            value: Option<rs_matter_crate::tlv::Utf8Str<'_>>,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 11usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalStringValue",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalStringValue",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(10),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 10>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn optional_string_value(
            mut self,
            value: Option<rs_matter_crate::tlv::Utf8Str<'_>>,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 11usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalStringValue",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(10),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 11>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn nullable_optional_string_was_present(
            mut self,
            value: bool,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 12usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalStringWasPresent",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalStringWasPresent",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(11),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 11>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn nullable_optional_string_was_present(
            mut self,
            value: bool,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 12usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalStringWasPresent",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(11),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 12>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn nullable_optional_string_was_null(
            mut self,
            value: Option<bool>,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 13usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalStringWasNull",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalStringWasNull",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(12),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 12>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn nullable_optional_string_was_null(
            mut self,
            value: Option<bool>,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 13usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalStringWasNull",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(12),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 13>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn nullable_optional_string_value(
            mut self,
            value: Option<rs_matter_crate::tlv::Utf8Str<'_>>,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 14usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalStringValue",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalStringValue",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(13),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 13>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn nullable_optional_string_value(
            mut self,
            value: Option<rs_matter_crate::tlv::Utf8Str<'_>>,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 14usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalStringValue",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(13),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 14>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn nullable_struct_was_null(
            mut self,
            value: bool,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 15usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableStructWasNull",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableStructWasNull",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(14),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 14>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn nullable_struct_was_null(
            mut self,
            value: bool,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 15usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableStructWasNull",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(14),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 15>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn nullable_struct_value(
            self,
        ) -> Result<
            rs_matter_crate::tlv::OptionalBuilder<
                TestComplexNullableOptionalResponseBuilder<P, 16usize>,
                SimpleStructBuilder<TestComplexNullableOptionalResponseBuilder<P, 16usize>>,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestComplexNullableOptionalResponseBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(15),
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 16>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn optional_struct_was_present(
            mut self,
            value: bool,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 17usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalStructWasPresent",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalStructWasPresent",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(16),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 16>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn optional_struct_was_present(
            mut self,
            value: bool,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 17usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalStructWasPresent",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(16),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 17>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn optional_struct_value(
            self,
        ) -> Result<
            rs_matter_crate::tlv::OptionalBuilder<
                TestComplexNullableOptionalResponseBuilder<P, 18usize>,
                SimpleStructBuilder<TestComplexNullableOptionalResponseBuilder<P, 18usize>>,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestComplexNullableOptionalResponseBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(17),
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 18>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn nullable_optional_struct_was_present(
            mut self,
            value: bool,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 19usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalStructWasPresent",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalStructWasPresent",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(18),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 18>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn nullable_optional_struct_was_present(
            mut self,
            value: bool,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 19usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalStructWasPresent",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(18),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 19>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn nullable_optional_struct_was_null(
            mut self,
            value: Option<bool>,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 20usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalStructWasNull",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalStructWasNull",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(19),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 19>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn nullable_optional_struct_was_null(
            mut self,
            value: Option<bool>,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 20usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalStructWasNull",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(19),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 20>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn nullable_optional_struct_value(
            self,
        ) -> Result<
            rs_matter_crate::tlv::OptionalBuilder<
                TestComplexNullableOptionalResponseBuilder<P, 21usize>,
                SimpleStructBuilder<TestComplexNullableOptionalResponseBuilder<P, 21usize>>,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestComplexNullableOptionalResponseBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(20),
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 21>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn nullable_list_was_null(
            mut self,
            value: bool,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 22usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableListWasNull",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableListWasNull",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(21),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 21>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn nullable_list_was_null(
            mut self,
            value: bool,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 22usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableListWasNull",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(21),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 22>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn nullable_list_value(
            self,
        ) -> Result<
            rs_matter_crate::tlv::OptionalBuilder<
                TestComplexNullableOptionalResponseBuilder<P, 23usize>,
                rs_matter_crate::tlv::ToTLVArrayBuilder<
                    TestComplexNullableOptionalResponseBuilder<P, 23usize>,
                    SimpleEnum,
                >,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestComplexNullableOptionalResponseBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(22),
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 23>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn optional_list_was_present(
            mut self,
            value: bool,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 24usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalListWasPresent",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalListWasPresent",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(23),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 23>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn optional_list_was_present(
            mut self,
            value: bool,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 24usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalListWasPresent",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(23),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 24>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn optional_list_value(
            self,
        ) -> Result<
            rs_matter_crate::tlv::OptionalBuilder<
                TestComplexNullableOptionalResponseBuilder<P, 25usize>,
                rs_matter_crate::tlv::ToTLVArrayBuilder<
                    TestComplexNullableOptionalResponseBuilder<P, 25usize>,
                    SimpleEnum,
                >,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestComplexNullableOptionalResponseBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(24),
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 25>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn nullable_optional_list_was_present(
            mut self,
            value: bool,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 26usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalListWasPresent",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalListWasPresent",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(25),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 25>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn nullable_optional_list_was_present(
            mut self,
            value: bool,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 26usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalListWasPresent",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(25),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 26>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn nullable_optional_list_was_null(
            mut self,
            value: Option<bool>,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 27usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalListWasNull",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalListWasNull",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(26),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 26>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn nullable_optional_list_was_null(
            mut self,
            value: Option<bool>,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<P, 27usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalListWasNull",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(26),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalResponseBuilder(self.0))
        }
    }
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 27>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn nullable_optional_list_value(
            self,
        ) -> Result<
            rs_matter_crate::tlv::OptionalBuilder<
                TestComplexNullableOptionalResponseBuilder<P, 28usize>,
                rs_matter_crate::tlv::ToTLVArrayBuilder<
                    TestComplexNullableOptionalResponseBuilder<P, 28usize>,
                    SimpleEnum,
                >,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestComplexNullableOptionalResponseBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(27),
            )
        }
    }
    impl<P> TestComplexNullableOptionalResponseBuilder<P, 28usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for TestComplexNullableOptionalResponseBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestComplexNullableOptionalResponse")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for TestComplexNullableOptionalResponseBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestComplexNullableOptionalResponse"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for TestComplexNullableOptionalResponseBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestComplexNullableOptionalResponseBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestComplexNullableOptionalResponseArrayBuilder<P>(P);
    impl<P> TestComplexNullableOptionalResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestComplexNullableOptionalResponseBuilder<
                TestComplexNullableOptionalResponseArrayBuilder<P>,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestComplexNullableOptionalResponseArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestComplexNullableOptionalResponseArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(
                f,
                "{:?}::{}",
                self.0, "TestComplexNullableOptionalResponse[]"
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format
        for TestComplexNullableOptionalResponseArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestComplexNullableOptionalResponse[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent
        for TestComplexNullableOptionalResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestComplexNullableOptionalResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestNestedStructArgumentRequestRequestBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestNestedStructArgumentRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    impl<P> TestNestedStructArgumentRequestRequestBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn arg_1(
            self,
        ) -> Result<
            NestedStructBuilder<TestNestedStructArgumentRequestRequestBuilder<P, 1usize>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestNestedStructArgumentRequestRequestBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(0),
            )
        }
    }
    impl<P> TestNestedStructArgumentRequestRequestBuilder<P, 1usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for TestNestedStructArgumentRequestRequestBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(
                f,
                "{:?}::{}",
                self.0, "TestNestedStructArgumentRequestRequest"
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for TestNestedStructArgumentRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestNestedStructArgumentRequestRequest"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for TestNestedStructArgumentRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestNestedStructArgumentRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestNestedStructArgumentRequestRequestArrayBuilder<P>(P);
    impl<P> TestNestedStructArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestNestedStructArgumentRequestRequestBuilder<
                TestNestedStructArgumentRequestRequestArrayBuilder<P>,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestNestedStructArgumentRequestRequestArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestNestedStructArgumentRequestRequestArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(
                f,
                "{:?}::{}",
                self.0, "TestNestedStructArgumentRequestRequest[]"
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format
        for TestNestedStructArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestNestedStructArgumentRequestRequest[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent
        for TestNestedStructArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P>
        for TestNestedStructArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct BooleanResponseBuilder<P, const F: usize = 0usize>(P);
    impl<P> BooleanResponseBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> BooleanResponseBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn value(
            mut self,
            value: bool,
        ) -> Result<BooleanResponseBuilder<P, 1usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "value", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "value", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(BooleanResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> BooleanResponseBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn value(
            mut self,
            value: bool,
        ) -> Result<BooleanResponseBuilder<P, 1usize>, rs_matter_crate::error::Error> {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "value", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(BooleanResponseBuilder(self.0))
        }
    }
    impl<P> BooleanResponseBuilder<P, 1usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for BooleanResponseBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "BooleanResponse")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format for BooleanResponseBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{:?}::{}", self.0, "BooleanResponse")
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent for BooleanResponseBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for BooleanResponseBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct BooleanResponseArrayBuilder<P>(P);
    impl<P> BooleanResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            BooleanResponseBuilder<BooleanResponseArrayBuilder<P>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                BooleanResponseArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for BooleanResponseArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "BooleanResponse[]")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format for BooleanResponseArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{:?}::{}", self.0, "BooleanResponse[]")
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent for BooleanResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for BooleanResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestListStructArgumentRequestRequestBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestListStructArgumentRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    impl<P> TestListStructArgumentRequestRequestBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn arg_1(
            self,
        ) -> Result<
            SimpleStructArrayBuilder<TestListStructArgumentRequestRequestBuilder<P, 1usize>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestListStructArgumentRequestRequestBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(0),
            )
        }
    }
    impl<P> TestListStructArgumentRequestRequestBuilder<P, 1usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for TestListStructArgumentRequestRequestBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(
                f,
                "{:?}::{}",
                self.0, "TestListStructArgumentRequestRequest"
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for TestListStructArgumentRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestListStructArgumentRequestRequest"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for TestListStructArgumentRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestListStructArgumentRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestListStructArgumentRequestRequestArrayBuilder<P>(P);
    impl<P> TestListStructArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestListStructArgumentRequestRequestBuilder<
                TestListStructArgumentRequestRequestArrayBuilder<P>,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestListStructArgumentRequestRequestArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestListStructArgumentRequestRequestArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(
                f,
                "{:?}::{}",
                self.0, "TestListStructArgumentRequestRequest[]"
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format
        for TestListStructArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestListStructArgumentRequestRequest[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent
        for TestListStructArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestListStructArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct SimpleStructResponseBuilder<P, const F: usize = 0usize>(P);
    impl<P> SimpleStructResponseBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    impl<P> SimpleStructResponseBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn arg_1(
            self,
        ) -> Result<
            SimpleStructBuilder<SimpleStructResponseBuilder<P, 1usize>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                SimpleStructResponseBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(0),
            )
        }
    }
    impl<P> SimpleStructResponseBuilder<P, 1usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for SimpleStructResponseBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "SimpleStructResponse")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for SimpleStructResponseBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "{:?}::{}", self.0, "SimpleStructResponse")
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent for SimpleStructResponseBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for SimpleStructResponseBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct SimpleStructResponseArrayBuilder<P>(P);
    impl<P> SimpleStructResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            SimpleStructResponseBuilder<SimpleStructResponseArrayBuilder<P>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                SimpleStructResponseArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for SimpleStructResponseArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "SimpleStructResponse[]")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format for SimpleStructResponseArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "SimpleStructResponse[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent for SimpleStructResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for SimpleStructResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestListInt8UArgumentRequestRequestBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestListInt8UArgumentRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    impl<P> TestListInt8UArgumentRequestRequestBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn arg_1(
            self,
        ) -> Result<
            rs_matter_crate::tlv::ToTLVArrayBuilder<
                TestListInt8UArgumentRequestRequestBuilder<P, 1usize>,
                u8,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestListInt8UArgumentRequestRequestBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(0),
            )
        }
    }
    impl<P> TestListInt8UArgumentRequestRequestBuilder<P, 1usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for TestListInt8UArgumentRequestRequestBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestListInt8UArgumentRequestRequest")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for TestListInt8UArgumentRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestListInt8UArgumentRequestRequest"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for TestListInt8UArgumentRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestListInt8UArgumentRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestListInt8UArgumentRequestRequestArrayBuilder<P>(P);
    impl<P> TestListInt8UArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestListInt8UArgumentRequestRequestBuilder<
                TestListInt8UArgumentRequestRequestArrayBuilder<P>,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestListInt8UArgumentRequestRequestArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestListInt8UArgumentRequestRequestArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(
                f,
                "{:?}::{}",
                self.0, "TestListInt8UArgumentRequestRequest[]"
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format
        for TestListInt8UArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestListInt8UArgumentRequestRequest[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent
        for TestListInt8UArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestListInt8UArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestEmitTestEventResponseBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestEmitTestEventResponseBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestEmitTestEventResponseBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn value(
            mut self,
            value: u64,
        ) -> Result<TestEmitTestEventResponseBuilder<P, 1usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "value", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "value", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestEmitTestEventResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestEmitTestEventResponseBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn value(
            mut self,
            value: u64,
        ) -> Result<TestEmitTestEventResponseBuilder<P, 1usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "value", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestEmitTestEventResponseBuilder(self.0))
        }
    }
    impl<P> TestEmitTestEventResponseBuilder<P, 1usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for TestEmitTestEventResponseBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestEmitTestEventResponse")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for TestEmitTestEventResponseBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestEmitTestEventResponse"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for TestEmitTestEventResponseBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestEmitTestEventResponseBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestEmitTestEventResponseArrayBuilder<P>(P);
    impl<P> TestEmitTestEventResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestEmitTestEventResponseBuilder<TestEmitTestEventResponseArrayBuilder<P>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestEmitTestEventResponseArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestEmitTestEventResponseArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestEmitTestEventResponse[]")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format for TestEmitTestEventResponseArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestEmitTestEventResponse[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent for TestEmitTestEventResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestEmitTestEventResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestNestedStructListArgumentRequestRequestBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestNestedStructListArgumentRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    impl<P> TestNestedStructListArgumentRequestRequestBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn arg_1(
            self,
        ) -> Result<
            NestedStructListBuilder<TestNestedStructListArgumentRequestRequestBuilder<P, 1usize>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestNestedStructListArgumentRequestRequestBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(0),
            )
        }
    }
    impl<P> TestNestedStructListArgumentRequestRequestBuilder<P, 1usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for TestNestedStructListArgumentRequestRequestBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(
                f,
                "{:?}::{}",
                self.0, "TestNestedStructListArgumentRequestRequest"
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for TestNestedStructListArgumentRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestNestedStructListArgumentRequestRequest"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for TestNestedStructListArgumentRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestNestedStructListArgumentRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestNestedStructListArgumentRequestRequestArrayBuilder<P>(P);
    impl<P> TestNestedStructListArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestNestedStructListArgumentRequestRequestBuilder<
                TestNestedStructListArgumentRequestRequestArrayBuilder<P>,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestNestedStructListArgumentRequestRequestArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestNestedStructListArgumentRequestRequestArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(
                f,
                "{:?}::{}",
                self.0, "TestNestedStructListArgumentRequestRequest[]"
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format
        for TestNestedStructListArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestNestedStructListArgumentRequestRequest[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent
        for TestNestedStructListArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P>
        for TestNestedStructListArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestEmitTestFabricScopedEventResponseBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestEmitTestFabricScopedEventResponseBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestEmitTestFabricScopedEventResponseBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn value(
            mut self,
            value: u64,
        ) -> Result<
            TestEmitTestFabricScopedEventResponseBuilder<P, 1usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "value", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "value", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestEmitTestFabricScopedEventResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestEmitTestFabricScopedEventResponseBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn value(
            mut self,
            value: u64,
        ) -> Result<
            TestEmitTestFabricScopedEventResponseBuilder<P, 1usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "value", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestEmitTestFabricScopedEventResponseBuilder(self.0))
        }
    }
    impl<P> TestEmitTestFabricScopedEventResponseBuilder<P, 1usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for TestEmitTestFabricScopedEventResponseBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(
                f,
                "{:?}::{}",
                self.0, "TestEmitTestFabricScopedEventResponse"
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for TestEmitTestFabricScopedEventResponseBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestEmitTestFabricScopedEventResponse"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for TestEmitTestFabricScopedEventResponseBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestEmitTestFabricScopedEventResponseBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestEmitTestFabricScopedEventResponseArrayBuilder<P>(P);
    impl<P> TestEmitTestFabricScopedEventResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestEmitTestFabricScopedEventResponseBuilder<
                TestEmitTestFabricScopedEventResponseArrayBuilder<P>,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestEmitTestFabricScopedEventResponseArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestEmitTestFabricScopedEventResponseArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(
                f,
                "{:?}::{}",
                self.0, "TestEmitTestFabricScopedEventResponse[]"
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format
        for TestEmitTestFabricScopedEventResponseArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestEmitTestFabricScopedEventResponse[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent
        for TestEmitTestFabricScopedEventResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestEmitTestFabricScopedEventResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestListNestedStructListArgumentRequestRequestBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestListNestedStructListArgumentRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    impl<P> TestListNestedStructListArgumentRequestRequestBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn arg_1(
            self,
        ) -> Result<
            NestedStructListArrayBuilder<
                TestListNestedStructListArgumentRequestRequestBuilder<P, 1usize>,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestListNestedStructListArgumentRequestRequestBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(0),
            )
        }
    }
    impl<P> TestListNestedStructListArgumentRequestRequestBuilder<P, 1usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug
        for TestListNestedStructListArgumentRequestRequestBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(
                f,
                "{:?}::{}",
                self.0, "TestListNestedStructListArgumentRequestRequest"
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for TestListNestedStructListArgumentRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestListNestedStructListArgumentRequestRequest"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for TestListNestedStructListArgumentRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P>
        for TestListNestedStructListArgumentRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestListNestedStructListArgumentRequestRequestArrayBuilder<P>(P);
    impl<P> TestListNestedStructListArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestListNestedStructListArgumentRequestRequestBuilder<
                TestListNestedStructListArgumentRequestRequestArrayBuilder<P>,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestListNestedStructListArgumentRequestRequestArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestListNestedStructListArgumentRequestRequestArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(
                f,
                "{:?}::{}",
                self.0, "TestListNestedStructListArgumentRequestRequest[]"
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format
        for TestListNestedStructListArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestListNestedStructListArgumentRequestRequest[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent
        for TestListNestedStructListArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P>
        for TestListNestedStructListArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestBatchHelperResponseBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestBatchHelperResponseBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestBatchHelperResponseBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn buffer(
            mut self,
            value: rs_matter_crate::tlv::OctetStr<'_>,
        ) -> Result<TestBatchHelperResponseBuilder<P, 1usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "buffer", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "buffer", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestBatchHelperResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestBatchHelperResponseBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn buffer(
            mut self,
            value: rs_matter_crate::tlv::OctetStr<'_>,
        ) -> Result<TestBatchHelperResponseBuilder<P, 1usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "buffer", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestBatchHelperResponseBuilder(self.0))
        }
    }
    impl<P> TestBatchHelperResponseBuilder<P, 1usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for TestBatchHelperResponseBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestBatchHelperResponse")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for TestBatchHelperResponseBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestBatchHelperResponse"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for TestBatchHelperResponseBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestBatchHelperResponseBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestBatchHelperResponseArrayBuilder<P>(P);
    impl<P> TestBatchHelperResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestBatchHelperResponseBuilder<TestBatchHelperResponseArrayBuilder<P>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestBatchHelperResponseArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestBatchHelperResponseArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestBatchHelperResponse[]")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format for TestBatchHelperResponseArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestBatchHelperResponse[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent for TestBatchHelperResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestBatchHelperResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestListInt8UReverseRequestRequestBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestListInt8UReverseRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    impl<P> TestListInt8UReverseRequestRequestBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn arg_1(
            self,
        ) -> Result<
            rs_matter_crate::tlv::ToTLVArrayBuilder<
                TestListInt8UReverseRequestRequestBuilder<P, 1usize>,
                u8,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestListInt8UReverseRequestRequestBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(0),
            )
        }
    }
    impl<P> TestListInt8UReverseRequestRequestBuilder<P, 1usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for TestListInt8UReverseRequestRequestBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestListInt8UReverseRequestRequest")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for TestListInt8UReverseRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestListInt8UReverseRequestRequest"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for TestListInt8UReverseRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestListInt8UReverseRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestListInt8UReverseRequestRequestArrayBuilder<P>(P);
    impl<P> TestListInt8UReverseRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestListInt8UReverseRequestRequestBuilder<
                TestListInt8UReverseRequestRequestArrayBuilder<P>,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestListInt8UReverseRequestRequestArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestListInt8UReverseRequestRequestArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(
                f,
                "{:?}::{}",
                self.0, "TestListInt8UReverseRequestRequest[]"
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format
        for TestListInt8UReverseRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestListInt8UReverseRequestRequest[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent for TestListInt8UReverseRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestListInt8UReverseRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestEnumsRequestRequestBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestEnumsRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestEnumsRequestRequestBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn arg_1(
            mut self,
            value: u16,
        ) -> Result<TestEnumsRequestRequestBuilder<P, 1usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "arg1", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg1", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestEnumsRequestRequestBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestEnumsRequestRequestBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn arg_1(
            mut self,
            value: u16,
        ) -> Result<TestEnumsRequestRequestBuilder<P, 1usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg1", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestEnumsRequestRequestBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestEnumsRequestRequestBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn arg_2(
            mut self,
            value: SimpleEnum,
        ) -> Result<TestEnumsRequestRequestBuilder<P, 2usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "arg2", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg2", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(TestEnumsRequestRequestBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestEnumsRequestRequestBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn arg_2(
            mut self,
            value: SimpleEnum,
        ) -> Result<TestEnumsRequestRequestBuilder<P, 2usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg2", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(TestEnumsRequestRequestBuilder(self.0))
        }
    }
    impl<P> TestEnumsRequestRequestBuilder<P, 2usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for TestEnumsRequestRequestBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestEnumsRequestRequest")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for TestEnumsRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestEnumsRequestRequest"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for TestEnumsRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestEnumsRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestEnumsRequestRequestArrayBuilder<P>(P);
    impl<P> TestEnumsRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestEnumsRequestRequestBuilder<TestEnumsRequestRequestArrayBuilder<P>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestEnumsRequestRequestArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestEnumsRequestRequestArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestEnumsRequestRequest[]")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format for TestEnumsRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestEnumsRequestRequest[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent for TestEnumsRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestEnumsRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestNullableOptionalRequestRequestBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestNullableOptionalRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestNullableOptionalRequestRequestBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn arg_1(
            mut self,
            value: Option<rs_matter_crate::tlv::Nullable<u8>>,
        ) -> Result<
            TestNullableOptionalRequestRequestBuilder<P, 1usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "arg1", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg1", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestNullableOptionalRequestRequestBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestNullableOptionalRequestRequestBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn arg_1(
            mut self,
            value: Option<rs_matter_crate::tlv::Nullable<u8>>,
        ) -> Result<
            TestNullableOptionalRequestRequestBuilder<P, 1usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg1", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestNullableOptionalRequestRequestBuilder(self.0))
        }
    }
    impl<P> TestNullableOptionalRequestRequestBuilder<P, 1usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for TestNullableOptionalRequestRequestBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestNullableOptionalRequestRequest")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for TestNullableOptionalRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestNullableOptionalRequestRequest"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for TestNullableOptionalRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestNullableOptionalRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestNullableOptionalRequestRequestArrayBuilder<P>(P);
    impl<P> TestNullableOptionalRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestNullableOptionalRequestRequestBuilder<
                TestNullableOptionalRequestRequestArrayBuilder<P>,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestNullableOptionalRequestRequestArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestNullableOptionalRequestRequestArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(
                f,
                "{:?}::{}",
                self.0, "TestNullableOptionalRequestRequest[]"
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format
        for TestNullableOptionalRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestNullableOptionalRequestRequest[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent for TestNullableOptionalRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestNullableOptionalRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestComplexNullableOptionalRequestRequestBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestComplexNullableOptionalRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestComplexNullableOptionalRequestRequestBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn nullable_int(
            mut self,
            value: rs_matter_crate::tlv::Nullable<u16>,
        ) -> Result<
            TestComplexNullableOptionalRequestRequestBuilder<P, 1usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableInt",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableInt",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalRequestRequestBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestComplexNullableOptionalRequestRequestBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn nullable_int(
            mut self,
            value: rs_matter_crate::tlv::Nullable<u16>,
        ) -> Result<
            TestComplexNullableOptionalRequestRequestBuilder<P, 1usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableInt",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalRequestRequestBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestComplexNullableOptionalRequestRequestBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn optional_int(
            mut self,
            value: Option<u16>,
        ) -> Result<
            TestComplexNullableOptionalRequestRequestBuilder<P, 2usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalInt",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalInt",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalRequestRequestBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestComplexNullableOptionalRequestRequestBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn optional_int(
            mut self,
            value: Option<u16>,
        ) -> Result<
            TestComplexNullableOptionalRequestRequestBuilder<P, 2usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalInt",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalRequestRequestBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestComplexNullableOptionalRequestRequestBuilder<P, 2>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn nullable_optional_int(
            mut self,
            value: Option<rs_matter_crate::tlv::Nullable<u16>>,
        ) -> Result<
            TestComplexNullableOptionalRequestRequestBuilder<P, 3usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalInt",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalInt",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(2),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalRequestRequestBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestComplexNullableOptionalRequestRequestBuilder<P, 2>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn nullable_optional_int(
            mut self,
            value: Option<rs_matter_crate::tlv::Nullable<u16>>,
        ) -> Result<
            TestComplexNullableOptionalRequestRequestBuilder<P, 3usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalInt",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(2),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalRequestRequestBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestComplexNullableOptionalRequestRequestBuilder<P, 3>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn nullable_string(
            mut self,
            value: rs_matter_crate::tlv::Nullable<rs_matter_crate::tlv::Utf8Str<'_>>,
        ) -> Result<
            TestComplexNullableOptionalRequestRequestBuilder<P, 4usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableString",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableString",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(3),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalRequestRequestBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestComplexNullableOptionalRequestRequestBuilder<P, 3>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn nullable_string(
            mut self,
            value: rs_matter_crate::tlv::Nullable<rs_matter_crate::tlv::Utf8Str<'_>>,
        ) -> Result<
            TestComplexNullableOptionalRequestRequestBuilder<P, 4usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableString",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(3),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalRequestRequestBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestComplexNullableOptionalRequestRequestBuilder<P, 4>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn optional_string(
            mut self,
            value: Option<rs_matter_crate::tlv::Utf8Str<'_>>,
        ) -> Result<
            TestComplexNullableOptionalRequestRequestBuilder<P, 5usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalString",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalString",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(4),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalRequestRequestBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestComplexNullableOptionalRequestRequestBuilder<P, 4>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn optional_string(
            mut self,
            value: Option<rs_matter_crate::tlv::Utf8Str<'_>>,
        ) -> Result<
            TestComplexNullableOptionalRequestRequestBuilder<P, 5usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "optionalString",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(4),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalRequestRequestBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestComplexNullableOptionalRequestRequestBuilder<P, 5>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn nullable_optional_string(
            mut self,
            value: Option<rs_matter_crate::tlv::Nullable<rs_matter_crate::tlv::Utf8Str<'_>>>,
        ) -> Result<
            TestComplexNullableOptionalRequestRequestBuilder<P, 6usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalString",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalString",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(5),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalRequestRequestBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestComplexNullableOptionalRequestRequestBuilder<P, 5>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn nullable_optional_string(
            mut self,
            value: Option<rs_matter_crate::tlv::Nullable<rs_matter_crate::tlv::Utf8Str<'_>>>,
        ) -> Result<
            TestComplexNullableOptionalRequestRequestBuilder<P, 6usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "nullableOptionalString",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(5),
                self.0.writer(),
            )?;
            Ok(TestComplexNullableOptionalRequestRequestBuilder(self.0))
        }
    }
    impl<P> TestComplexNullableOptionalRequestRequestBuilder<P, 6>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn nullable_struct(
            self,
        ) -> Result<
            rs_matter_crate::tlv::NullableBuilder<
                TestComplexNullableOptionalRequestRequestBuilder<P, 7usize>,
                SimpleStructBuilder<TestComplexNullableOptionalRequestRequestBuilder<P, 7usize>>,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestComplexNullableOptionalRequestRequestBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(6),
            )
        }
    }
    impl<P> TestComplexNullableOptionalRequestRequestBuilder<P, 7>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn optional_struct(
            self,
        ) -> Result<
            rs_matter_crate::tlv::OptionalBuilder<
                TestComplexNullableOptionalRequestRequestBuilder<P, 8usize>,
                SimpleStructBuilder<TestComplexNullableOptionalRequestRequestBuilder<P, 8usize>>,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestComplexNullableOptionalRequestRequestBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(7),
            )
        }
    }
    impl<P> TestComplexNullableOptionalRequestRequestBuilder<P, 8>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn nullable_optional_struct(
            self,
        ) -> Result<
            rs_matter_crate::tlv::OptionalBuilder<
                TestComplexNullableOptionalRequestRequestBuilder<P, 9usize>,
                rs_matter_crate::tlv::NullableBuilder<
                    TestComplexNullableOptionalRequestRequestBuilder<P, 9usize>,
                    SimpleStructBuilder<
                        TestComplexNullableOptionalRequestRequestBuilder<P, 9usize>,
                    >,
                >,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestComplexNullableOptionalRequestRequestBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(8),
            )
        }
    }
    impl<P> TestComplexNullableOptionalRequestRequestBuilder<P, 9>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn nullable_list(
            self,
        ) -> Result<
            rs_matter_crate::tlv::NullableBuilder<
                TestComplexNullableOptionalRequestRequestBuilder<P, 10usize>,
                rs_matter_crate::tlv::ToTLVArrayBuilder<
                    TestComplexNullableOptionalRequestRequestBuilder<P, 10usize>,
                    SimpleEnum,
                >,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestComplexNullableOptionalRequestRequestBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(9),
            )
        }
    }
    impl<P> TestComplexNullableOptionalRequestRequestBuilder<P, 10>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn optional_list(
            self,
        ) -> Result<
            rs_matter_crate::tlv::OptionalBuilder<
                TestComplexNullableOptionalRequestRequestBuilder<P, 11usize>,
                rs_matter_crate::tlv::ToTLVArrayBuilder<
                    TestComplexNullableOptionalRequestRequestBuilder<P, 11usize>,
                    SimpleEnum,
                >,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestComplexNullableOptionalRequestRequestBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(10),
            )
        }
    }
    impl<P> TestComplexNullableOptionalRequestRequestBuilder<P, 11>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn nullable_optional_list(
            self,
        ) -> Result<
            rs_matter_crate::tlv::OptionalBuilder<
                TestComplexNullableOptionalRequestRequestBuilder<P, 12usize>,
                rs_matter_crate::tlv::NullableBuilder<
                    TestComplexNullableOptionalRequestRequestBuilder<P, 12usize>,
                    rs_matter_crate::tlv::ToTLVArrayBuilder<
                        TestComplexNullableOptionalRequestRequestBuilder<P, 12usize>,
                        SimpleEnum,
                    >,
                >,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestComplexNullableOptionalRequestRequestBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(11),
            )
        }
    }
    impl<P> TestComplexNullableOptionalRequestRequestBuilder<P, 12usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for TestComplexNullableOptionalRequestRequestBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(
                f,
                "{:?}::{}",
                self.0, "TestComplexNullableOptionalRequestRequest"
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for TestComplexNullableOptionalRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestComplexNullableOptionalRequestRequest"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for TestComplexNullableOptionalRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestComplexNullableOptionalRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestComplexNullableOptionalRequestRequestArrayBuilder<P>(P);
    impl<P> TestComplexNullableOptionalRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestComplexNullableOptionalRequestRequestBuilder<
                TestComplexNullableOptionalRequestRequestArrayBuilder<P>,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestComplexNullableOptionalRequestRequestArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestComplexNullableOptionalRequestRequestArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(
                f,
                "{:?}::{}",
                self.0, "TestComplexNullableOptionalRequestRequest[]"
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format
        for TestComplexNullableOptionalRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestComplexNullableOptionalRequestRequest[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent
        for TestComplexNullableOptionalRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P>
        for TestComplexNullableOptionalRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct SimpleStructEchoRequestRequestBuilder<P, const F: usize = 0usize>(P);
    impl<P> SimpleStructEchoRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    impl<P> SimpleStructEchoRequestRequestBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        pub fn arg_1(
            self,
        ) -> Result<
            SimpleStructBuilder<SimpleStructEchoRequestRequestBuilder<P, 1usize>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                SimpleStructEchoRequestRequestBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Context(0),
            )
        }
    }
    impl<P> SimpleStructEchoRequestRequestBuilder<P, 1usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for SimpleStructEchoRequestRequestBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "SimpleStructEchoRequestRequest")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for SimpleStructEchoRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "SimpleStructEchoRequestRequest"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for SimpleStructEchoRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for SimpleStructEchoRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct SimpleStructEchoRequestRequestArrayBuilder<P>(P);
    impl<P> SimpleStructEchoRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            SimpleStructEchoRequestRequestBuilder<SimpleStructEchoRequestRequestArrayBuilder<P>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                SimpleStructEchoRequestRequestArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for SimpleStructEchoRequestRequestArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "SimpleStructEchoRequestRequest[]")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format for SimpleStructEchoRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "SimpleStructEchoRequestRequest[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent for SimpleStructEchoRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for SimpleStructEchoRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestSimpleOptionalArgumentRequestRequestBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestSimpleOptionalArgumentRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestSimpleOptionalArgumentRequestRequestBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn arg_1(
            mut self,
            value: Option<bool>,
        ) -> Result<
            TestSimpleOptionalArgumentRequestRequestBuilder<P, 1usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "arg1", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg1", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestSimpleOptionalArgumentRequestRequestBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestSimpleOptionalArgumentRequestRequestBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn arg_1(
            mut self,
            value: Option<bool>,
        ) -> Result<
            TestSimpleOptionalArgumentRequestRequestBuilder<P, 1usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg1", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestSimpleOptionalArgumentRequestRequestBuilder(self.0))
        }
    }
    impl<P> TestSimpleOptionalArgumentRequestRequestBuilder<P, 1usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for TestSimpleOptionalArgumentRequestRequestBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(
                f,
                "{:?}::{}",
                self.0, "TestSimpleOptionalArgumentRequestRequest"
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for TestSimpleOptionalArgumentRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestSimpleOptionalArgumentRequestRequest"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for TestSimpleOptionalArgumentRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestSimpleOptionalArgumentRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestSimpleOptionalArgumentRequestRequestArrayBuilder<P>(P);
    impl<P> TestSimpleOptionalArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestSimpleOptionalArgumentRequestRequestBuilder<
                TestSimpleOptionalArgumentRequestRequestArrayBuilder<P>,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestSimpleOptionalArgumentRequestRequestArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestSimpleOptionalArgumentRequestRequestArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(
                f,
                "{:?}::{}",
                self.0, "TestSimpleOptionalArgumentRequestRequest[]"
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format
        for TestSimpleOptionalArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestSimpleOptionalArgumentRequestRequest[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent
        for TestSimpleOptionalArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P>
        for TestSimpleOptionalArgumentRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestEmitTestEventRequestRequestBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestEmitTestEventRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestEmitTestEventRequestRequestBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn arg_1(
            mut self,
            value: u8,
        ) -> Result<TestEmitTestEventRequestRequestBuilder<P, 1usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "arg1", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg1", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestEmitTestEventRequestRequestBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestEmitTestEventRequestRequestBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn arg_1(
            mut self,
            value: u8,
        ) -> Result<TestEmitTestEventRequestRequestBuilder<P, 1usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg1", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestEmitTestEventRequestRequestBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestEmitTestEventRequestRequestBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn arg_2(
            mut self,
            value: SimpleEnum,
        ) -> Result<TestEmitTestEventRequestRequestBuilder<P, 2usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "arg2", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg2", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(TestEmitTestEventRequestRequestBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestEmitTestEventRequestRequestBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn arg_2(
            mut self,
            value: SimpleEnum,
        ) -> Result<TestEmitTestEventRequestRequestBuilder<P, 2usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg2", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(TestEmitTestEventRequestRequestBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestEmitTestEventRequestRequestBuilder<P, 2>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn arg_3(
            mut self,
            value: bool,
        ) -> Result<TestEmitTestEventRequestRequestBuilder<P, 3usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "arg3", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg3", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(2),
                self.0.writer(),
            )?;
            Ok(TestEmitTestEventRequestRequestBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestEmitTestEventRequestRequestBuilder<P, 2>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn arg_3(
            mut self,
            value: bool,
        ) -> Result<TestEmitTestEventRequestRequestBuilder<P, 3usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg3", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(2),
                self.0.writer(),
            )?;
            Ok(TestEmitTestEventRequestRequestBuilder(self.0))
        }
    }
    impl<P> TestEmitTestEventRequestRequestBuilder<P, 3usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for TestEmitTestEventRequestRequestBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestEmitTestEventRequestRequest")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for TestEmitTestEventRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestEmitTestEventRequestRequest"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for TestEmitTestEventRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestEmitTestEventRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestEmitTestEventRequestRequestArrayBuilder<P>(P);
    impl<P> TestEmitTestEventRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestEmitTestEventRequestRequestBuilder<TestEmitTestEventRequestRequestArrayBuilder<P>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestEmitTestEventRequestRequestArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestEmitTestEventRequestRequestArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestEmitTestEventRequestRequest[]")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format for TestEmitTestEventRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestEmitTestEventRequestRequest[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent for TestEmitTestEventRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestEmitTestEventRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestEmitTestFabricScopedEventRequestRequestBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestEmitTestFabricScopedEventRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestEmitTestFabricScopedEventRequestRequestBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn arg_1(
            mut self,
            value: u8,
        ) -> Result<
            TestEmitTestFabricScopedEventRequestRequestBuilder<P, 1usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "arg1", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg1", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestEmitTestFabricScopedEventRequestRequestBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestEmitTestFabricScopedEventRequestRequestBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn arg_1(
            mut self,
            value: u8,
        ) -> Result<
            TestEmitTestFabricScopedEventRequestRequestBuilder<P, 1usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg1", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestEmitTestFabricScopedEventRequestRequestBuilder(self.0))
        }
    }
    impl<P> TestEmitTestFabricScopedEventRequestRequestBuilder<P, 1usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug
        for TestEmitTestFabricScopedEventRequestRequestBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(
                f,
                "{:?}::{}",
                self.0, "TestEmitTestFabricScopedEventRequestRequest"
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for TestEmitTestFabricScopedEventRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestEmitTestFabricScopedEventRequestRequest"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for TestEmitTestFabricScopedEventRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P>
        for TestEmitTestFabricScopedEventRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestEmitTestFabricScopedEventRequestRequestArrayBuilder<P>(P);
    impl<P> TestEmitTestFabricScopedEventRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestEmitTestFabricScopedEventRequestRequestBuilder<
                TestEmitTestFabricScopedEventRequestRequestArrayBuilder<P>,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestEmitTestFabricScopedEventRequestRequestArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestEmitTestFabricScopedEventRequestRequestArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(
                f,
                "{:?}::{}",
                self.0, "TestEmitTestFabricScopedEventRequestRequest[]"
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format
        for TestEmitTestFabricScopedEventRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestEmitTestFabricScopedEventRequestRequest[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent
        for TestEmitTestFabricScopedEventRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P>
        for TestEmitTestFabricScopedEventRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestBatchHelperRequestRequestBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestBatchHelperRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestBatchHelperRequestRequestBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn sleep_before_response_time_ms(
            mut self,
            value: u16,
        ) -> Result<TestBatchHelperRequestRequestBuilder<P, 1usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "sleepBeforeResponseTimeMs",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "sleepBeforeResponseTimeMs",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestBatchHelperRequestRequestBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestBatchHelperRequestRequestBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn sleep_before_response_time_ms(
            mut self,
            value: u16,
        ) -> Result<TestBatchHelperRequestRequestBuilder<P, 1usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "sleepBeforeResponseTimeMs",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestBatchHelperRequestRequestBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestBatchHelperRequestRequestBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn size_of_response_buffer(
            mut self,
            value: u16,
        ) -> Result<TestBatchHelperRequestRequestBuilder<P, 2usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "sizeOfResponseBuffer",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "sizeOfResponseBuffer",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(TestBatchHelperRequestRequestBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestBatchHelperRequestRequestBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn size_of_response_buffer(
            mut self,
            value: u16,
        ) -> Result<TestBatchHelperRequestRequestBuilder<P, 2usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "sizeOfResponseBuffer",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(TestBatchHelperRequestRequestBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestBatchHelperRequestRequestBuilder<P, 2>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn fill_character(
            mut self,
            value: u8,
        ) -> Result<TestBatchHelperRequestRequestBuilder<P, 3usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "fillCharacter",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "fillCharacter",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(2),
                self.0.writer(),
            )?;
            Ok(TestBatchHelperRequestRequestBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestBatchHelperRequestRequestBuilder<P, 2>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn fill_character(
            mut self,
            value: u8,
        ) -> Result<TestBatchHelperRequestRequestBuilder<P, 3usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "fillCharacter",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(2),
                self.0.writer(),
            )?;
            Ok(TestBatchHelperRequestRequestBuilder(self.0))
        }
    }
    impl<P> TestBatchHelperRequestRequestBuilder<P, 3usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for TestBatchHelperRequestRequestBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestBatchHelperRequestRequest")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for TestBatchHelperRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestBatchHelperRequestRequest"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for TestBatchHelperRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestBatchHelperRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestBatchHelperRequestRequestArrayBuilder<P>(P);
    impl<P> TestBatchHelperRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestBatchHelperRequestRequestBuilder<TestBatchHelperRequestRequestArrayBuilder<P>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestBatchHelperRequestRequestArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestBatchHelperRequestRequestArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestBatchHelperRequestRequest[]")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format for TestBatchHelperRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestBatchHelperRequestRequest[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent for TestBatchHelperRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestBatchHelperRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestSecondBatchHelperRequestRequestBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestSecondBatchHelperRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestSecondBatchHelperRequestRequestBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn sleep_before_response_time_ms(
            mut self,
            value: u16,
        ) -> Result<
            TestSecondBatchHelperRequestRequestBuilder<P, 1usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "sleepBeforeResponseTimeMs",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "sleepBeforeResponseTimeMs",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestSecondBatchHelperRequestRequestBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestSecondBatchHelperRequestRequestBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn sleep_before_response_time_ms(
            mut self,
            value: u16,
        ) -> Result<
            TestSecondBatchHelperRequestRequestBuilder<P, 1usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "sleepBeforeResponseTimeMs",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestSecondBatchHelperRequestRequestBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestSecondBatchHelperRequestRequestBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn size_of_response_buffer(
            mut self,
            value: u16,
        ) -> Result<
            TestSecondBatchHelperRequestRequestBuilder<P, 2usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "sizeOfResponseBuffer",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "sizeOfResponseBuffer",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(TestSecondBatchHelperRequestRequestBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestSecondBatchHelperRequestRequestBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn size_of_response_buffer(
            mut self,
            value: u16,
        ) -> Result<
            TestSecondBatchHelperRequestRequestBuilder<P, 2usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "sizeOfResponseBuffer",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(TestSecondBatchHelperRequestRequestBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestSecondBatchHelperRequestRequestBuilder<P, 2>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn fill_character(
            mut self,
            value: u8,
        ) -> Result<
            TestSecondBatchHelperRequestRequestBuilder<P, 3usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "fillCharacter",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "fillCharacter",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(2),
                self.0.writer(),
            )?;
            Ok(TestSecondBatchHelperRequestRequestBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestSecondBatchHelperRequestRequestBuilder<P, 2>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn fill_character(
            mut self,
            value: u8,
        ) -> Result<
            TestSecondBatchHelperRequestRequestBuilder<P, 3usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "fillCharacter",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(2),
                self.0.writer(),
            )?;
            Ok(TestSecondBatchHelperRequestRequestBuilder(self.0))
        }
    }
    impl<P> TestSecondBatchHelperRequestRequestBuilder<P, 3usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for TestSecondBatchHelperRequestRequestBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestSecondBatchHelperRequestRequest")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for TestSecondBatchHelperRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestSecondBatchHelperRequestRequest"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for TestSecondBatchHelperRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestSecondBatchHelperRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestSecondBatchHelperRequestRequestArrayBuilder<P>(P);
    impl<P> TestSecondBatchHelperRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestSecondBatchHelperRequestRequestBuilder<
                TestSecondBatchHelperRequestRequestArrayBuilder<P>,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestSecondBatchHelperRequestRequestArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestSecondBatchHelperRequestRequestArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(
                f,
                "{:?}::{}",
                self.0, "TestSecondBatchHelperRequestRequest[]"
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format
        for TestSecondBatchHelperRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestSecondBatchHelperRequestRequest[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent
        for TestSecondBatchHelperRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestSecondBatchHelperRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestDifferentVendorMeiRequestRequestBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestDifferentVendorMeiRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestDifferentVendorMeiRequestRequestBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn arg_1(
            mut self,
            value: u8,
        ) -> Result<
            TestDifferentVendorMeiRequestRequestBuilder<P, 1usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "arg1", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg1", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestDifferentVendorMeiRequestRequestBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestDifferentVendorMeiRequestRequestBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn arg_1(
            mut self,
            value: u8,
        ) -> Result<
            TestDifferentVendorMeiRequestRequestBuilder<P, 1usize>,
            rs_matter_crate::error::Error,
        > {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg1", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestDifferentVendorMeiRequestRequestBuilder(self.0))
        }
    }
    impl<P> TestDifferentVendorMeiRequestRequestBuilder<P, 1usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for TestDifferentVendorMeiRequestRequestBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(
                f,
                "{:?}::{}",
                self.0, "TestDifferentVendorMeiRequestRequest"
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for TestDifferentVendorMeiRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestDifferentVendorMeiRequestRequest"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for TestDifferentVendorMeiRequestRequestBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestDifferentVendorMeiRequestRequestBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestDifferentVendorMeiRequestRequestArrayBuilder<P>(P);
    impl<P> TestDifferentVendorMeiRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestDifferentVendorMeiRequestRequestBuilder<
                TestDifferentVendorMeiRequestRequestArrayBuilder<P>,
            >,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestDifferentVendorMeiRequestRequestArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestDifferentVendorMeiRequestRequestArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(
                f,
                "{:?}::{}",
                self.0, "TestDifferentVendorMeiRequestRequest[]"
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format
        for TestDifferentVendorMeiRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestDifferentVendorMeiRequestRequest[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent
        for TestDifferentVendorMeiRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestDifferentVendorMeiRequestRequestArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestDifferentVendorMeiResponseBuilder<P, const F: usize = 0usize>(P);
    impl<P> TestDifferentVendorMeiResponseBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_struct(tag)?;
            Ok(Self(parent))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestDifferentVendorMeiResponseBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn arg_1(
            mut self,
            value: u8,
        ) -> Result<TestDifferentVendorMeiResponseBuilder<P, 1usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!("{:?}::{} -> {:?} +", self, "arg1", value);
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg1", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestDifferentVendorMeiResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestDifferentVendorMeiResponseBuilder<P, 0>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn arg_1(
            mut self,
            value: u8,
        ) -> Result<TestDifferentVendorMeiResponseBuilder<P, 1usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!("{:?}::{} -> {:?} +", self, "arg1", value);
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(0),
                self.0.writer(),
            )?;
            Ok(TestDifferentVendorMeiResponseBuilder(self.0))
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> TestDifferentVendorMeiResponseBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent
            + core::fmt::Debug
            + rs_matter_crate::reexport::defmt::Format,
    {
        pub fn event_number(
            mut self,
            value: u64,
        ) -> Result<TestDifferentVendorMeiResponseBuilder<P, 2usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "defmt")]
            rs_matter_crate::reexport::defmt::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "eventNumber",
                value
            );
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "eventNumber",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(TestDifferentVendorMeiResponseBuilder(self.0))
        }
    }
    #[cfg(not(feature = "defmt"))]
    impl<P> TestDifferentVendorMeiResponseBuilder<P, 1>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent + core::fmt::Debug,
    {
        pub fn event_number(
            mut self,
            value: u64,
        ) -> Result<TestDifferentVendorMeiResponseBuilder<P, 2usize>, rs_matter_crate::error::Error>
        {
            #[cfg(feature = "log")]
            rs_matter_crate::reexport::log::debug!(
                "{:?}::{} -> {:?} +",
                self,
                "eventNumber",
                value
            );
            rs_matter_crate::tlv::ToTLV::to_tlv(
                &value,
                &rs_matter_crate::tlv::TLVTag::Context(1),
                self.0.writer(),
            )?;
            Ok(TestDifferentVendorMeiResponseBuilder(self.0))
        }
    }
    impl<P> TestDifferentVendorMeiResponseBuilder<P, 2usize>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Finish the struct and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P, const F: usize> core::fmt::Debug for TestDifferentVendorMeiResponseBuilder<P, F>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestDifferentVendorMeiResponse")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P, const F: usize> rs_matter_crate::reexport::defmt::Format
        for TestDifferentVendorMeiResponseBuilder<P, F>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestDifferentVendorMeiResponse"
            )
        }
    }
    impl<P, const F: usize> rs_matter_crate::tlv::TLVBuilderParent
        for TestDifferentVendorMeiResponseBuilder<P, F>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestDifferentVendorMeiResponseBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    pub struct TestDifferentVendorMeiResponseArrayBuilder<P>(P);
    impl<P> TestDifferentVendorMeiResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        #[doc = "Create a new instance"]
        pub fn new(
            mut parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            parent.writer().start_array(tag)?;
            Ok(Self(parent))
        }
        #[doc = "Push a new element into the array"]
        pub fn push(
            self,
        ) -> Result<
            TestDifferentVendorMeiResponseBuilder<TestDifferentVendorMeiResponseArrayBuilder<P>>,
            rs_matter_crate::error::Error,
        > {
            rs_matter_crate::tlv::TLVBuilder::new(
                TestDifferentVendorMeiResponseArrayBuilder(self.0),
                &rs_matter_crate::tlv::TLVTag::Anonymous,
            )
        }
        #[doc = "Finish the array and return the parent"]
        pub fn end(mut self) -> Result<P, rs_matter_crate::error::Error> {
            use rs_matter_crate::tlv::TLVWrite;
            self.0.writer().end_container()?;
            Ok(self.0)
        }
    }
    impl<P> core::fmt::Debug for TestDifferentVendorMeiResponseArrayBuilder<P>
    where
        P: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}::{}", self.0, "TestDifferentVendorMeiResponse[]")
        }
    }
    #[cfg(feature = "defmt")]
    impl<P> rs_matter_crate::reexport::defmt::Format for TestDifferentVendorMeiResponseArrayBuilder<P>
    where
        P: rs_matter_crate::reexport::defmt::Format,
    {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "{:?}::{}",
                self.0,
                "TestDifferentVendorMeiResponse[]"
            )
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilderParent for TestDifferentVendorMeiResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        type Write = P::Write;
        fn writer(&mut self) -> &mut P::Write {
            self.0.writer()
        }
    }
    impl<P> rs_matter_crate::tlv::TLVBuilder<P> for TestDifferentVendorMeiResponseArrayBuilder<P>
    where
        P: rs_matter_crate::tlv::TLVBuilderParent,
    {
        fn new(
            parent: P,
            tag: &rs_matter_crate::tlv::TLVTag,
        ) -> Result<Self, rs_matter_crate::error::Error> {
            Self::new(parent, tag)
        }
        fn unchecked_into_parent(self) -> P {
            self.0
        }
    }
    #[doc = "The attribute IDs for the cluster."]
    #[derive(
        Copy, Clone, Debug, Eq, PartialEq, Hash, rs_matter_crate :: reexport :: strum :: FromRepr,
    )]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u32)]
    pub enum AttributeId {
        Boolean = 0,
        Bitmap8 = 1,
        Bitmap16 = 2,
        Bitmap32 = 3,
        Bitmap64 = 4,
        Int8u = 5,
        Int16u = 6,
        Int24u = 7,
        Int32u = 8,
        Int40u = 9,
        Int48u = 10,
        Int56u = 11,
        Int64u = 12,
        Int8s = 13,
        Int16s = 14,
        Int24s = 15,
        Int32s = 16,
        Int40s = 17,
        Int48s = 18,
        Int56s = 19,
        Int64s = 20,
        Enum8 = 21,
        Enum16 = 22,
        FloatSingle = 23,
        FloatDouble = 24,
        OctetString = 25,
        ListInt8u = 26,
        ListOctetString = 27,
        ListStructOctetString = 28,
        LongOctetString = 29,
        CharString = 30,
        LongCharString = 31,
        EpochUs = 32,
        EpochS = 33,
        VendorId = 34,
        ListNullablesAndOptionalsStruct = 35,
        EnumAttr = 36,
        StructAttr = 37,
        RangeRestrictedInt8u = 38,
        RangeRestrictedInt8s = 39,
        RangeRestrictedInt16u = 40,
        RangeRestrictedInt16s = 41,
        ListLongOctetString = 42,
        ListFabricScoped = 43,
        TimedWriteBoolean = 48,
        GeneralErrorBoolean = 49,
        ClusterErrorBoolean = 50,
        Unsupported = 255,
        NullableBoolean = 16384,
        NullableBitmap8 = 16385,
        NullableBitmap16 = 16386,
        NullableBitmap32 = 16387,
        NullableBitmap64 = 16388,
        NullableInt8u = 16389,
        NullableInt16u = 16390,
        NullableInt24u = 16391,
        NullableInt32u = 16392,
        NullableInt40u = 16393,
        NullableInt48u = 16394,
        NullableInt56u = 16395,
        NullableInt64u = 16396,
        NullableInt8s = 16397,
        NullableInt16s = 16398,
        NullableInt24s = 16399,
        NullableInt32s = 16400,
        NullableInt40s = 16401,
        NullableInt48s = 16402,
        NullableInt56s = 16403,
        NullableInt64s = 16404,
        NullableEnum8 = 16405,
        NullableEnum16 = 16406,
        NullableFloatSingle = 16407,
        NullableFloatDouble = 16408,
        NullableOctetString = 16409,
        NullableCharString = 16414,
        NullableEnumAttr = 16420,
        NullableStruct = 16421,
        NullableRangeRestrictedInt8u = 16422,
        NullableRangeRestrictedInt8s = 16423,
        NullableRangeRestrictedInt16u = 16424,
        NullableRangeRestrictedInt16s = 16425,
        WriteOnlyInt8u = 16426,
        MeiInt8u = 4294070017,
        GeneratedCommandList = 65528,
        AcceptedCommandList = 65529,
        EventList = 65530,
        AttributeList = 65531,
        FeatureMap = 65532,
        ClusterRevision = 65533,
    }
    impl core::convert::TryFrom<rs_matter_crate::dm::AttrId> for AttributeId {
        type Error = rs_matter_crate::error::Error;
        fn try_from(id: rs_matter_crate::dm::CmdId) -> Result<Self, Self::Error> {
            AttributeId::from_repr(id)
                .ok_or_else(|| rs_matter_crate::error::ErrorCode::AttributeNotFound.into())
        }
    }
    impl core::fmt::Debug for MetadataDebug<(AttributeId, bool)> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "Attr::")?;
            match self.0 .0 {
                AttributeId::Boolean => {
                    write!(f, "{}(0x{:02x})", "Boolean", AttributeId::Boolean as u32)?
                }
                AttributeId::Bitmap8 => {
                    write!(f, "{}(0x{:02x})", "Bitmap8", AttributeId::Bitmap8 as u32)?
                }
                AttributeId::Bitmap16 => {
                    write!(f, "{}(0x{:02x})", "Bitmap16", AttributeId::Bitmap16 as u32)?
                }
                AttributeId::Bitmap32 => {
                    write!(f, "{}(0x{:02x})", "Bitmap32", AttributeId::Bitmap32 as u32)?
                }
                AttributeId::Bitmap64 => {
                    write!(f, "{}(0x{:02x})", "Bitmap64", AttributeId::Bitmap64 as u32)?
                }
                AttributeId::Int8u => {
                    write!(f, "{}(0x{:02x})", "Int8u", AttributeId::Int8u as u32)?
                }
                AttributeId::Int16u => {
                    write!(f, "{}(0x{:02x})", "Int16u", AttributeId::Int16u as u32)?
                }
                AttributeId::Int24u => {
                    write!(f, "{}(0x{:02x})", "Int24u", AttributeId::Int24u as u32)?
                }
                AttributeId::Int32u => {
                    write!(f, "{}(0x{:02x})", "Int32u", AttributeId::Int32u as u32)?
                }
                AttributeId::Int40u => {
                    write!(f, "{}(0x{:02x})", "Int40u", AttributeId::Int40u as u32)?
                }
                AttributeId::Int48u => {
                    write!(f, "{}(0x{:02x})", "Int48u", AttributeId::Int48u as u32)?
                }
                AttributeId::Int56u => {
                    write!(f, "{}(0x{:02x})", "Int56u", AttributeId::Int56u as u32)?
                }
                AttributeId::Int64u => {
                    write!(f, "{}(0x{:02x})", "Int64u", AttributeId::Int64u as u32)?
                }
                AttributeId::Int8s => {
                    write!(f, "{}(0x{:02x})", "Int8s", AttributeId::Int8s as u32)?
                }
                AttributeId::Int16s => {
                    write!(f, "{}(0x{:02x})", "Int16s", AttributeId::Int16s as u32)?
                }
                AttributeId::Int24s => {
                    write!(f, "{}(0x{:02x})", "Int24s", AttributeId::Int24s as u32)?
                }
                AttributeId::Int32s => {
                    write!(f, "{}(0x{:02x})", "Int32s", AttributeId::Int32s as u32)?
                }
                AttributeId::Int40s => {
                    write!(f, "{}(0x{:02x})", "Int40s", AttributeId::Int40s as u32)?
                }
                AttributeId::Int48s => {
                    write!(f, "{}(0x{:02x})", "Int48s", AttributeId::Int48s as u32)?
                }
                AttributeId::Int56s => {
                    write!(f, "{}(0x{:02x})", "Int56s", AttributeId::Int56s as u32)?
                }
                AttributeId::Int64s => {
                    write!(f, "{}(0x{:02x})", "Int64s", AttributeId::Int64s as u32)?
                }
                AttributeId::Enum8 => {
                    write!(f, "{}(0x{:02x})", "Enum8", AttributeId::Enum8 as u32)?
                }
                AttributeId::Enum16 => {
                    write!(f, "{}(0x{:02x})", "Enum16", AttributeId::Enum16 as u32)?
                }
                AttributeId::FloatSingle => write!(
                    f,
                    "{}(0x{:02x})",
                    "FloatSingle",
                    AttributeId::FloatSingle as u32
                )?,
                AttributeId::FloatDouble => write!(
                    f,
                    "{}(0x{:02x})",
                    "FloatDouble",
                    AttributeId::FloatDouble as u32
                )?,
                AttributeId::OctetString => write!(
                    f,
                    "{}(0x{:02x})",
                    "OctetString",
                    AttributeId::OctetString as u32
                )?,
                AttributeId::ListInt8u => write!(
                    f,
                    "{}(0x{:02x})",
                    "ListInt8u",
                    AttributeId::ListInt8u as u32
                )?,
                AttributeId::ListOctetString => write!(
                    f,
                    "{}(0x{:02x})",
                    "ListOctetString",
                    AttributeId::ListOctetString as u32
                )?,
                AttributeId::ListStructOctetString => write!(
                    f,
                    "{}(0x{:02x})",
                    "ListStructOctetString",
                    AttributeId::ListStructOctetString as u32
                )?,
                AttributeId::LongOctetString => write!(
                    f,
                    "{}(0x{:02x})",
                    "LongOctetString",
                    AttributeId::LongOctetString as u32
                )?,
                AttributeId::CharString => write!(
                    f,
                    "{}(0x{:02x})",
                    "CharString",
                    AttributeId::CharString as u32
                )?,
                AttributeId::LongCharString => write!(
                    f,
                    "{}(0x{:02x})",
                    "LongCharString",
                    AttributeId::LongCharString as u32
                )?,
                AttributeId::EpochUs => {
                    write!(f, "{}(0x{:02x})", "EpochUs", AttributeId::EpochUs as u32)?
                }
                AttributeId::EpochS => {
                    write!(f, "{}(0x{:02x})", "EpochS", AttributeId::EpochS as u32)?
                }
                AttributeId::VendorId => {
                    write!(f, "{}(0x{:02x})", "VendorId", AttributeId::VendorId as u32)?
                }
                AttributeId::ListNullablesAndOptionalsStruct => write!(
                    f,
                    "{}(0x{:02x})",
                    "ListNullablesAndOptionalsStruct",
                    AttributeId::ListNullablesAndOptionalsStruct as u32
                )?,
                AttributeId::EnumAttr => {
                    write!(f, "{}(0x{:02x})", "EnumAttr", AttributeId::EnumAttr as u32)?
                }
                AttributeId::StructAttr => write!(
                    f,
                    "{}(0x{:02x})",
                    "StructAttr",
                    AttributeId::StructAttr as u32
                )?,
                AttributeId::RangeRestrictedInt8u => write!(
                    f,
                    "{}(0x{:02x})",
                    "RangeRestrictedInt8u",
                    AttributeId::RangeRestrictedInt8u as u32
                )?,
                AttributeId::RangeRestrictedInt8s => write!(
                    f,
                    "{}(0x{:02x})",
                    "RangeRestrictedInt8s",
                    AttributeId::RangeRestrictedInt8s as u32
                )?,
                AttributeId::RangeRestrictedInt16u => write!(
                    f,
                    "{}(0x{:02x})",
                    "RangeRestrictedInt16u",
                    AttributeId::RangeRestrictedInt16u as u32
                )?,
                AttributeId::RangeRestrictedInt16s => write!(
                    f,
                    "{}(0x{:02x})",
                    "RangeRestrictedInt16s",
                    AttributeId::RangeRestrictedInt16s as u32
                )?,
                AttributeId::ListLongOctetString => write!(
                    f,
                    "{}(0x{:02x})",
                    "ListLongOctetString",
                    AttributeId::ListLongOctetString as u32
                )?,
                AttributeId::ListFabricScoped => write!(
                    f,
                    "{}(0x{:02x})",
                    "ListFabricScoped",
                    AttributeId::ListFabricScoped as u32
                )?,
                AttributeId::TimedWriteBoolean => write!(
                    f,
                    "{}(0x{:02x})",
                    "TimedWriteBoolean",
                    AttributeId::TimedWriteBoolean as u32
                )?,
                AttributeId::GeneralErrorBoolean => write!(
                    f,
                    "{}(0x{:02x})",
                    "GeneralErrorBoolean",
                    AttributeId::GeneralErrorBoolean as u32
                )?,
                AttributeId::ClusterErrorBoolean => write!(
                    f,
                    "{}(0x{:02x})",
                    "ClusterErrorBoolean",
                    AttributeId::ClusterErrorBoolean as u32
                )?,
                AttributeId::Unsupported => write!(
                    f,
                    "{}(0x{:02x})",
                    "Unsupported",
                    AttributeId::Unsupported as u32
                )?,
                AttributeId::NullableBoolean => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableBoolean",
                    AttributeId::NullableBoolean as u32
                )?,
                AttributeId::NullableBitmap8 => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableBitmap8",
                    AttributeId::NullableBitmap8 as u32
                )?,
                AttributeId::NullableBitmap16 => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableBitmap16",
                    AttributeId::NullableBitmap16 as u32
                )?,
                AttributeId::NullableBitmap32 => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableBitmap32",
                    AttributeId::NullableBitmap32 as u32
                )?,
                AttributeId::NullableBitmap64 => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableBitmap64",
                    AttributeId::NullableBitmap64 as u32
                )?,
                AttributeId::NullableInt8u => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt8u",
                    AttributeId::NullableInt8u as u32
                )?,
                AttributeId::NullableInt16u => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt16u",
                    AttributeId::NullableInt16u as u32
                )?,
                AttributeId::NullableInt24u => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt24u",
                    AttributeId::NullableInt24u as u32
                )?,
                AttributeId::NullableInt32u => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt32u",
                    AttributeId::NullableInt32u as u32
                )?,
                AttributeId::NullableInt40u => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt40u",
                    AttributeId::NullableInt40u as u32
                )?,
                AttributeId::NullableInt48u => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt48u",
                    AttributeId::NullableInt48u as u32
                )?,
                AttributeId::NullableInt56u => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt56u",
                    AttributeId::NullableInt56u as u32
                )?,
                AttributeId::NullableInt64u => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt64u",
                    AttributeId::NullableInt64u as u32
                )?,
                AttributeId::NullableInt8s => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt8s",
                    AttributeId::NullableInt8s as u32
                )?,
                AttributeId::NullableInt16s => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt16s",
                    AttributeId::NullableInt16s as u32
                )?,
                AttributeId::NullableInt24s => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt24s",
                    AttributeId::NullableInt24s as u32
                )?,
                AttributeId::NullableInt32s => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt32s",
                    AttributeId::NullableInt32s as u32
                )?,
                AttributeId::NullableInt40s => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt40s",
                    AttributeId::NullableInt40s as u32
                )?,
                AttributeId::NullableInt48s => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt48s",
                    AttributeId::NullableInt48s as u32
                )?,
                AttributeId::NullableInt56s => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt56s",
                    AttributeId::NullableInt56s as u32
                )?,
                AttributeId::NullableInt64s => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt64s",
                    AttributeId::NullableInt64s as u32
                )?,
                AttributeId::NullableEnum8 => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableEnum8",
                    AttributeId::NullableEnum8 as u32
                )?,
                AttributeId::NullableEnum16 => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableEnum16",
                    AttributeId::NullableEnum16 as u32
                )?,
                AttributeId::NullableFloatSingle => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableFloatSingle",
                    AttributeId::NullableFloatSingle as u32
                )?,
                AttributeId::NullableFloatDouble => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableFloatDouble",
                    AttributeId::NullableFloatDouble as u32
                )?,
                AttributeId::NullableOctetString => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableOctetString",
                    AttributeId::NullableOctetString as u32
                )?,
                AttributeId::NullableCharString => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableCharString",
                    AttributeId::NullableCharString as u32
                )?,
                AttributeId::NullableEnumAttr => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableEnumAttr",
                    AttributeId::NullableEnumAttr as u32
                )?,
                AttributeId::NullableStruct => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableStruct",
                    AttributeId::NullableStruct as u32
                )?,
                AttributeId::NullableRangeRestrictedInt8u => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableRangeRestrictedInt8u",
                    AttributeId::NullableRangeRestrictedInt8u as u32
                )?,
                AttributeId::NullableRangeRestrictedInt8s => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableRangeRestrictedInt8s",
                    AttributeId::NullableRangeRestrictedInt8s as u32
                )?,
                AttributeId::NullableRangeRestrictedInt16u => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableRangeRestrictedInt16u",
                    AttributeId::NullableRangeRestrictedInt16u as u32
                )?,
                AttributeId::NullableRangeRestrictedInt16s => write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableRangeRestrictedInt16s",
                    AttributeId::NullableRangeRestrictedInt16s as u32
                )?,
                AttributeId::WriteOnlyInt8u => write!(
                    f,
                    "{}(0x{:02x})",
                    "WriteOnlyInt8u",
                    AttributeId::WriteOnlyInt8u as u32
                )?,
                AttributeId::MeiInt8u => {
                    write!(f, "{}(0x{:02x})", "MeiInt8u", AttributeId::MeiInt8u as u32)?
                }
                AttributeId::GeneratedCommandList => write!(
                    f,
                    "{}(0x{:02x})",
                    "GeneratedCommandList",
                    AttributeId::GeneratedCommandList as u32
                )?,
                AttributeId::AcceptedCommandList => write!(
                    f,
                    "{}(0x{:02x})",
                    "AcceptedCommandList",
                    AttributeId::AcceptedCommandList as u32
                )?,
                AttributeId::EventList => write!(
                    f,
                    "{}(0x{:02x})",
                    "EventList",
                    AttributeId::EventList as u32
                )?,
                AttributeId::AttributeList => write!(
                    f,
                    "{}(0x{:02x})",
                    "AttributeList",
                    AttributeId::AttributeList as u32
                )?,
                AttributeId::FeatureMap => write!(
                    f,
                    "{}(0x{:02x})",
                    "FeatureMap",
                    AttributeId::FeatureMap as u32
                )?,
                AttributeId::ClusterRevision => write!(
                    f,
                    "{}(0x{:02x})",
                    "ClusterRevision",
                    AttributeId::ClusterRevision as u32
                )?,
            }
            if self.0 .1 {
                write!(f, "::Write")
            } else {
                write!(f, "::Read")
            }
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for MetadataDebug<(AttributeId, bool)> {
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "Attr::");
            match self.0 .0 {
                AttributeId::Boolean => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "Boolean",
                    AttributeId::Boolean as u32
                ),
                AttributeId::Bitmap8 => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "Bitmap8",
                    AttributeId::Bitmap8 as u32
                ),
                AttributeId::Bitmap16 => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "Bitmap16",
                    AttributeId::Bitmap16 as u32
                ),
                AttributeId::Bitmap32 => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "Bitmap32",
                    AttributeId::Bitmap32 as u32
                ),
                AttributeId::Bitmap64 => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "Bitmap64",
                    AttributeId::Bitmap64 as u32
                ),
                AttributeId::Int8u => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "Int8u",
                    AttributeId::Int8u as u32
                ),
                AttributeId::Int16u => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "Int16u",
                    AttributeId::Int16u as u32
                ),
                AttributeId::Int24u => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "Int24u",
                    AttributeId::Int24u as u32
                ),
                AttributeId::Int32u => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "Int32u",
                    AttributeId::Int32u as u32
                ),
                AttributeId::Int40u => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "Int40u",
                    AttributeId::Int40u as u32
                ),
                AttributeId::Int48u => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "Int48u",
                    AttributeId::Int48u as u32
                ),
                AttributeId::Int56u => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "Int56u",
                    AttributeId::Int56u as u32
                ),
                AttributeId::Int64u => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "Int64u",
                    AttributeId::Int64u as u32
                ),
                AttributeId::Int8s => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "Int8s",
                    AttributeId::Int8s as u32
                ),
                AttributeId::Int16s => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "Int16s",
                    AttributeId::Int16s as u32
                ),
                AttributeId::Int24s => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "Int24s",
                    AttributeId::Int24s as u32
                ),
                AttributeId::Int32s => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "Int32s",
                    AttributeId::Int32s as u32
                ),
                AttributeId::Int40s => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "Int40s",
                    AttributeId::Int40s as u32
                ),
                AttributeId::Int48s => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "Int48s",
                    AttributeId::Int48s as u32
                ),
                AttributeId::Int56s => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "Int56s",
                    AttributeId::Int56s as u32
                ),
                AttributeId::Int64s => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "Int64s",
                    AttributeId::Int64s as u32
                ),
                AttributeId::Enum8 => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "Enum8",
                    AttributeId::Enum8 as u32
                ),
                AttributeId::Enum16 => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "Enum16",
                    AttributeId::Enum16 as u32
                ),
                AttributeId::FloatSingle => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "FloatSingle",
                    AttributeId::FloatSingle as u32
                ),
                AttributeId::FloatDouble => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "FloatDouble",
                    AttributeId::FloatDouble as u32
                ),
                AttributeId::OctetString => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "OctetString",
                    AttributeId::OctetString as u32
                ),
                AttributeId::ListInt8u => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "ListInt8u",
                    AttributeId::ListInt8u as u32
                ),
                AttributeId::ListOctetString => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "ListOctetString",
                    AttributeId::ListOctetString as u32
                ),
                AttributeId::ListStructOctetString => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "ListStructOctetString",
                    AttributeId::ListStructOctetString as u32
                ),
                AttributeId::LongOctetString => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "LongOctetString",
                    AttributeId::LongOctetString as u32
                ),
                AttributeId::CharString => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "CharString",
                    AttributeId::CharString as u32
                ),
                AttributeId::LongCharString => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "LongCharString",
                    AttributeId::LongCharString as u32
                ),
                AttributeId::EpochUs => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "EpochUs",
                    AttributeId::EpochUs as u32
                ),
                AttributeId::EpochS => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "EpochS",
                    AttributeId::EpochS as u32
                ),
                AttributeId::VendorId => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "VendorId",
                    AttributeId::VendorId as u32
                ),
                AttributeId::ListNullablesAndOptionalsStruct => {
                    rs_matter_crate::reexport::defmt::write!(
                        f,
                        "{}(0x{:02x})",
                        "ListNullablesAndOptionalsStruct",
                        AttributeId::ListNullablesAndOptionalsStruct as u32
                    )
                }
                AttributeId::EnumAttr => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "EnumAttr",
                    AttributeId::EnumAttr as u32
                ),
                AttributeId::StructAttr => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "StructAttr",
                    AttributeId::StructAttr as u32
                ),
                AttributeId::RangeRestrictedInt8u => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "RangeRestrictedInt8u",
                    AttributeId::RangeRestrictedInt8u as u32
                ),
                AttributeId::RangeRestrictedInt8s => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "RangeRestrictedInt8s",
                    AttributeId::RangeRestrictedInt8s as u32
                ),
                AttributeId::RangeRestrictedInt16u => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "RangeRestrictedInt16u",
                    AttributeId::RangeRestrictedInt16u as u32
                ),
                AttributeId::RangeRestrictedInt16s => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "RangeRestrictedInt16s",
                    AttributeId::RangeRestrictedInt16s as u32
                ),
                AttributeId::ListLongOctetString => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "ListLongOctetString",
                    AttributeId::ListLongOctetString as u32
                ),
                AttributeId::ListFabricScoped => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "ListFabricScoped",
                    AttributeId::ListFabricScoped as u32
                ),
                AttributeId::TimedWriteBoolean => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "TimedWriteBoolean",
                    AttributeId::TimedWriteBoolean as u32
                ),
                AttributeId::GeneralErrorBoolean => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "GeneralErrorBoolean",
                    AttributeId::GeneralErrorBoolean as u32
                ),
                AttributeId::ClusterErrorBoolean => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "ClusterErrorBoolean",
                    AttributeId::ClusterErrorBoolean as u32
                ),
                AttributeId::Unsupported => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "Unsupported",
                    AttributeId::Unsupported as u32
                ),
                AttributeId::NullableBoolean => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableBoolean",
                    AttributeId::NullableBoolean as u32
                ),
                AttributeId::NullableBitmap8 => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableBitmap8",
                    AttributeId::NullableBitmap8 as u32
                ),
                AttributeId::NullableBitmap16 => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableBitmap16",
                    AttributeId::NullableBitmap16 as u32
                ),
                AttributeId::NullableBitmap32 => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableBitmap32",
                    AttributeId::NullableBitmap32 as u32
                ),
                AttributeId::NullableBitmap64 => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableBitmap64",
                    AttributeId::NullableBitmap64 as u32
                ),
                AttributeId::NullableInt8u => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt8u",
                    AttributeId::NullableInt8u as u32
                ),
                AttributeId::NullableInt16u => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt16u",
                    AttributeId::NullableInt16u as u32
                ),
                AttributeId::NullableInt24u => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt24u",
                    AttributeId::NullableInt24u as u32
                ),
                AttributeId::NullableInt32u => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt32u",
                    AttributeId::NullableInt32u as u32
                ),
                AttributeId::NullableInt40u => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt40u",
                    AttributeId::NullableInt40u as u32
                ),
                AttributeId::NullableInt48u => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt48u",
                    AttributeId::NullableInt48u as u32
                ),
                AttributeId::NullableInt56u => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt56u",
                    AttributeId::NullableInt56u as u32
                ),
                AttributeId::NullableInt64u => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt64u",
                    AttributeId::NullableInt64u as u32
                ),
                AttributeId::NullableInt8s => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt8s",
                    AttributeId::NullableInt8s as u32
                ),
                AttributeId::NullableInt16s => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt16s",
                    AttributeId::NullableInt16s as u32
                ),
                AttributeId::NullableInt24s => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt24s",
                    AttributeId::NullableInt24s as u32
                ),
                AttributeId::NullableInt32s => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt32s",
                    AttributeId::NullableInt32s as u32
                ),
                AttributeId::NullableInt40s => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt40s",
                    AttributeId::NullableInt40s as u32
                ),
                AttributeId::NullableInt48s => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt48s",
                    AttributeId::NullableInt48s as u32
                ),
                AttributeId::NullableInt56s => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt56s",
                    AttributeId::NullableInt56s as u32
                ),
                AttributeId::NullableInt64s => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableInt64s",
                    AttributeId::NullableInt64s as u32
                ),
                AttributeId::NullableEnum8 => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableEnum8",
                    AttributeId::NullableEnum8 as u32
                ),
                AttributeId::NullableEnum16 => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableEnum16",
                    AttributeId::NullableEnum16 as u32
                ),
                AttributeId::NullableFloatSingle => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableFloatSingle",
                    AttributeId::NullableFloatSingle as u32
                ),
                AttributeId::NullableFloatDouble => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableFloatDouble",
                    AttributeId::NullableFloatDouble as u32
                ),
                AttributeId::NullableOctetString => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableOctetString",
                    AttributeId::NullableOctetString as u32
                ),
                AttributeId::NullableCharString => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableCharString",
                    AttributeId::NullableCharString as u32
                ),
                AttributeId::NullableEnumAttr => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableEnumAttr",
                    AttributeId::NullableEnumAttr as u32
                ),
                AttributeId::NullableStruct => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "NullableStruct",
                    AttributeId::NullableStruct as u32
                ),
                AttributeId::NullableRangeRestrictedInt8u => {
                    rs_matter_crate::reexport::defmt::write!(
                        f,
                        "{}(0x{:02x})",
                        "NullableRangeRestrictedInt8u",
                        AttributeId::NullableRangeRestrictedInt8u as u32
                    )
                }
                AttributeId::NullableRangeRestrictedInt8s => {
                    rs_matter_crate::reexport::defmt::write!(
                        f,
                        "{}(0x{:02x})",
                        "NullableRangeRestrictedInt8s",
                        AttributeId::NullableRangeRestrictedInt8s as u32
                    )
                }
                AttributeId::NullableRangeRestrictedInt16u => {
                    rs_matter_crate::reexport::defmt::write!(
                        f,
                        "{}(0x{:02x})",
                        "NullableRangeRestrictedInt16u",
                        AttributeId::NullableRangeRestrictedInt16u as u32
                    )
                }
                AttributeId::NullableRangeRestrictedInt16s => {
                    rs_matter_crate::reexport::defmt::write!(
                        f,
                        "{}(0x{:02x})",
                        "NullableRangeRestrictedInt16s",
                        AttributeId::NullableRangeRestrictedInt16s as u32
                    )
                }
                AttributeId::WriteOnlyInt8u => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "WriteOnlyInt8u",
                    AttributeId::WriteOnlyInt8u as u32
                ),
                AttributeId::MeiInt8u => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "MeiInt8u",
                    AttributeId::MeiInt8u as u32
                ),
                AttributeId::GeneratedCommandList => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "GeneratedCommandList",
                    AttributeId::GeneratedCommandList as u32
                ),
                AttributeId::AcceptedCommandList => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "AcceptedCommandList",
                    AttributeId::AcceptedCommandList as u32
                ),
                AttributeId::EventList => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "EventList",
                    AttributeId::EventList as u32
                ),
                AttributeId::AttributeList => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "AttributeList",
                    AttributeId::AttributeList as u32
                ),
                AttributeId::FeatureMap => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "FeatureMap",
                    AttributeId::FeatureMap as u32
                ),
                AttributeId::ClusterRevision => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "ClusterRevision",
                    AttributeId::ClusterRevision as u32
                ),
            }
            if self.0 .1 {
                rs_matter_crate::reexport::defmt::write!(f, "::Write")
            } else {
                rs_matter_crate::reexport::defmt::write!(f, "::Read")
            }
        }
    }
    #[doc = "The command IDs for the cluster."]
    #[derive(
        Copy, Clone, Debug, Eq, PartialEq, Hash, rs_matter_crate :: reexport :: strum :: FromRepr,
    )]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u32)]
    pub enum CommandId {
        Test = 0,
        TestNotHandled = 1,
        TestSpecific = 2,
        TestUnknownCommand = 3,
        TestAddArguments = 4,
        TestSimpleArgumentRequest = 5,
        TestStructArrayArgumentRequest = 6,
        TestStructArgumentRequest = 7,
        TestNestedStructArgumentRequest = 8,
        TestListStructArgumentRequest = 9,
        TestListInt8UArgumentRequest = 10,
        TestNestedStructListArgumentRequest = 11,
        TestListNestedStructListArgumentRequest = 12,
        TestListInt8UReverseRequest = 13,
        TestEnumsRequest = 14,
        TestNullableOptionalRequest = 15,
        TestComplexNullableOptionalRequest = 16,
        SimpleStructEchoRequest = 17,
        TimedInvokeRequest = 18,
        TestSimpleOptionalArgumentRequest = 19,
        TestEmitTestEventRequest = 20,
        TestEmitTestFabricScopedEventRequest = 21,
        TestBatchHelperRequest = 22,
        TestSecondBatchHelperRequest = 23,
        TestDifferentVendorMeiRequest = 4294049962,
    }
    impl core::convert::TryFrom<rs_matter_crate::dm::CmdId> for CommandId {
        type Error = rs_matter_crate::error::Error;
        fn try_from(id: rs_matter_crate::dm::CmdId) -> Result<Self, Self::Error> {
            CommandId::from_repr(id)
                .ok_or_else(|| rs_matter_crate::error::ErrorCode::CommandNotFound.into())
        }
    }
    impl core::fmt::Debug for MetadataDebug<CommandId> {
        #[allow(unreachable_code)]
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "Cmd::")?;
            match self.0 {
                CommandId::Test => write!(f, "{}(0x{:02x})", "Test", CommandId::Test as u32)?,
                CommandId::TestNotHandled => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestNotHandled",
                    CommandId::TestNotHandled as u32
                )?,
                CommandId::TestSpecific => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestSpecific",
                    CommandId::TestSpecific as u32
                )?,
                CommandId::TestUnknownCommand => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestUnknownCommand",
                    CommandId::TestUnknownCommand as u32
                )?,
                CommandId::TestAddArguments => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestAddArguments",
                    CommandId::TestAddArguments as u32
                )?,
                CommandId::TestSimpleArgumentRequest => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestSimpleArgumentRequest",
                    CommandId::TestSimpleArgumentRequest as u32
                )?,
                CommandId::TestStructArrayArgumentRequest => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestStructArrayArgumentRequest",
                    CommandId::TestStructArrayArgumentRequest as u32
                )?,
                CommandId::TestStructArgumentRequest => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestStructArgumentRequest",
                    CommandId::TestStructArgumentRequest as u32
                )?,
                CommandId::TestNestedStructArgumentRequest => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestNestedStructArgumentRequest",
                    CommandId::TestNestedStructArgumentRequest as u32
                )?,
                CommandId::TestListStructArgumentRequest => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestListStructArgumentRequest",
                    CommandId::TestListStructArgumentRequest as u32
                )?,
                CommandId::TestListInt8UArgumentRequest => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestListInt8UArgumentRequest",
                    CommandId::TestListInt8UArgumentRequest as u32
                )?,
                CommandId::TestNestedStructListArgumentRequest => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestNestedStructListArgumentRequest",
                    CommandId::TestNestedStructListArgumentRequest as u32
                )?,
                CommandId::TestListNestedStructListArgumentRequest => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestListNestedStructListArgumentRequest",
                    CommandId::TestListNestedStructListArgumentRequest as u32
                )?,
                CommandId::TestListInt8UReverseRequest => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestListInt8UReverseRequest",
                    CommandId::TestListInt8UReverseRequest as u32
                )?,
                CommandId::TestEnumsRequest => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestEnumsRequest",
                    CommandId::TestEnumsRequest as u32
                )?,
                CommandId::TestNullableOptionalRequest => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestNullableOptionalRequest",
                    CommandId::TestNullableOptionalRequest as u32
                )?,
                CommandId::TestComplexNullableOptionalRequest => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestComplexNullableOptionalRequest",
                    CommandId::TestComplexNullableOptionalRequest as u32
                )?,
                CommandId::SimpleStructEchoRequest => write!(
                    f,
                    "{}(0x{:02x})",
                    "SimpleStructEchoRequest",
                    CommandId::SimpleStructEchoRequest as u32
                )?,
                CommandId::TimedInvokeRequest => write!(
                    f,
                    "{}(0x{:02x})",
                    "TimedInvokeRequest",
                    CommandId::TimedInvokeRequest as u32
                )?,
                CommandId::TestSimpleOptionalArgumentRequest => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestSimpleOptionalArgumentRequest",
                    CommandId::TestSimpleOptionalArgumentRequest as u32
                )?,
                CommandId::TestEmitTestEventRequest => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestEmitTestEventRequest",
                    CommandId::TestEmitTestEventRequest as u32
                )?,
                CommandId::TestEmitTestFabricScopedEventRequest => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestEmitTestFabricScopedEventRequest",
                    CommandId::TestEmitTestFabricScopedEventRequest as u32
                )?,
                CommandId::TestBatchHelperRequest => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestBatchHelperRequest",
                    CommandId::TestBatchHelperRequest as u32
                )?,
                CommandId::TestSecondBatchHelperRequest => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestSecondBatchHelperRequest",
                    CommandId::TestSecondBatchHelperRequest as u32
                )?,
                CommandId::TestDifferentVendorMeiRequest => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestDifferentVendorMeiRequest",
                    CommandId::TestDifferentVendorMeiRequest as u32
                )?,
            }
            write!(f, "::Invoke")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for MetadataDebug<CommandId> {
        #[allow(unreachable_code)]
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "Cmd::");
            match self.0 {
                CommandId::Test => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "Test",
                    CommandId::Test as u32
                ),
                CommandId::TestNotHandled => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "TestNotHandled",
                    CommandId::TestNotHandled as u32
                ),
                CommandId::TestSpecific => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "TestSpecific",
                    CommandId::TestSpecific as u32
                ),
                CommandId::TestUnknownCommand => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "TestUnknownCommand",
                    CommandId::TestUnknownCommand as u32
                ),
                CommandId::TestAddArguments => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "TestAddArguments",
                    CommandId::TestAddArguments as u32
                ),
                CommandId::TestSimpleArgumentRequest => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "TestSimpleArgumentRequest",
                    CommandId::TestSimpleArgumentRequest as u32
                ),
                CommandId::TestStructArrayArgumentRequest => {
                    rs_matter_crate::reexport::defmt::write!(
                        f,
                        "{}(0x{:02x})",
                        "TestStructArrayArgumentRequest",
                        CommandId::TestStructArrayArgumentRequest as u32
                    )
                }
                CommandId::TestStructArgumentRequest => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "TestStructArgumentRequest",
                    CommandId::TestStructArgumentRequest as u32
                ),
                CommandId::TestNestedStructArgumentRequest => {
                    rs_matter_crate::reexport::defmt::write!(
                        f,
                        "{}(0x{:02x})",
                        "TestNestedStructArgumentRequest",
                        CommandId::TestNestedStructArgumentRequest as u32
                    )
                }
                CommandId::TestListStructArgumentRequest => {
                    rs_matter_crate::reexport::defmt::write!(
                        f,
                        "{}(0x{:02x})",
                        "TestListStructArgumentRequest",
                        CommandId::TestListStructArgumentRequest as u32
                    )
                }
                CommandId::TestListInt8UArgumentRequest => {
                    rs_matter_crate::reexport::defmt::write!(
                        f,
                        "{}(0x{:02x})",
                        "TestListInt8UArgumentRequest",
                        CommandId::TestListInt8UArgumentRequest as u32
                    )
                }
                CommandId::TestNestedStructListArgumentRequest => {
                    rs_matter_crate::reexport::defmt::write!(
                        f,
                        "{}(0x{:02x})",
                        "TestNestedStructListArgumentRequest",
                        CommandId::TestNestedStructListArgumentRequest as u32
                    )
                }
                CommandId::TestListNestedStructListArgumentRequest => {
                    rs_matter_crate::reexport::defmt::write!(
                        f,
                        "{}(0x{:02x})",
                        "TestListNestedStructListArgumentRequest",
                        CommandId::TestListNestedStructListArgumentRequest as u32
                    )
                }
                CommandId::TestListInt8UReverseRequest => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "TestListInt8UReverseRequest",
                    CommandId::TestListInt8UReverseRequest as u32
                ),
                CommandId::TestEnumsRequest => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "TestEnumsRequest",
                    CommandId::TestEnumsRequest as u32
                ),
                CommandId::TestNullableOptionalRequest => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "TestNullableOptionalRequest",
                    CommandId::TestNullableOptionalRequest as u32
                ),
                CommandId::TestComplexNullableOptionalRequest => {
                    rs_matter_crate::reexport::defmt::write!(
                        f,
                        "{}(0x{:02x})",
                        "TestComplexNullableOptionalRequest",
                        CommandId::TestComplexNullableOptionalRequest as u32
                    )
                }
                CommandId::SimpleStructEchoRequest => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "SimpleStructEchoRequest",
                    CommandId::SimpleStructEchoRequest as u32
                ),
                CommandId::TimedInvokeRequest => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "TimedInvokeRequest",
                    CommandId::TimedInvokeRequest as u32
                ),
                CommandId::TestSimpleOptionalArgumentRequest => {
                    rs_matter_crate::reexport::defmt::write!(
                        f,
                        "{}(0x{:02x})",
                        "TestSimpleOptionalArgumentRequest",
                        CommandId::TestSimpleOptionalArgumentRequest as u32
                    )
                }
                CommandId::TestEmitTestEventRequest => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "TestEmitTestEventRequest",
                    CommandId::TestEmitTestEventRequest as u32
                ),
                CommandId::TestEmitTestFabricScopedEventRequest => {
                    rs_matter_crate::reexport::defmt::write!(
                        f,
                        "{}(0x{:02x})",
                        "TestEmitTestFabricScopedEventRequest",
                        CommandId::TestEmitTestFabricScopedEventRequest as u32
                    )
                }
                CommandId::TestBatchHelperRequest => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "TestBatchHelperRequest",
                    CommandId::TestBatchHelperRequest as u32
                ),
                CommandId::TestSecondBatchHelperRequest => {
                    rs_matter_crate::reexport::defmt::write!(
                        f,
                        "{}(0x{:02x})",
                        "TestSecondBatchHelperRequest",
                        CommandId::TestSecondBatchHelperRequest as u32
                    )
                }
                CommandId::TestDifferentVendorMeiRequest => {
                    rs_matter_crate::reexport::defmt::write!(
                        f,
                        "{}(0x{:02x})",
                        "TestDifferentVendorMeiRequest",
                        CommandId::TestDifferentVendorMeiRequest as u32
                    )
                }
            }
            rs_matter_crate::reexport::defmt::write!(f, "::Invoke")
        }
    }
    #[doc = "The command response IDs for the cluster."]
    #[derive(
        Copy, Clone, Debug, Eq, PartialEq, Hash, rs_matter_crate :: reexport :: strum :: FromRepr,
    )]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    #[repr(u32)]
    pub enum CommandResponseId {
        TestSpecificResponse = 0,
        TestAddArgumentsResponse = 1,
        TestSimpleArgumentResponse = 2,
        TestStructArrayArgumentResponse = 3,
        TestListInt8UReverseResponse = 4,
        TestEnumsResponse = 5,
        TestNullableOptionalResponse = 6,
        TestComplexNullableOptionalResponse = 7,
        BooleanResponse = 8,
        SimpleStructResponse = 9,
        TestEmitTestEventResponse = 10,
        TestEmitTestFabricScopedEventResponse = 11,
        TestBatchHelperResponse = 12,
        TestDifferentVendorMeiResponse = 4294049979,
    }
    impl core::fmt::Debug for MetadataDebug<CommandResponseId> {
        #[allow(unreachable_code)]
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "Cmd::")?;
            match self.0 {
                CommandResponseId::TestSpecificResponse => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestSpecificResponse",
                    CommandResponseId::TestSpecificResponse as u32
                )?,
                CommandResponseId::TestAddArgumentsResponse => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestAddArgumentsResponse",
                    CommandResponseId::TestAddArgumentsResponse as u32
                )?,
                CommandResponseId::TestSimpleArgumentResponse => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestSimpleArgumentResponse",
                    CommandResponseId::TestSimpleArgumentResponse as u32
                )?,
                CommandResponseId::TestStructArrayArgumentResponse => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestStructArrayArgumentResponse",
                    CommandResponseId::TestStructArrayArgumentResponse as u32
                )?,
                CommandResponseId::TestListInt8UReverseResponse => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestListInt8UReverseResponse",
                    CommandResponseId::TestListInt8UReverseResponse as u32
                )?,
                CommandResponseId::TestEnumsResponse => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestEnumsResponse",
                    CommandResponseId::TestEnumsResponse as u32
                )?,
                CommandResponseId::TestNullableOptionalResponse => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestNullableOptionalResponse",
                    CommandResponseId::TestNullableOptionalResponse as u32
                )?,
                CommandResponseId::TestComplexNullableOptionalResponse => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestComplexNullableOptionalResponse",
                    CommandResponseId::TestComplexNullableOptionalResponse as u32
                )?,
                CommandResponseId::BooleanResponse => write!(
                    f,
                    "{}(0x{:02x})",
                    "BooleanResponse",
                    CommandResponseId::BooleanResponse as u32
                )?,
                CommandResponseId::SimpleStructResponse => write!(
                    f,
                    "{}(0x{:02x})",
                    "SimpleStructResponse",
                    CommandResponseId::SimpleStructResponse as u32
                )?,
                CommandResponseId::TestEmitTestEventResponse => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestEmitTestEventResponse",
                    CommandResponseId::TestEmitTestEventResponse as u32
                )?,
                CommandResponseId::TestEmitTestFabricScopedEventResponse => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestEmitTestFabricScopedEventResponse",
                    CommandResponseId::TestEmitTestFabricScopedEventResponse as u32
                )?,
                CommandResponseId::TestBatchHelperResponse => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestBatchHelperResponse",
                    CommandResponseId::TestBatchHelperResponse as u32
                )?,
                CommandResponseId::TestDifferentVendorMeiResponse => write!(
                    f,
                    "{}(0x{:02x})",
                    "TestDifferentVendorMeiResponse",
                    CommandResponseId::TestDifferentVendorMeiResponse as u32
                )?,
            }
            write!(f, "::Response")
        }
    }
    #[cfg(feature = "defmt")]
    impl rs_matter_crate::reexport::defmt::Format for MetadataDebug<CommandResponseId> {
        #[allow(unreachable_code)]
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(f, "Cmd::");
            match self.0 {
                CommandResponseId::TestSpecificResponse => {
                    rs_matter_crate::reexport::defmt::write!(
                        f,
                        "{}(0x{:02x})",
                        "TestSpecificResponse",
                        CommandResponseId::TestSpecificResponse as u32
                    )
                }
                CommandResponseId::TestAddArgumentsResponse => {
                    rs_matter_crate::reexport::defmt::write!(
                        f,
                        "{}(0x{:02x})",
                        "TestAddArgumentsResponse",
                        CommandResponseId::TestAddArgumentsResponse as u32
                    )
                }
                CommandResponseId::TestSimpleArgumentResponse => {
                    rs_matter_crate::reexport::defmt::write!(
                        f,
                        "{}(0x{:02x})",
                        "TestSimpleArgumentResponse",
                        CommandResponseId::TestSimpleArgumentResponse as u32
                    )
                }
                CommandResponseId::TestStructArrayArgumentResponse => {
                    rs_matter_crate::reexport::defmt::write!(
                        f,
                        "{}(0x{:02x})",
                        "TestStructArrayArgumentResponse",
                        CommandResponseId::TestStructArrayArgumentResponse as u32
                    )
                }
                CommandResponseId::TestListInt8UReverseResponse => {
                    rs_matter_crate::reexport::defmt::write!(
                        f,
                        "{}(0x{:02x})",
                        "TestListInt8UReverseResponse",
                        CommandResponseId::TestListInt8UReverseResponse as u32
                    )
                }
                CommandResponseId::TestEnumsResponse => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "TestEnumsResponse",
                    CommandResponseId::TestEnumsResponse as u32
                ),
                CommandResponseId::TestNullableOptionalResponse => {
                    rs_matter_crate::reexport::defmt::write!(
                        f,
                        "{}(0x{:02x})",
                        "TestNullableOptionalResponse",
                        CommandResponseId::TestNullableOptionalResponse as u32
                    )
                }
                CommandResponseId::TestComplexNullableOptionalResponse => {
                    rs_matter_crate::reexport::defmt::write!(
                        f,
                        "{}(0x{:02x})",
                        "TestComplexNullableOptionalResponse",
                        CommandResponseId::TestComplexNullableOptionalResponse as u32
                    )
                }
                CommandResponseId::BooleanResponse => rs_matter_crate::reexport::defmt::write!(
                    f,
                    "{}(0x{:02x})",
                    "BooleanResponse",
                    CommandResponseId::BooleanResponse as u32
                ),
                CommandResponseId::SimpleStructResponse => {
                    rs_matter_crate::reexport::defmt::write!(
                        f,
                        "{}(0x{:02x})",
                        "SimpleStructResponse",
                        CommandResponseId::SimpleStructResponse as u32
                    )
                }
                CommandResponseId::TestEmitTestEventResponse => {
                    rs_matter_crate::reexport::defmt::write!(
                        f,
                        "{}(0x{:02x})",
                        "TestEmitTestEventResponse",
                        CommandResponseId::TestEmitTestEventResponse as u32
                    )
                }
                CommandResponseId::TestEmitTestFabricScopedEventResponse => {
                    rs_matter_crate::reexport::defmt::write!(
                        f,
                        "{}(0x{:02x})",
                        "TestEmitTestFabricScopedEventResponse",
                        CommandResponseId::TestEmitTestFabricScopedEventResponse as u32
                    )
                }
                CommandResponseId::TestBatchHelperResponse => {
                    rs_matter_crate::reexport::defmt::write!(
                        f,
                        "{}(0x{:02x})",
                        "TestBatchHelperResponse",
                        CommandResponseId::TestBatchHelperResponse as u32
                    )
                }
                CommandResponseId::TestDifferentVendorMeiResponse => {
                    rs_matter_crate::reexport::defmt::write!(
                        f,
                        "{}(0x{:02x})",
                        "TestDifferentVendorMeiResponse",
                        CommandResponseId::TestDifferentVendorMeiResponse as u32
                    )
                }
            }
            rs_matter_crate::reexport::defmt::write!(f, "::Response")
        }
    }
    impl core::convert::TryFrom<rs_matter_crate::dm::CmdId> for CommandResponseId {
        type Error = rs_matter_crate::error::Error;
        fn try_from(id: rs_matter_crate::dm::CmdId) -> Result<Self, Self::Error> {
            CommandResponseId::from_repr(id)
                .ok_or_else(|| rs_matter_crate::error::ErrorCode::CommandNotFound.into())
        }
    }
    #[doc = "The cluster metadata. By default, all cluster attributes and commands are allowed, and the revision is the latest one. Use `Cluster::with_*` to reconfigure."]
    pub const FULL_CLUSTER: rs_matter_crate::dm::Cluster<'static> =
        rs_matter_crate::dm::Cluster::new(
            4294048773,
            1,
            0,
            &[
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::Boolean as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::Bitmap8 as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::Bitmap16 as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::Bitmap32 as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::Bitmap64 as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::Int8u as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::Int16u as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::Int24u as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::Int32u as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::Int40u as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::Int48u as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::Int56u as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::Int64u as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::Int8s as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::Int16s as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::Int24s as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::Int32s as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::Int40s as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::Int48s as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::Int56s as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::Int64s as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::Enum8 as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::Enum16 as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::FloatSingle as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::FloatDouble as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::OctetString as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::ListInt8u as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::A,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::ListOctetString as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::A,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::ListStructOctetString as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::A,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::LongOctetString as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::CharString as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::LongCharString as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::EpochUs as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::EpochS as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::VendorId as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::ListNullablesAndOptionalsStruct as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::A,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::EnumAttr as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::StructAttr as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::RangeRestrictedInt8u as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::RangeRestrictedInt8s as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::RangeRestrictedInt16u as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::RangeRestrictedInt16s as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::ListLongOctetString as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::A,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::ListFabricScoped as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::A,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::TimedWriteBoolean as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        )
                        .union(rs_matter_crate::dm::Access::TIMED_ONLY),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::GeneralErrorBoolean as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::ClusterErrorBoolean as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::Unsupported as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::O,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableBoolean as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableBitmap8 as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableBitmap16 as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableBitmap32 as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableBitmap64 as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableInt8u as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableInt16u as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableInt24u as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableInt32u as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableInt40u as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableInt48u as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableInt56u as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableInt64u as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableInt8s as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableInt16s as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableInt24s as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableInt32s as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableInt40s as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableInt48s as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableInt56s as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableInt64s as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableEnum8 as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableEnum16 as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableFloatSingle as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableFloatDouble as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableOctetString as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableCharString as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableEnumAttr as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableStruct as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableRangeRestrictedInt8u as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableRangeRestrictedInt8s as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableRangeRestrictedInt16u as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::NullableRangeRestrictedInt16s as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::WriteOnlyInt8u as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::O,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::MeiInt8u as _,
                    rs_matter_crate::dm::Access::READ
                        .union(rs_matter_crate::dm::Access::WRITE)
                        .union(
                            rs_matter_crate::dm::Access::NEED_OPERATE
                                .union(
                                    rs_matter_crate::dm::Access::NEED_MANAGE
                                        .union(rs_matter_crate::dm::Access::NEED_ADMIN),
                                )
                                .union(rs_matter_crate::dm::Access::NEED_VIEW),
                        ),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::GeneratedCommandList as _,
                    rs_matter_crate::dm::Access::READ.union(rs_matter_crate::dm::Access::NEED_VIEW),
                    rs_matter_crate::dm::Quality::A,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::AcceptedCommandList as _,
                    rs_matter_crate::dm::Access::READ.union(rs_matter_crate::dm::Access::NEED_VIEW),
                    rs_matter_crate::dm::Quality::A,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::EventList as _,
                    rs_matter_crate::dm::Access::READ.union(rs_matter_crate::dm::Access::NEED_VIEW),
                    rs_matter_crate::dm::Quality::A,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::AttributeList as _,
                    rs_matter_crate::dm::Access::READ.union(rs_matter_crate::dm::Access::NEED_VIEW),
                    rs_matter_crate::dm::Quality::A,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::FeatureMap as _,
                    rs_matter_crate::dm::Access::READ.union(rs_matter_crate::dm::Access::NEED_VIEW),
                    rs_matter_crate::dm::Quality::NONE,
                ),
                rs_matter_crate::dm::Attribute::new(
                    AttributeId::ClusterRevision as _,
                    rs_matter_crate::dm::Access::READ.union(rs_matter_crate::dm::Access::NEED_VIEW),
                    rs_matter_crate::dm::Quality::NONE,
                ),
            ],
            &[
                rs_matter_crate::dm::Command::new(
                    CommandId::Test as _,
                    None,
                    rs_matter_crate::dm::Access::WO,
                ),
                rs_matter_crate::dm::Command::new(
                    CommandId::TestNotHandled as _,
                    None,
                    rs_matter_crate::dm::Access::WO,
                ),
                rs_matter_crate::dm::Command::new(
                    CommandId::TestSpecific as _,
                    Some(CommandResponseId::TestSpecificResponse as _),
                    rs_matter_crate::dm::Access::WO,
                ),
                rs_matter_crate::dm::Command::new(
                    CommandId::TestUnknownCommand as _,
                    None,
                    rs_matter_crate::dm::Access::WO,
                ),
                rs_matter_crate::dm::Command::new(
                    CommandId::TestAddArguments as _,
                    Some(CommandResponseId::TestAddArgumentsResponse as _),
                    rs_matter_crate::dm::Access::WO,
                ),
                rs_matter_crate::dm::Command::new(
                    CommandId::TestSimpleArgumentRequest as _,
                    Some(CommandResponseId::TestSimpleArgumentResponse as _),
                    rs_matter_crate::dm::Access::WO,
                ),
                rs_matter_crate::dm::Command::new(
                    CommandId::TestStructArrayArgumentRequest as _,
                    Some(CommandResponseId::TestStructArrayArgumentResponse as _),
                    rs_matter_crate::dm::Access::WO,
                ),
                rs_matter_crate::dm::Command::new(
                    CommandId::TestStructArgumentRequest as _,
                    Some(CommandResponseId::BooleanResponse as _),
                    rs_matter_crate::dm::Access::WO,
                ),
                rs_matter_crate::dm::Command::new(
                    CommandId::TestNestedStructArgumentRequest as _,
                    Some(CommandResponseId::BooleanResponse as _),
                    rs_matter_crate::dm::Access::WO,
                ),
                rs_matter_crate::dm::Command::new(
                    CommandId::TestListStructArgumentRequest as _,
                    Some(CommandResponseId::BooleanResponse as _),
                    rs_matter_crate::dm::Access::WO,
                ),
                rs_matter_crate::dm::Command::new(
                    CommandId::TestListInt8UArgumentRequest as _,
                    Some(CommandResponseId::BooleanResponse as _),
                    rs_matter_crate::dm::Access::WO,
                ),
                rs_matter_crate::dm::Command::new(
                    CommandId::TestNestedStructListArgumentRequest as _,
                    Some(CommandResponseId::BooleanResponse as _),
                    rs_matter_crate::dm::Access::WO,
                ),
                rs_matter_crate::dm::Command::new(
                    CommandId::TestListNestedStructListArgumentRequest as _,
                    Some(CommandResponseId::BooleanResponse as _),
                    rs_matter_crate::dm::Access::WO,
                ),
                rs_matter_crate::dm::Command::new(
                    CommandId::TestListInt8UReverseRequest as _,
                    Some(CommandResponseId::TestListInt8UReverseResponse as _),
                    rs_matter_crate::dm::Access::WO,
                ),
                rs_matter_crate::dm::Command::new(
                    CommandId::TestEnumsRequest as _,
                    Some(CommandResponseId::TestEnumsResponse as _),
                    rs_matter_crate::dm::Access::WO,
                ),
                rs_matter_crate::dm::Command::new(
                    CommandId::TestNullableOptionalRequest as _,
                    Some(CommandResponseId::TestNullableOptionalResponse as _),
                    rs_matter_crate::dm::Access::WO,
                ),
                rs_matter_crate::dm::Command::new(
                    CommandId::TestComplexNullableOptionalRequest as _,
                    Some(CommandResponseId::TestComplexNullableOptionalResponse as _),
                    rs_matter_crate::dm::Access::WO,
                ),
                rs_matter_crate::dm::Command::new(
                    CommandId::SimpleStructEchoRequest as _,
                    Some(CommandResponseId::SimpleStructResponse as _),
                    rs_matter_crate::dm::Access::WO,
                ),
                rs_matter_crate::dm::Command::new(
                    CommandId::TimedInvokeRequest as _,
                    None,
                    rs_matter_crate::dm::Access::WO.union(rs_matter_crate::dm::Access::TIMED_ONLY),
                ),
                rs_matter_crate::dm::Command::new(
                    CommandId::TestSimpleOptionalArgumentRequest as _,
                    None,
                    rs_matter_crate::dm::Access::WO,
                ),
                rs_matter_crate::dm::Command::new(
                    CommandId::TestEmitTestEventRequest as _,
                    Some(CommandResponseId::TestEmitTestEventResponse as _),
                    rs_matter_crate::dm::Access::WO,
                ),
                rs_matter_crate::dm::Command::new(
                    CommandId::TestEmitTestFabricScopedEventRequest as _,
                    Some(CommandResponseId::TestEmitTestFabricScopedEventResponse as _),
                    rs_matter_crate::dm::Access::WO,
                ),
                rs_matter_crate::dm::Command::new(
                    CommandId::TestBatchHelperRequest as _,
                    Some(CommandResponseId::TestBatchHelperResponse as _),
                    rs_matter_crate::dm::Access::WO,
                ),
                rs_matter_crate::dm::Command::new(
                    CommandId::TestSecondBatchHelperRequest as _,
                    Some(CommandResponseId::TestBatchHelperResponse as _),
                    rs_matter_crate::dm::Access::WO,
                ),
                rs_matter_crate::dm::Command::new(
                    CommandId::TestDifferentVendorMeiRequest as _,
                    Some(CommandResponseId::TestDifferentVendorMeiResponse as _),
                    rs_matter_crate::dm::Access::WO,
                ),
            ],
            |_, _, _| true,
            |_, _, _| true,
        );
    #[doc = "A helper struct to generate the cluster debug info."]
    struct MetadataDebug<T>(pub T);
    #[doc = "The handler trait for the cluster."]
    pub trait ClusterHandler {
        #[doc = "The cluster-metadata corresponding to this handler trait."]
        const CLUSTER: rs_matter_crate::dm::Cluster<'static>;
        fn dataver(&self) -> u32;
        fn dataver_changed(&self);
        fn boolean(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<bool, rs_matter_crate::error::Error>;
        fn bitmap_8(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<Bitmap8MaskMap, rs_matter_crate::error::Error>;
        fn bitmap_16(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<Bitmap16MaskMap, rs_matter_crate::error::Error>;
        fn bitmap_32(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<Bitmap32MaskMap, rs_matter_crate::error::Error>;
        fn bitmap_64(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<Bitmap64MaskMap, rs_matter_crate::error::Error>;
        fn int_8_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u8, rs_matter_crate::error::Error>;
        fn int_16_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u16, rs_matter_crate::error::Error>;
        fn int_24_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u32, rs_matter_crate::error::Error>;
        fn int_32_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u32, rs_matter_crate::error::Error>;
        fn int_40_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u64, rs_matter_crate::error::Error>;
        fn int_48_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u64, rs_matter_crate::error::Error>;
        fn int_56_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u64, rs_matter_crate::error::Error>;
        fn int_64_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u64, rs_matter_crate::error::Error>;
        fn int_8_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<i8, rs_matter_crate::error::Error>;
        fn int_16_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<i16, rs_matter_crate::error::Error>;
        fn int_24_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<i32, rs_matter_crate::error::Error>;
        fn int_32_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<i32, rs_matter_crate::error::Error>;
        fn int_40_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<i64, rs_matter_crate::error::Error>;
        fn int_48_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<i64, rs_matter_crate::error::Error>;
        fn int_56_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<i64, rs_matter_crate::error::Error>;
        fn int_64_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<i64, rs_matter_crate::error::Error>;
        fn enum_8(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u8, rs_matter_crate::error::Error>;
        fn enum_16(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u16, rs_matter_crate::error::Error>;
        fn float_single(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<f32, rs_matter_crate::error::Error>;
        fn float_double(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<f64, rs_matter_crate::error::Error>;
        fn octet_string<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
            builder: rs_matter_crate::tlv::OctetsBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn list_int_8_u<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
            builder: rs_matter_crate::dm::ArrayAttributeRead<
                rs_matter_crate::tlv::ToTLVArrayBuilder<P, u8>,
                rs_matter_crate::tlv::ToTLVBuilder<P, u8>,
            >,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn list_octet_string<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
            builder: rs_matter_crate::dm::ArrayAttributeRead<
                rs_matter_crate::tlv::OctetsArrayBuilder<P>,
                rs_matter_crate::tlv::OctetsBuilder<P>,
            >,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn list_struct_octet_string<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
            builder: rs_matter_crate::dm::ArrayAttributeRead<
                TestListStructOctetArrayBuilder<P>,
                TestListStructOctetBuilder<P>,
            >,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn long_octet_string<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
            builder: rs_matter_crate::tlv::OctetsBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn char_string<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
            builder: rs_matter_crate::tlv::Utf8StrBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn long_char_string<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
            builder: rs_matter_crate::tlv::Utf8StrBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn epoch_us(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u64, rs_matter_crate::error::Error>;
        fn epoch_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u32, rs_matter_crate::error::Error>;
        fn vendor_id(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u16, rs_matter_crate::error::Error>;
        fn list_nullables_and_optionals_struct<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
            builder: rs_matter_crate::dm::ArrayAttributeRead<
                NullablesAndOptionalsStructArrayBuilder<P>,
                NullablesAndOptionalsStructBuilder<P>,
            >,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn enum_attr(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<SimpleEnum, rs_matter_crate::error::Error>;
        fn struct_attr<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
            builder: SimpleStructBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn range_restricted_int_8_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u8, rs_matter_crate::error::Error>;
        fn range_restricted_int_8_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<i8, rs_matter_crate::error::Error>;
        fn range_restricted_int_16_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u16, rs_matter_crate::error::Error>;
        fn range_restricted_int_16_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<i16, rs_matter_crate::error::Error>;
        fn list_long_octet_string<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
            builder: rs_matter_crate::dm::ArrayAttributeRead<
                rs_matter_crate::tlv::OctetsArrayBuilder<P>,
                rs_matter_crate::tlv::OctetsBuilder<P>,
            >,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn list_fabric_scoped<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
            builder: rs_matter_crate::dm::ArrayAttributeRead<
                TestFabricScopedArrayBuilder<P>,
                TestFabricScopedBuilder<P>,
            >,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn timed_write_boolean(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<bool, rs_matter_crate::error::Error>;
        fn general_error_boolean(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<bool, rs_matter_crate::error::Error>;
        fn cluster_error_boolean(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<bool, rs_matter_crate::error::Error>;
        fn unsupported(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<bool, rs_matter_crate::error::Error> {
            Err(rs_matter_crate::error::ErrorCode::InvalidAction.into())
        }
        fn nullable_boolean(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<bool>, rs_matter_crate::error::Error>;
        fn nullable_bitmap_8(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<Bitmap8MaskMap>, rs_matter_crate::error::Error>;
        fn nullable_bitmap_16(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<Bitmap16MaskMap>, rs_matter_crate::error::Error>;
        fn nullable_bitmap_32(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<Bitmap32MaskMap>, rs_matter_crate::error::Error>;
        fn nullable_bitmap_64(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<Bitmap64MaskMap>, rs_matter_crate::error::Error>;
        fn nullable_int_8_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<u8>, rs_matter_crate::error::Error>;
        fn nullable_int_16_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<u16>, rs_matter_crate::error::Error>;
        fn nullable_int_24_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<u32>, rs_matter_crate::error::Error>;
        fn nullable_int_32_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<u32>, rs_matter_crate::error::Error>;
        fn nullable_int_40_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<u64>, rs_matter_crate::error::Error>;
        fn nullable_int_48_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<u64>, rs_matter_crate::error::Error>;
        fn nullable_int_56_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<u64>, rs_matter_crate::error::Error>;
        fn nullable_int_64_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<u64>, rs_matter_crate::error::Error>;
        fn nullable_int_8_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<i8>, rs_matter_crate::error::Error>;
        fn nullable_int_16_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<i16>, rs_matter_crate::error::Error>;
        fn nullable_int_24_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<i32>, rs_matter_crate::error::Error>;
        fn nullable_int_32_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<i32>, rs_matter_crate::error::Error>;
        fn nullable_int_40_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<i64>, rs_matter_crate::error::Error>;
        fn nullable_int_48_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<i64>, rs_matter_crate::error::Error>;
        fn nullable_int_56_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<i64>, rs_matter_crate::error::Error>;
        fn nullable_int_64_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<i64>, rs_matter_crate::error::Error>;
        fn nullable_enum_8(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<u8>, rs_matter_crate::error::Error>;
        fn nullable_enum_16(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<u16>, rs_matter_crate::error::Error>;
        fn nullable_float_single(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<f32>, rs_matter_crate::error::Error>;
        fn nullable_float_double(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<f64>, rs_matter_crate::error::Error>;
        fn nullable_octet_string<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
            builder: rs_matter_crate::tlv::NullableBuilder<
                P,
                rs_matter_crate::tlv::OctetsBuilder<P>,
            >,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn nullable_char_string<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
            builder: rs_matter_crate::tlv::NullableBuilder<
                P,
                rs_matter_crate::tlv::Utf8StrBuilder<P>,
            >,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn nullable_enum_attr(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<SimpleEnum>, rs_matter_crate::error::Error>;
        fn nullable_struct<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
            builder: rs_matter_crate::tlv::NullableBuilder<P, SimpleStructBuilder<P>>,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn nullable_range_restricted_int_8_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<u8>, rs_matter_crate::error::Error>;
        fn nullable_range_restricted_int_8_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<i8>, rs_matter_crate::error::Error>;
        fn nullable_range_restricted_int_16_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<u16>, rs_matter_crate::error::Error>;
        fn nullable_range_restricted_int_16_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<i16>, rs_matter_crate::error::Error>;
        fn write_only_int_8_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u8, rs_matter_crate::error::Error> {
            Err(rs_matter_crate::error::ErrorCode::InvalidAction.into())
        }
        fn mei_int_8_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u8, rs_matter_crate::error::Error>;
        fn set_boolean(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: bool,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_bitmap_8(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: Bitmap8MaskMap,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_bitmap_16(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: Bitmap16MaskMap,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_bitmap_32(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: Bitmap32MaskMap,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_bitmap_64(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: Bitmap64MaskMap,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_int_8_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u8,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_int_16_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u16,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_int_24_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u32,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_int_32_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u32,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_int_40_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u64,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_int_48_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u64,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_int_56_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u64,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_int_64_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u64,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_int_8_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: i8,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_int_16_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: i16,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_int_24_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: i32,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_int_32_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: i32,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_int_40_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: i64,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_int_48_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: i64,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_int_56_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: i64,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_int_64_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: i64,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_enum_8(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u8,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_enum_16(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u16,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_float_single(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: f32,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_float_double(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: f64,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_octet_string(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::OctetStr<'_>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_list_int_8_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::dm::ArrayAttributeWrite<
                rs_matter_crate::tlv::TLVArray<'_, u8>,
                u8,
            >,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_list_octet_string(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::dm::ArrayAttributeWrite<
                rs_matter_crate::tlv::TLVArray<'_, rs_matter_crate::tlv::OctetStr<'_>>,
                rs_matter_crate::tlv::OctetStr<'_>,
            >,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_list_struct_octet_string(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::dm::ArrayAttributeWrite<
                rs_matter_crate::tlv::TLVArray<'_, TestListStructOctet<'_>>,
                TestListStructOctet<'_>,
            >,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_long_octet_string(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::OctetStr<'_>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_char_string(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Utf8Str<'_>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_long_char_string(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Utf8Str<'_>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_epoch_us(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u64,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_epoch_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u32,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_vendor_id(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u16,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_list_nullables_and_optionals_struct(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::dm::ArrayAttributeWrite<
                rs_matter_crate::tlv::TLVArray<'_, NullablesAndOptionalsStruct<'_>>,
                NullablesAndOptionalsStruct<'_>,
            >,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_enum_attr(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: SimpleEnum,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_struct_attr(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: SimpleStruct<'_>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_range_restricted_int_8_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u8,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_range_restricted_int_8_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: i8,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_range_restricted_int_16_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u16,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_range_restricted_int_16_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: i16,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_list_long_octet_string(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::dm::ArrayAttributeWrite<
                rs_matter_crate::tlv::TLVArray<'_, rs_matter_crate::tlv::OctetStr<'_>>,
                rs_matter_crate::tlv::OctetStr<'_>,
            >,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_list_fabric_scoped(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::dm::ArrayAttributeWrite<
                rs_matter_crate::tlv::TLVArray<'_, TestFabricScoped<'_>>,
                TestFabricScoped<'_>,
            >,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_timed_write_boolean(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: bool,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_general_error_boolean(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: bool,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_cluster_error_boolean(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: bool,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_unsupported(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: bool,
        ) -> Result<(), rs_matter_crate::error::Error> {
            Err(rs_matter_crate::error::ErrorCode::InvalidAction.into())
        }
        fn set_nullable_boolean(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<bool>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_bitmap_8(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<Bitmap8MaskMap>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_bitmap_16(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<Bitmap16MaskMap>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_bitmap_32(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<Bitmap32MaskMap>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_bitmap_64(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<Bitmap64MaskMap>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_int_8_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<u8>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_int_16_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<u16>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_int_24_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<u32>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_int_32_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<u32>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_int_40_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<u64>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_int_48_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<u64>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_int_56_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<u64>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_int_64_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<u64>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_int_8_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<i8>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_int_16_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<i16>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_int_24_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<i32>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_int_32_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<i32>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_int_40_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<i64>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_int_48_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<i64>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_int_56_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<i64>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_int_64_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<i64>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_enum_8(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<u8>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_enum_16(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<u16>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_float_single(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<f32>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_float_double(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<f64>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_octet_string(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<rs_matter_crate::tlv::OctetStr<'_>>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_char_string(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<rs_matter_crate::tlv::Utf8Str<'_>>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_enum_attr(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<SimpleEnum>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_struct(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<SimpleStruct<'_>>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_range_restricted_int_8_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<u8>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_range_restricted_int_8_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<i8>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_range_restricted_int_16_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<u16>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_nullable_range_restricted_int_16_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<i16>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn set_write_only_int_8_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u8,
        ) -> Result<(), rs_matter_crate::error::Error> {
            Err(rs_matter_crate::error::ErrorCode::InvalidAction.into())
        }
        fn set_mei_int_8_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u8,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn handle_test(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn handle_test_not_handled(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn handle_test_specific<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            response: TestSpecificResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn handle_test_unknown_command(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn handle_test_add_arguments<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestAddArgumentsRequest<'_>,
            response: TestAddArgumentsResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn handle_test_simple_argument_request<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestSimpleArgumentRequestRequest<'_>,
            response: TestSimpleArgumentResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn handle_test_struct_array_argument_request<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestStructArrayArgumentRequestRequest<'_>,
            response: TestStructArrayArgumentResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn handle_test_struct_argument_request<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestStructArgumentRequestRequest<'_>,
            response: BooleanResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn handle_test_nested_struct_argument_request<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestNestedStructArgumentRequestRequest<'_>,
            response: BooleanResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn handle_test_list_struct_argument_request<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestListStructArgumentRequestRequest<'_>,
            response: BooleanResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn handle_test_list_int_8_u_argument_request<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestListInt8UArgumentRequestRequest<'_>,
            response: BooleanResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn handle_test_nested_struct_list_argument_request<
            P: rs_matter_crate::tlv::TLVBuilderParent,
        >(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestNestedStructListArgumentRequestRequest<'_>,
            response: BooleanResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn handle_test_list_nested_struct_list_argument_request<
            P: rs_matter_crate::tlv::TLVBuilderParent,
        >(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestListNestedStructListArgumentRequestRequest<'_>,
            response: BooleanResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn handle_test_list_int_8_u_reverse_request<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestListInt8UReverseRequestRequest<'_>,
            response: TestListInt8UReverseResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn handle_test_enums_request<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestEnumsRequestRequest<'_>,
            response: TestEnumsResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn handle_test_nullable_optional_request<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestNullableOptionalRequestRequest<'_>,
            response: TestNullableOptionalResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn handle_test_complex_nullable_optional_request<
            P: rs_matter_crate::tlv::TLVBuilderParent,
        >(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestComplexNullableOptionalRequestRequest<'_>,
            response: TestComplexNullableOptionalResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn handle_simple_struct_echo_request<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: SimpleStructEchoRequestRequest<'_>,
            response: SimpleStructResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn handle_timed_invoke_request(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn handle_test_simple_optional_argument_request(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestSimpleOptionalArgumentRequestRequest<'_>,
        ) -> Result<(), rs_matter_crate::error::Error>;
        fn handle_test_emit_test_event_request<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestEmitTestEventRequestRequest<'_>,
            response: TestEmitTestEventResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn handle_test_emit_test_fabric_scoped_event_request<
            P: rs_matter_crate::tlv::TLVBuilderParent,
        >(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestEmitTestFabricScopedEventRequestRequest<'_>,
            response: TestEmitTestFabricScopedEventResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn handle_test_batch_helper_request<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestBatchHelperRequestRequest<'_>,
            response: TestBatchHelperResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn handle_test_second_batch_helper_request<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestSecondBatchHelperRequestRequest<'_>,
            response: TestBatchHelperResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error>;
        fn handle_test_different_vendor_mei_request<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestDifferentVendorMeiRequestRequest<'_>,
            response: TestDifferentVendorMeiResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error>;
    }
    impl<T> ClusterHandler for &T
    where
        T: ClusterHandler,
    {
        const CLUSTER: rs_matter_crate::dm::Cluster<'static> = T::CLUSTER;
        fn dataver(&self) -> u32 {
            T::dataver(self)
        }
        fn dataver_changed(&self) {
            T::dataver_changed(self)
        }
        fn boolean(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<bool, rs_matter_crate::error::Error> {
            T::boolean(self, ctx)
        }
        fn bitmap_8(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<Bitmap8MaskMap, rs_matter_crate::error::Error> {
            T::bitmap_8(self, ctx)
        }
        fn bitmap_16(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<Bitmap16MaskMap, rs_matter_crate::error::Error> {
            T::bitmap_16(self, ctx)
        }
        fn bitmap_32(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<Bitmap32MaskMap, rs_matter_crate::error::Error> {
            T::bitmap_32(self, ctx)
        }
        fn bitmap_64(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<Bitmap64MaskMap, rs_matter_crate::error::Error> {
            T::bitmap_64(self, ctx)
        }
        fn int_8_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u8, rs_matter_crate::error::Error> {
            T::int_8_u(self, ctx)
        }
        fn int_16_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u16, rs_matter_crate::error::Error> {
            T::int_16_u(self, ctx)
        }
        fn int_24_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u32, rs_matter_crate::error::Error> {
            T::int_24_u(self, ctx)
        }
        fn int_32_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u32, rs_matter_crate::error::Error> {
            T::int_32_u(self, ctx)
        }
        fn int_40_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u64, rs_matter_crate::error::Error> {
            T::int_40_u(self, ctx)
        }
        fn int_48_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u64, rs_matter_crate::error::Error> {
            T::int_48_u(self, ctx)
        }
        fn int_56_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u64, rs_matter_crate::error::Error> {
            T::int_56_u(self, ctx)
        }
        fn int_64_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u64, rs_matter_crate::error::Error> {
            T::int_64_u(self, ctx)
        }
        fn int_8_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<i8, rs_matter_crate::error::Error> {
            T::int_8_s(self, ctx)
        }
        fn int_16_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<i16, rs_matter_crate::error::Error> {
            T::int_16_s(self, ctx)
        }
        fn int_24_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<i32, rs_matter_crate::error::Error> {
            T::int_24_s(self, ctx)
        }
        fn int_32_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<i32, rs_matter_crate::error::Error> {
            T::int_32_s(self, ctx)
        }
        fn int_40_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<i64, rs_matter_crate::error::Error> {
            T::int_40_s(self, ctx)
        }
        fn int_48_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<i64, rs_matter_crate::error::Error> {
            T::int_48_s(self, ctx)
        }
        fn int_56_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<i64, rs_matter_crate::error::Error> {
            T::int_56_s(self, ctx)
        }
        fn int_64_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<i64, rs_matter_crate::error::Error> {
            T::int_64_s(self, ctx)
        }
        fn enum_8(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u8, rs_matter_crate::error::Error> {
            T::enum_8(self, ctx)
        }
        fn enum_16(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u16, rs_matter_crate::error::Error> {
            T::enum_16(self, ctx)
        }
        fn float_single(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<f32, rs_matter_crate::error::Error> {
            T::float_single(self, ctx)
        }
        fn float_double(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<f64, rs_matter_crate::error::Error> {
            T::float_double(self, ctx)
        }
        fn octet_string<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
            builder: rs_matter_crate::tlv::OctetsBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::octet_string(self, ctx, builder)
        }
        fn list_int_8_u<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
            builder: rs_matter_crate::dm::ArrayAttributeRead<
                rs_matter_crate::tlv::ToTLVArrayBuilder<P, u8>,
                rs_matter_crate::tlv::ToTLVBuilder<P, u8>,
            >,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::list_int_8_u(self, ctx, builder)
        }
        fn list_octet_string<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
            builder: rs_matter_crate::dm::ArrayAttributeRead<
                rs_matter_crate::tlv::OctetsArrayBuilder<P>,
                rs_matter_crate::tlv::OctetsBuilder<P>,
            >,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::list_octet_string(self, ctx, builder)
        }
        fn list_struct_octet_string<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
            builder: rs_matter_crate::dm::ArrayAttributeRead<
                TestListStructOctetArrayBuilder<P>,
                TestListStructOctetBuilder<P>,
            >,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::list_struct_octet_string(self, ctx, builder)
        }
        fn long_octet_string<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
            builder: rs_matter_crate::tlv::OctetsBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::long_octet_string(self, ctx, builder)
        }
        fn char_string<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
            builder: rs_matter_crate::tlv::Utf8StrBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::char_string(self, ctx, builder)
        }
        fn long_char_string<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
            builder: rs_matter_crate::tlv::Utf8StrBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::long_char_string(self, ctx, builder)
        }
        fn epoch_us(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u64, rs_matter_crate::error::Error> {
            T::epoch_us(self, ctx)
        }
        fn epoch_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u32, rs_matter_crate::error::Error> {
            T::epoch_s(self, ctx)
        }
        fn vendor_id(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u16, rs_matter_crate::error::Error> {
            T::vendor_id(self, ctx)
        }
        fn list_nullables_and_optionals_struct<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
            builder: rs_matter_crate::dm::ArrayAttributeRead<
                NullablesAndOptionalsStructArrayBuilder<P>,
                NullablesAndOptionalsStructBuilder<P>,
            >,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::list_nullables_and_optionals_struct(self, ctx, builder)
        }
        fn enum_attr(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<SimpleEnum, rs_matter_crate::error::Error> {
            T::enum_attr(self, ctx)
        }
        fn struct_attr<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
            builder: SimpleStructBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::struct_attr(self, ctx, builder)
        }
        fn range_restricted_int_8_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u8, rs_matter_crate::error::Error> {
            T::range_restricted_int_8_u(self, ctx)
        }
        fn range_restricted_int_8_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<i8, rs_matter_crate::error::Error> {
            T::range_restricted_int_8_s(self, ctx)
        }
        fn range_restricted_int_16_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u16, rs_matter_crate::error::Error> {
            T::range_restricted_int_16_u(self, ctx)
        }
        fn range_restricted_int_16_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<i16, rs_matter_crate::error::Error> {
            T::range_restricted_int_16_s(self, ctx)
        }
        fn list_long_octet_string<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
            builder: rs_matter_crate::dm::ArrayAttributeRead<
                rs_matter_crate::tlv::OctetsArrayBuilder<P>,
                rs_matter_crate::tlv::OctetsBuilder<P>,
            >,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::list_long_octet_string(self, ctx, builder)
        }
        fn list_fabric_scoped<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
            builder: rs_matter_crate::dm::ArrayAttributeRead<
                TestFabricScopedArrayBuilder<P>,
                TestFabricScopedBuilder<P>,
            >,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::list_fabric_scoped(self, ctx, builder)
        }
        fn timed_write_boolean(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<bool, rs_matter_crate::error::Error> {
            T::timed_write_boolean(self, ctx)
        }
        fn general_error_boolean(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<bool, rs_matter_crate::error::Error> {
            T::general_error_boolean(self, ctx)
        }
        fn cluster_error_boolean(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<bool, rs_matter_crate::error::Error> {
            T::cluster_error_boolean(self, ctx)
        }
        fn unsupported(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<bool, rs_matter_crate::error::Error> {
            T::unsupported(self, ctx)
        }
        fn nullable_boolean(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<bool>, rs_matter_crate::error::Error> {
            T::nullable_boolean(self, ctx)
        }
        fn nullable_bitmap_8(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<Bitmap8MaskMap>, rs_matter_crate::error::Error>
        {
            T::nullable_bitmap_8(self, ctx)
        }
        fn nullable_bitmap_16(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<Bitmap16MaskMap>, rs_matter_crate::error::Error>
        {
            T::nullable_bitmap_16(self, ctx)
        }
        fn nullable_bitmap_32(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<Bitmap32MaskMap>, rs_matter_crate::error::Error>
        {
            T::nullable_bitmap_32(self, ctx)
        }
        fn nullable_bitmap_64(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<Bitmap64MaskMap>, rs_matter_crate::error::Error>
        {
            T::nullable_bitmap_64(self, ctx)
        }
        fn nullable_int_8_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<u8>, rs_matter_crate::error::Error> {
            T::nullable_int_8_u(self, ctx)
        }
        fn nullable_int_16_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<u16>, rs_matter_crate::error::Error> {
            T::nullable_int_16_u(self, ctx)
        }
        fn nullable_int_24_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<u32>, rs_matter_crate::error::Error> {
            T::nullable_int_24_u(self, ctx)
        }
        fn nullable_int_32_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<u32>, rs_matter_crate::error::Error> {
            T::nullable_int_32_u(self, ctx)
        }
        fn nullable_int_40_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<u64>, rs_matter_crate::error::Error> {
            T::nullable_int_40_u(self, ctx)
        }
        fn nullable_int_48_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<u64>, rs_matter_crate::error::Error> {
            T::nullable_int_48_u(self, ctx)
        }
        fn nullable_int_56_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<u64>, rs_matter_crate::error::Error> {
            T::nullable_int_56_u(self, ctx)
        }
        fn nullable_int_64_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<u64>, rs_matter_crate::error::Error> {
            T::nullable_int_64_u(self, ctx)
        }
        fn nullable_int_8_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<i8>, rs_matter_crate::error::Error> {
            T::nullable_int_8_s(self, ctx)
        }
        fn nullable_int_16_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<i16>, rs_matter_crate::error::Error> {
            T::nullable_int_16_s(self, ctx)
        }
        fn nullable_int_24_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<i32>, rs_matter_crate::error::Error> {
            T::nullable_int_24_s(self, ctx)
        }
        fn nullable_int_32_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<i32>, rs_matter_crate::error::Error> {
            T::nullable_int_32_s(self, ctx)
        }
        fn nullable_int_40_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<i64>, rs_matter_crate::error::Error> {
            T::nullable_int_40_s(self, ctx)
        }
        fn nullable_int_48_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<i64>, rs_matter_crate::error::Error> {
            T::nullable_int_48_s(self, ctx)
        }
        fn nullable_int_56_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<i64>, rs_matter_crate::error::Error> {
            T::nullable_int_56_s(self, ctx)
        }
        fn nullable_int_64_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<i64>, rs_matter_crate::error::Error> {
            T::nullable_int_64_s(self, ctx)
        }
        fn nullable_enum_8(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<u8>, rs_matter_crate::error::Error> {
            T::nullable_enum_8(self, ctx)
        }
        fn nullable_enum_16(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<u16>, rs_matter_crate::error::Error> {
            T::nullable_enum_16(self, ctx)
        }
        fn nullable_float_single(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<f32>, rs_matter_crate::error::Error> {
            T::nullable_float_single(self, ctx)
        }
        fn nullable_float_double(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<f64>, rs_matter_crate::error::Error> {
            T::nullable_float_double(self, ctx)
        }
        fn nullable_octet_string<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
            builder: rs_matter_crate::tlv::NullableBuilder<
                P,
                rs_matter_crate::tlv::OctetsBuilder<P>,
            >,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::nullable_octet_string(self, ctx, builder)
        }
        fn nullable_char_string<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
            builder: rs_matter_crate::tlv::NullableBuilder<
                P,
                rs_matter_crate::tlv::Utf8StrBuilder<P>,
            >,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::nullable_char_string(self, ctx, builder)
        }
        fn nullable_enum_attr(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<SimpleEnum>, rs_matter_crate::error::Error>
        {
            T::nullable_enum_attr(self, ctx)
        }
        fn nullable_struct<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
            builder: rs_matter_crate::tlv::NullableBuilder<P, SimpleStructBuilder<P>>,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::nullable_struct(self, ctx, builder)
        }
        fn nullable_range_restricted_int_8_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<u8>, rs_matter_crate::error::Error> {
            T::nullable_range_restricted_int_8_u(self, ctx)
        }
        fn nullable_range_restricted_int_8_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<i8>, rs_matter_crate::error::Error> {
            T::nullable_range_restricted_int_8_s(self, ctx)
        }
        fn nullable_range_restricted_int_16_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<u16>, rs_matter_crate::error::Error> {
            T::nullable_range_restricted_int_16_u(self, ctx)
        }
        fn nullable_range_restricted_int_16_s(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<rs_matter_crate::tlv::Nullable<i16>, rs_matter_crate::error::Error> {
            T::nullable_range_restricted_int_16_s(self, ctx)
        }
        fn write_only_int_8_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u8, rs_matter_crate::error::Error> {
            T::write_only_int_8_u(self, ctx)
        }
        fn mei_int_8_u(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
        ) -> Result<u8, rs_matter_crate::error::Error> {
            T::mei_int_8_u(self, ctx)
        }
        fn set_boolean(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: bool,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_boolean(self, ctx, value)
        }
        fn set_bitmap_8(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: Bitmap8MaskMap,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_bitmap_8(self, ctx, value)
        }
        fn set_bitmap_16(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: Bitmap16MaskMap,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_bitmap_16(self, ctx, value)
        }
        fn set_bitmap_32(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: Bitmap32MaskMap,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_bitmap_32(self, ctx, value)
        }
        fn set_bitmap_64(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: Bitmap64MaskMap,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_bitmap_64(self, ctx, value)
        }
        fn set_int_8_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u8,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_int_8_u(self, ctx, value)
        }
        fn set_int_16_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u16,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_int_16_u(self, ctx, value)
        }
        fn set_int_24_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u32,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_int_24_u(self, ctx, value)
        }
        fn set_int_32_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u32,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_int_32_u(self, ctx, value)
        }
        fn set_int_40_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u64,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_int_40_u(self, ctx, value)
        }
        fn set_int_48_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u64,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_int_48_u(self, ctx, value)
        }
        fn set_int_56_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u64,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_int_56_u(self, ctx, value)
        }
        fn set_int_64_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u64,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_int_64_u(self, ctx, value)
        }
        fn set_int_8_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: i8,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_int_8_s(self, ctx, value)
        }
        fn set_int_16_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: i16,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_int_16_s(self, ctx, value)
        }
        fn set_int_24_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: i32,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_int_24_s(self, ctx, value)
        }
        fn set_int_32_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: i32,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_int_32_s(self, ctx, value)
        }
        fn set_int_40_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: i64,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_int_40_s(self, ctx, value)
        }
        fn set_int_48_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: i64,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_int_48_s(self, ctx, value)
        }
        fn set_int_56_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: i64,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_int_56_s(self, ctx, value)
        }
        fn set_int_64_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: i64,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_int_64_s(self, ctx, value)
        }
        fn set_enum_8(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u8,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_enum_8(self, ctx, value)
        }
        fn set_enum_16(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u16,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_enum_16(self, ctx, value)
        }
        fn set_float_single(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: f32,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_float_single(self, ctx, value)
        }
        fn set_float_double(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: f64,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_float_double(self, ctx, value)
        }
        fn set_octet_string(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::OctetStr<'_>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_octet_string(self, ctx, value)
        }
        fn set_list_int_8_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::dm::ArrayAttributeWrite<
                rs_matter_crate::tlv::TLVArray<'_, u8>,
                u8,
            >,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_list_int_8_u(self, ctx, value)
        }
        fn set_list_octet_string(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::dm::ArrayAttributeWrite<
                rs_matter_crate::tlv::TLVArray<'_, rs_matter_crate::tlv::OctetStr<'_>>,
                rs_matter_crate::tlv::OctetStr<'_>,
            >,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_list_octet_string(self, ctx, value)
        }
        fn set_list_struct_octet_string(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::dm::ArrayAttributeWrite<
                rs_matter_crate::tlv::TLVArray<'_, TestListStructOctet<'_>>,
                TestListStructOctet<'_>,
            >,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_list_struct_octet_string(self, ctx, value)
        }
        fn set_long_octet_string(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::OctetStr<'_>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_long_octet_string(self, ctx, value)
        }
        fn set_char_string(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Utf8Str<'_>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_char_string(self, ctx, value)
        }
        fn set_long_char_string(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Utf8Str<'_>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_long_char_string(self, ctx, value)
        }
        fn set_epoch_us(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u64,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_epoch_us(self, ctx, value)
        }
        fn set_epoch_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u32,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_epoch_s(self, ctx, value)
        }
        fn set_vendor_id(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u16,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_vendor_id(self, ctx, value)
        }
        fn set_list_nullables_and_optionals_struct(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::dm::ArrayAttributeWrite<
                rs_matter_crate::tlv::TLVArray<'_, NullablesAndOptionalsStruct<'_>>,
                NullablesAndOptionalsStruct<'_>,
            >,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_list_nullables_and_optionals_struct(self, ctx, value)
        }
        fn set_enum_attr(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: SimpleEnum,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_enum_attr(self, ctx, value)
        }
        fn set_struct_attr(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: SimpleStruct<'_>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_struct_attr(self, ctx, value)
        }
        fn set_range_restricted_int_8_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u8,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_range_restricted_int_8_u(self, ctx, value)
        }
        fn set_range_restricted_int_8_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: i8,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_range_restricted_int_8_s(self, ctx, value)
        }
        fn set_range_restricted_int_16_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u16,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_range_restricted_int_16_u(self, ctx, value)
        }
        fn set_range_restricted_int_16_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: i16,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_range_restricted_int_16_s(self, ctx, value)
        }
        fn set_list_long_octet_string(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::dm::ArrayAttributeWrite<
                rs_matter_crate::tlv::TLVArray<'_, rs_matter_crate::tlv::OctetStr<'_>>,
                rs_matter_crate::tlv::OctetStr<'_>,
            >,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_list_long_octet_string(self, ctx, value)
        }
        fn set_list_fabric_scoped(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::dm::ArrayAttributeWrite<
                rs_matter_crate::tlv::TLVArray<'_, TestFabricScoped<'_>>,
                TestFabricScoped<'_>,
            >,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_list_fabric_scoped(self, ctx, value)
        }
        fn set_timed_write_boolean(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: bool,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_timed_write_boolean(self, ctx, value)
        }
        fn set_general_error_boolean(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: bool,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_general_error_boolean(self, ctx, value)
        }
        fn set_cluster_error_boolean(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: bool,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_cluster_error_boolean(self, ctx, value)
        }
        fn set_unsupported(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: bool,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_unsupported(self, ctx, value)
        }
        fn set_nullable_boolean(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<bool>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_boolean(self, ctx, value)
        }
        fn set_nullable_bitmap_8(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<Bitmap8MaskMap>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_bitmap_8(self, ctx, value)
        }
        fn set_nullable_bitmap_16(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<Bitmap16MaskMap>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_bitmap_16(self, ctx, value)
        }
        fn set_nullable_bitmap_32(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<Bitmap32MaskMap>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_bitmap_32(self, ctx, value)
        }
        fn set_nullable_bitmap_64(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<Bitmap64MaskMap>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_bitmap_64(self, ctx, value)
        }
        fn set_nullable_int_8_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<u8>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_int_8_u(self, ctx, value)
        }
        fn set_nullable_int_16_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<u16>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_int_16_u(self, ctx, value)
        }
        fn set_nullable_int_24_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<u32>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_int_24_u(self, ctx, value)
        }
        fn set_nullable_int_32_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<u32>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_int_32_u(self, ctx, value)
        }
        fn set_nullable_int_40_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<u64>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_int_40_u(self, ctx, value)
        }
        fn set_nullable_int_48_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<u64>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_int_48_u(self, ctx, value)
        }
        fn set_nullable_int_56_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<u64>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_int_56_u(self, ctx, value)
        }
        fn set_nullable_int_64_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<u64>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_int_64_u(self, ctx, value)
        }
        fn set_nullable_int_8_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<i8>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_int_8_s(self, ctx, value)
        }
        fn set_nullable_int_16_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<i16>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_int_16_s(self, ctx, value)
        }
        fn set_nullable_int_24_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<i32>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_int_24_s(self, ctx, value)
        }
        fn set_nullable_int_32_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<i32>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_int_32_s(self, ctx, value)
        }
        fn set_nullable_int_40_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<i64>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_int_40_s(self, ctx, value)
        }
        fn set_nullable_int_48_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<i64>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_int_48_s(self, ctx, value)
        }
        fn set_nullable_int_56_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<i64>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_int_56_s(self, ctx, value)
        }
        fn set_nullable_int_64_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<i64>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_int_64_s(self, ctx, value)
        }
        fn set_nullable_enum_8(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<u8>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_enum_8(self, ctx, value)
        }
        fn set_nullable_enum_16(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<u16>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_enum_16(self, ctx, value)
        }
        fn set_nullable_float_single(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<f32>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_float_single(self, ctx, value)
        }
        fn set_nullable_float_double(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<f64>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_float_double(self, ctx, value)
        }
        fn set_nullable_octet_string(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<rs_matter_crate::tlv::OctetStr<'_>>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_octet_string(self, ctx, value)
        }
        fn set_nullable_char_string(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<rs_matter_crate::tlv::Utf8Str<'_>>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_char_string(self, ctx, value)
        }
        fn set_nullable_enum_attr(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<SimpleEnum>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_enum_attr(self, ctx, value)
        }
        fn set_nullable_struct(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<SimpleStruct<'_>>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_struct(self, ctx, value)
        }
        fn set_nullable_range_restricted_int_8_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<u8>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_range_restricted_int_8_u(self, ctx, value)
        }
        fn set_nullable_range_restricted_int_8_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<i8>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_range_restricted_int_8_s(self, ctx, value)
        }
        fn set_nullable_range_restricted_int_16_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<u16>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_range_restricted_int_16_u(self, ctx, value)
        }
        fn set_nullable_range_restricted_int_16_s(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: rs_matter_crate::tlv::Nullable<i16>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_nullable_range_restricted_int_16_s(self, ctx, value)
        }
        fn set_write_only_int_8_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u8,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_write_only_int_8_u(self, ctx, value)
        }
        fn set_mei_int_8_u(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
            value: u8,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::set_mei_int_8_u(self, ctx, value)
        }
        fn handle_test(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::handle_test(self, ctx)
        }
        fn handle_test_not_handled(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::handle_test_not_handled(self, ctx)
        }
        fn handle_test_specific<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            response: TestSpecificResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::handle_test_specific(self, ctx, response)
        }
        fn handle_test_unknown_command(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::handle_test_unknown_command(self, ctx)
        }
        fn handle_test_add_arguments<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestAddArgumentsRequest<'_>,
            response: TestAddArgumentsResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::handle_test_add_arguments(self, ctx, request, response)
        }
        fn handle_test_simple_argument_request<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestSimpleArgumentRequestRequest<'_>,
            response: TestSimpleArgumentResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::handle_test_simple_argument_request(self, ctx, request, response)
        }
        fn handle_test_struct_array_argument_request<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestStructArrayArgumentRequestRequest<'_>,
            response: TestStructArrayArgumentResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::handle_test_struct_array_argument_request(self, ctx, request, response)
        }
        fn handle_test_struct_argument_request<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestStructArgumentRequestRequest<'_>,
            response: BooleanResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::handle_test_struct_argument_request(self, ctx, request, response)
        }
        fn handle_test_nested_struct_argument_request<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestNestedStructArgumentRequestRequest<'_>,
            response: BooleanResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::handle_test_nested_struct_argument_request(self, ctx, request, response)
        }
        fn handle_test_list_struct_argument_request<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestListStructArgumentRequestRequest<'_>,
            response: BooleanResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::handle_test_list_struct_argument_request(self, ctx, request, response)
        }
        fn handle_test_list_int_8_u_argument_request<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestListInt8UArgumentRequestRequest<'_>,
            response: BooleanResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::handle_test_list_int_8_u_argument_request(self, ctx, request, response)
        }
        fn handle_test_nested_struct_list_argument_request<
            P: rs_matter_crate::tlv::TLVBuilderParent,
        >(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestNestedStructListArgumentRequestRequest<'_>,
            response: BooleanResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::handle_test_nested_struct_list_argument_request(self, ctx, request, response)
        }
        fn handle_test_list_nested_struct_list_argument_request<
            P: rs_matter_crate::tlv::TLVBuilderParent,
        >(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestListNestedStructListArgumentRequestRequest<'_>,
            response: BooleanResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::handle_test_list_nested_struct_list_argument_request(self, ctx, request, response)
        }
        fn handle_test_list_int_8_u_reverse_request<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestListInt8UReverseRequestRequest<'_>,
            response: TestListInt8UReverseResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::handle_test_list_int_8_u_reverse_request(self, ctx, request, response)
        }
        fn handle_test_enums_request<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestEnumsRequestRequest<'_>,
            response: TestEnumsResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::handle_test_enums_request(self, ctx, request, response)
        }
        fn handle_test_nullable_optional_request<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestNullableOptionalRequestRequest<'_>,
            response: TestNullableOptionalResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::handle_test_nullable_optional_request(self, ctx, request, response)
        }
        fn handle_test_complex_nullable_optional_request<
            P: rs_matter_crate::tlv::TLVBuilderParent,
        >(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestComplexNullableOptionalRequestRequest<'_>,
            response: TestComplexNullableOptionalResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::handle_test_complex_nullable_optional_request(self, ctx, request, response)
        }
        fn handle_simple_struct_echo_request<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: SimpleStructEchoRequestRequest<'_>,
            response: SimpleStructResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::handle_simple_struct_echo_request(self, ctx, request, response)
        }
        fn handle_timed_invoke_request(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::handle_timed_invoke_request(self, ctx)
        }
        fn handle_test_simple_optional_argument_request(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestSimpleOptionalArgumentRequestRequest<'_>,
        ) -> Result<(), rs_matter_crate::error::Error> {
            T::handle_test_simple_optional_argument_request(self, ctx, request)
        }
        fn handle_test_emit_test_event_request<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestEmitTestEventRequestRequest<'_>,
            response: TestEmitTestEventResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::handle_test_emit_test_event_request(self, ctx, request, response)
        }
        fn handle_test_emit_test_fabric_scoped_event_request<
            P: rs_matter_crate::tlv::TLVBuilderParent,
        >(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestEmitTestFabricScopedEventRequestRequest<'_>,
            response: TestEmitTestFabricScopedEventResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::handle_test_emit_test_fabric_scoped_event_request(self, ctx, request, response)
        }
        fn handle_test_batch_helper_request<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestBatchHelperRequestRequest<'_>,
            response: TestBatchHelperResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::handle_test_batch_helper_request(self, ctx, request, response)
        }
        fn handle_test_second_batch_helper_request<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestSecondBatchHelperRequestRequest<'_>,
            response: TestBatchHelperResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::handle_test_second_batch_helper_request(self, ctx, request, response)
        }
        fn handle_test_different_vendor_mei_request<P: rs_matter_crate::tlv::TLVBuilderParent>(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            request: TestDifferentVendorMeiRequestRequest<'_>,
            response: TestDifferentVendorMeiResponseBuilder<P>,
        ) -> Result<P, rs_matter_crate::error::Error> {
            T::handle_test_different_vendor_mei_request(self, ctx, request, response)
        }
    }
    #[doc = "The handler adaptor for the cluster-specific handler. This adaptor implements the generic `rs-matter` handler trait."]
    #[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
    #[cfg_attr(feature = "defmt", derive(rs_matter_crate::reexport::defmt::Format))]
    pub struct HandlerAdaptor<T>(pub T);
    impl<T> rs_matter_crate::dm::Handler for HandlerAdaptor<T>
    where
        T: ClusterHandler,
    {
        #[allow(unreachable_code)]
        fn read(
            &self,
            ctx: impl rs_matter_crate::dm::ReadContext,
            reply: impl rs_matter_crate::dm::ReadReply,
        ) -> Result<(), rs_matter_crate::error::Error> {
            if let Some(mut writer) = reply.with_dataver(self.0.dataver())? {
                if ctx.attr().is_system() {
                    ctx.attr().cluster()?.read(ctx.attr(), writer)
                } else {
                    match AttributeId::try_from(ctx.attr().attr_id)? {
                        AttributeId::Boolean => {
                            let attr_read_result = self.0.boolean(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Boolean, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Boolean, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::Bitmap8 => {
                            let attr_read_result = self.0.bitmap_8(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Bitmap8, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Bitmap8, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::Bitmap16 => {
                            let attr_read_result = self.0.bitmap_16(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Bitmap16, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Bitmap16, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::Bitmap32 => {
                            let attr_read_result = self.0.bitmap_32(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Bitmap32, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Bitmap32, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::Bitmap64 => {
                            let attr_read_result = self.0.bitmap_64(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Bitmap64, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Bitmap64, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::Int8u => {
                            let attr_read_result = self.0.int_8_u(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int8u, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int8u, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::Int16u => {
                            let attr_read_result = self.0.int_16_u(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int16u, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int16u, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::Int24u => {
                            let attr_read_result = self.0.int_24_u(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int24u, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int24u, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::Int32u => {
                            let attr_read_result = self.0.int_32_u(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int32u, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int32u, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::Int40u => {
                            let attr_read_result = self.0.int_40_u(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int40u, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int40u, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::Int48u => {
                            let attr_read_result = self.0.int_48_u(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int48u, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int48u, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::Int56u => {
                            let attr_read_result = self.0.int_56_u(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int56u, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int56u, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::Int64u => {
                            let attr_read_result = self.0.int_64_u(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int64u, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int64u, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::Int8s => {
                            let attr_read_result = self.0.int_8_s(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int8s, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int8s, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::Int16s => {
                            let attr_read_result = self.0.int_16_s(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int16s, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int16s, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::Int24s => {
                            let attr_read_result = self.0.int_24_s(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int24s, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int24s, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::Int32s => {
                            let attr_read_result = self.0.int_32_s(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int32s, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int32s, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::Int40s => {
                            let attr_read_result = self.0.int_40_s(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int40s, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int40s, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::Int48s => {
                            let attr_read_result = self.0.int_48_s(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int48s, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int48s, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::Int56s => {
                            let attr_read_result = self.0.int_56_s(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int56s, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int56s, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::Int64s => {
                            let attr_read_result = self.0.int_64_s(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int64s, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Int64s, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::Enum8 => {
                            let attr_read_result = self.0.enum_8(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Enum8, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Enum8, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::Enum16 => {
                            let attr_read_result = self.0.enum_16(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Enum16, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Enum16, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::FloatSingle => {
                            let attr_read_result = self.0.float_single(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::FloatSingle, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::FloatSingle, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::FloatDouble => {
                            let attr_read_result = self.0.float_double(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::FloatDouble, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::FloatDouble, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::OctetString => {
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> (build) +",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::OctetString, false))
                                ))
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> (build) +",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::OctetString, false))
                                ))
                            );
                            let tag = rs_matter_crate::dm::Reply::tag(&writer);
                            let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                            let attr_read_result = self.0.octet_string(
                                &ctx,
                                rs_matter_crate::tlv::TLVBuilder::new(
                                    rs_matter_crate::tlv::TLVWriteParent::new(
                                        MetadataDebug((
                                            ctx.attr().endpoint_id,
                                            self,
                                            MetadataDebug((AttributeId::OctetString, false)),
                                        )),
                                        tw,
                                    ),
                                    tag,
                                )?,
                            );
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::OctetString, false))
                                )),
                                attr_read_result.as_ref().map(|_| ())
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} (end) -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::OctetString, false))
                                )),
                                attr_read_result.as_ref().map(|_| ())
                            );
                            attr_read_result?;
                            rs_matter_crate::dm::Reply::complete(writer)
                        }
                        AttributeId::ListInt8u => {
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> (build) +",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::ListInt8u, false))
                                ))
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> (build) +",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::ListInt8u, false))
                                ))
                            );
                            let tag = rs_matter_crate::dm::Reply::tag(&writer);
                            let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                            let attr_read_result = self.0.list_int_8_u(
                                &ctx,
                                rs_matter_crate::dm::ArrayAttributeRead::new(
                                    ctx.attr().list_index.clone(),
                                    rs_matter_crate::tlv::TLVWriteParent::new(
                                        MetadataDebug((
                                            ctx.attr().endpoint_id,
                                            self,
                                            MetadataDebug((AttributeId::ListInt8u, false)),
                                        )),
                                        tw,
                                    ),
                                    tag,
                                )?,
                            );
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::ListInt8u, false))
                                )),
                                attr_read_result.as_ref().map(|_| ())
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} (end) -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::ListInt8u, false))
                                )),
                                attr_read_result.as_ref().map(|_| ())
                            );
                            attr_read_result?;
                            rs_matter_crate::dm::Reply::complete(writer)
                        }
                        AttributeId::ListOctetString => {
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> (build) +",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::ListOctetString, false))
                                ))
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> (build) +",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::ListOctetString, false))
                                ))
                            );
                            let tag = rs_matter_crate::dm::Reply::tag(&writer);
                            let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                            let attr_read_result = self.0.list_octet_string(
                                &ctx,
                                rs_matter_crate::dm::ArrayAttributeRead::new(
                                    ctx.attr().list_index.clone(),
                                    rs_matter_crate::tlv::TLVWriteParent::new(
                                        MetadataDebug((
                                            ctx.attr().endpoint_id,
                                            self,
                                            MetadataDebug((AttributeId::ListOctetString, false)),
                                        )),
                                        tw,
                                    ),
                                    tag,
                                )?,
                            );
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::ListOctetString, false))
                                )),
                                attr_read_result.as_ref().map(|_| ())
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} (end) -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::ListOctetString, false))
                                )),
                                attr_read_result.as_ref().map(|_| ())
                            );
                            attr_read_result?;
                            rs_matter_crate::dm::Reply::complete(writer)
                        }
                        AttributeId::ListStructOctetString => {
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> (build) +",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::ListStructOctetString, false))
                                ))
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> (build) +",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::ListStructOctetString, false))
                                ))
                            );
                            let tag = rs_matter_crate::dm::Reply::tag(&writer);
                            let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                            let attr_read_result = self.0.list_struct_octet_string(
                                &ctx,
                                rs_matter_crate::dm::ArrayAttributeRead::new(
                                    ctx.attr().list_index.clone(),
                                    rs_matter_crate::tlv::TLVWriteParent::new(
                                        MetadataDebug((
                                            ctx.attr().endpoint_id,
                                            self,
                                            MetadataDebug((
                                                AttributeId::ListStructOctetString,
                                                false,
                                            )),
                                        )),
                                        tw,
                                    ),
                                    tag,
                                )?,
                            );
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::ListStructOctetString, false))
                                )),
                                attr_read_result.as_ref().map(|_| ())
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} (end) -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::ListStructOctetString, false))
                                )),
                                attr_read_result.as_ref().map(|_| ())
                            );
                            attr_read_result?;
                            rs_matter_crate::dm::Reply::complete(writer)
                        }
                        AttributeId::LongOctetString => {
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> (build) +",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::LongOctetString, false))
                                ))
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> (build) +",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::LongOctetString, false))
                                ))
                            );
                            let tag = rs_matter_crate::dm::Reply::tag(&writer);
                            let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                            let attr_read_result = self.0.long_octet_string(
                                &ctx,
                                rs_matter_crate::tlv::TLVBuilder::new(
                                    rs_matter_crate::tlv::TLVWriteParent::new(
                                        MetadataDebug((
                                            ctx.attr().endpoint_id,
                                            self,
                                            MetadataDebug((AttributeId::LongOctetString, false)),
                                        )),
                                        tw,
                                    ),
                                    tag,
                                )?,
                            );
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::LongOctetString, false))
                                )),
                                attr_read_result.as_ref().map(|_| ())
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} (end) -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::LongOctetString, false))
                                )),
                                attr_read_result.as_ref().map(|_| ())
                            );
                            attr_read_result?;
                            rs_matter_crate::dm::Reply::complete(writer)
                        }
                        AttributeId::CharString => {
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> (build) +",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::CharString, false))
                                ))
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> (build) +",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::CharString, false))
                                ))
                            );
                            let tag = rs_matter_crate::dm::Reply::tag(&writer);
                            let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                            let attr_read_result = self.0.char_string(
                                &ctx,
                                rs_matter_crate::tlv::TLVBuilder::new(
                                    rs_matter_crate::tlv::TLVWriteParent::new(
                                        MetadataDebug((
                                            ctx.attr().endpoint_id,
                                            self,
                                            MetadataDebug((AttributeId::CharString, false)),
                                        )),
                                        tw,
                                    ),
                                    tag,
                                )?,
                            );
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::CharString, false))
                                )),
                                attr_read_result.as_ref().map(|_| ())
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} (end) -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::CharString, false))
                                )),
                                attr_read_result.as_ref().map(|_| ())
                            );
                            attr_read_result?;
                            rs_matter_crate::dm::Reply::complete(writer)
                        }
                        AttributeId::LongCharString => {
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> (build) +",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::LongCharString, false))
                                ))
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> (build) +",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::LongCharString, false))
                                ))
                            );
                            let tag = rs_matter_crate::dm::Reply::tag(&writer);
                            let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                            let attr_read_result = self.0.long_char_string(
                                &ctx,
                                rs_matter_crate::tlv::TLVBuilder::new(
                                    rs_matter_crate::tlv::TLVWriteParent::new(
                                        MetadataDebug((
                                            ctx.attr().endpoint_id,
                                            self,
                                            MetadataDebug((AttributeId::LongCharString, false)),
                                        )),
                                        tw,
                                    ),
                                    tag,
                                )?,
                            );
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::LongCharString, false))
                                )),
                                attr_read_result.as_ref().map(|_| ())
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} (end) -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::LongCharString, false))
                                )),
                                attr_read_result.as_ref().map(|_| ())
                            );
                            attr_read_result?;
                            rs_matter_crate::dm::Reply::complete(writer)
                        }
                        AttributeId::EpochUs => {
                            let attr_read_result = self.0.epoch_us(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::EpochUs, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::EpochUs, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::EpochS => {
                            let attr_read_result = self.0.epoch_s(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::EpochS, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::EpochS, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::VendorId => {
                            let attr_read_result = self.0.vendor_id(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::VendorId, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::VendorId, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::ListNullablesAndOptionalsStruct => {
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> (build) +",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((
                                        AttributeId::ListNullablesAndOptionalsStruct,
                                        false
                                    ))
                                ))
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> (build) +",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((
                                        AttributeId::ListNullablesAndOptionalsStruct,
                                        false
                                    ))
                                ))
                            );
                            let tag = rs_matter_crate::dm::Reply::tag(&writer);
                            let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                            let attr_read_result = self.0.list_nullables_and_optionals_struct(
                                &ctx,
                                rs_matter_crate::dm::ArrayAttributeRead::new(
                                    ctx.attr().list_index.clone(),
                                    rs_matter_crate::tlv::TLVWriteParent::new(
                                        MetadataDebug((
                                            ctx.attr().endpoint_id,
                                            self,
                                            MetadataDebug((
                                                AttributeId::ListNullablesAndOptionalsStruct,
                                                false,
                                            )),
                                        )),
                                        tw,
                                    ),
                                    tag,
                                )?,
                            );
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((
                                        AttributeId::ListNullablesAndOptionalsStruct,
                                        false
                                    ))
                                )),
                                attr_read_result.as_ref().map(|_| ())
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} (end) -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((
                                        AttributeId::ListNullablesAndOptionalsStruct,
                                        false
                                    ))
                                )),
                                attr_read_result.as_ref().map(|_| ())
                            );
                            attr_read_result?;
                            rs_matter_crate::dm::Reply::complete(writer)
                        }
                        AttributeId::EnumAttr => {
                            let attr_read_result = self.0.enum_attr(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::EnumAttr, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::EnumAttr, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::StructAttr => {
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> (build) +",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::StructAttr, false))
                                ))
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> (build) +",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::StructAttr, false))
                                ))
                            );
                            let tag = rs_matter_crate::dm::Reply::tag(&writer);
                            let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                            let attr_read_result = self.0.struct_attr(
                                &ctx,
                                rs_matter_crate::tlv::TLVBuilder::new(
                                    rs_matter_crate::tlv::TLVWriteParent::new(
                                        MetadataDebug((
                                            ctx.attr().endpoint_id,
                                            self,
                                            MetadataDebug((AttributeId::StructAttr, false)),
                                        )),
                                        tw,
                                    ),
                                    tag,
                                )?,
                            );
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::StructAttr, false))
                                )),
                                attr_read_result.as_ref().map(|_| ())
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} (end) -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::StructAttr, false))
                                )),
                                attr_read_result.as_ref().map(|_| ())
                            );
                            attr_read_result?;
                            rs_matter_crate::dm::Reply::complete(writer)
                        }
                        AttributeId::RangeRestrictedInt8u => {
                            let attr_read_result = self.0.range_restricted_int_8_u(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::RangeRestrictedInt8u, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::RangeRestrictedInt8u, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::RangeRestrictedInt8s => {
                            let attr_read_result = self.0.range_restricted_int_8_s(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::RangeRestrictedInt8s, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::RangeRestrictedInt8s, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::RangeRestrictedInt16u => {
                            let attr_read_result = self.0.range_restricted_int_16_u(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::RangeRestrictedInt16u, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::RangeRestrictedInt16u, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::RangeRestrictedInt16s => {
                            let attr_read_result = self.0.range_restricted_int_16_s(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::RangeRestrictedInt16s, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::RangeRestrictedInt16s, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::ListLongOctetString => {
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> (build) +",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::ListLongOctetString, false))
                                ))
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> (build) +",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::ListLongOctetString, false))
                                ))
                            );
                            let tag = rs_matter_crate::dm::Reply::tag(&writer);
                            let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                            let attr_read_result = self.0.list_long_octet_string(
                                &ctx,
                                rs_matter_crate::dm::ArrayAttributeRead::new(
                                    ctx.attr().list_index.clone(),
                                    rs_matter_crate::tlv::TLVWriteParent::new(
                                        MetadataDebug((
                                            ctx.attr().endpoint_id,
                                            self,
                                            MetadataDebug((
                                                AttributeId::ListLongOctetString,
                                                false,
                                            )),
                                        )),
                                        tw,
                                    ),
                                    tag,
                                )?,
                            );
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::ListLongOctetString, false))
                                )),
                                attr_read_result.as_ref().map(|_| ())
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} (end) -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::ListLongOctetString, false))
                                )),
                                attr_read_result.as_ref().map(|_| ())
                            );
                            attr_read_result?;
                            rs_matter_crate::dm::Reply::complete(writer)
                        }
                        AttributeId::ListFabricScoped => {
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> (build) +",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::ListFabricScoped, false))
                                ))
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> (build) +",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::ListFabricScoped, false))
                                ))
                            );
                            let tag = rs_matter_crate::dm::Reply::tag(&writer);
                            let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                            let attr_read_result = self.0.list_fabric_scoped(
                                &ctx,
                                rs_matter_crate::dm::ArrayAttributeRead::new(
                                    ctx.attr().list_index.clone(),
                                    rs_matter_crate::tlv::TLVWriteParent::new(
                                        MetadataDebug((
                                            ctx.attr().endpoint_id,
                                            self,
                                            MetadataDebug((AttributeId::ListFabricScoped, false)),
                                        )),
                                        tw,
                                    ),
                                    tag,
                                )?,
                            );
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::ListFabricScoped, false))
                                )),
                                attr_read_result.as_ref().map(|_| ())
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} (end) -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::ListFabricScoped, false))
                                )),
                                attr_read_result.as_ref().map(|_| ())
                            );
                            attr_read_result?;
                            rs_matter_crate::dm::Reply::complete(writer)
                        }
                        AttributeId::TimedWriteBoolean => {
                            let attr_read_result = self.0.timed_write_boolean(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::TimedWriteBoolean, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::TimedWriteBoolean, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::GeneralErrorBoolean => {
                            let attr_read_result = self.0.general_error_boolean(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::GeneralErrorBoolean, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::GeneralErrorBoolean, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::ClusterErrorBoolean => {
                            let attr_read_result = self.0.cluster_error_boolean(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::ClusterErrorBoolean, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::ClusterErrorBoolean, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::Unsupported => {
                            let attr_read_result = self.0.unsupported(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Unsupported, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::Unsupported, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::NullableBoolean => {
                            let attr_read_result = self.0.nullable_boolean(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableBoolean, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableBoolean, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::NullableBitmap8 => {
                            let attr_read_result = self.0.nullable_bitmap_8(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableBitmap8, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableBitmap8, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::NullableBitmap16 => {
                            let attr_read_result = self.0.nullable_bitmap_16(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableBitmap16, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableBitmap16, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::NullableBitmap32 => {
                            let attr_read_result = self.0.nullable_bitmap_32(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableBitmap32, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableBitmap32, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::NullableBitmap64 => {
                            let attr_read_result = self.0.nullable_bitmap_64(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableBitmap64, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableBitmap64, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::NullableInt8u => {
                            let attr_read_result = self.0.nullable_int_8_u(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt8u, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt8u, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::NullableInt16u => {
                            let attr_read_result = self.0.nullable_int_16_u(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt16u, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt16u, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::NullableInt24u => {
                            let attr_read_result = self.0.nullable_int_24_u(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt24u, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt24u, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::NullableInt32u => {
                            let attr_read_result = self.0.nullable_int_32_u(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt32u, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt32u, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::NullableInt40u => {
                            let attr_read_result = self.0.nullable_int_40_u(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt40u, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt40u, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::NullableInt48u => {
                            let attr_read_result = self.0.nullable_int_48_u(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt48u, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt48u, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::NullableInt56u => {
                            let attr_read_result = self.0.nullable_int_56_u(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt56u, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt56u, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::NullableInt64u => {
                            let attr_read_result = self.0.nullable_int_64_u(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt64u, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt64u, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::NullableInt8s => {
                            let attr_read_result = self.0.nullable_int_8_s(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt8s, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt8s, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::NullableInt16s => {
                            let attr_read_result = self.0.nullable_int_16_s(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt16s, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt16s, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::NullableInt24s => {
                            let attr_read_result = self.0.nullable_int_24_s(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt24s, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt24s, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::NullableInt32s => {
                            let attr_read_result = self.0.nullable_int_32_s(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt32s, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt32s, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::NullableInt40s => {
                            let attr_read_result = self.0.nullable_int_40_s(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt40s, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt40s, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::NullableInt48s => {
                            let attr_read_result = self.0.nullable_int_48_s(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt48s, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt48s, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::NullableInt56s => {
                            let attr_read_result = self.0.nullable_int_56_s(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt56s, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt56s, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::NullableInt64s => {
                            let attr_read_result = self.0.nullable_int_64_s(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt64s, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableInt64s, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::NullableEnum8 => {
                            let attr_read_result = self.0.nullable_enum_8(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableEnum8, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableEnum8, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::NullableEnum16 => {
                            let attr_read_result = self.0.nullable_enum_16(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableEnum16, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableEnum16, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::NullableFloatSingle => {
                            let attr_read_result = self.0.nullable_float_single(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableFloatSingle, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableFloatSingle, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::NullableFloatDouble => {
                            let attr_read_result = self.0.nullable_float_double(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableFloatDouble, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableFloatDouble, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::NullableOctetString => {
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> (build) +",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableOctetString, false))
                                ))
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> (build) +",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableOctetString, false))
                                ))
                            );
                            let tag = rs_matter_crate::dm::Reply::tag(&writer);
                            let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                            let attr_read_result = self.0.nullable_octet_string(
                                &ctx,
                                rs_matter_crate::tlv::TLVBuilder::new(
                                    rs_matter_crate::tlv::TLVWriteParent::new(
                                        MetadataDebug((
                                            ctx.attr().endpoint_id,
                                            self,
                                            MetadataDebug((
                                                AttributeId::NullableOctetString,
                                                false,
                                            )),
                                        )),
                                        tw,
                                    ),
                                    tag,
                                )?,
                            );
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableOctetString, false))
                                )),
                                attr_read_result.as_ref().map(|_| ())
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} (end) -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableOctetString, false))
                                )),
                                attr_read_result.as_ref().map(|_| ())
                            );
                            attr_read_result?;
                            rs_matter_crate::dm::Reply::complete(writer)
                        }
                        AttributeId::NullableCharString => {
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> (build) +",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableCharString, false))
                                ))
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> (build) +",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableCharString, false))
                                ))
                            );
                            let tag = rs_matter_crate::dm::Reply::tag(&writer);
                            let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                            let attr_read_result = self.0.nullable_char_string(
                                &ctx,
                                rs_matter_crate::tlv::TLVBuilder::new(
                                    rs_matter_crate::tlv::TLVWriteParent::new(
                                        MetadataDebug((
                                            ctx.attr().endpoint_id,
                                            self,
                                            MetadataDebug((AttributeId::NullableCharString, false)),
                                        )),
                                        tw,
                                    ),
                                    tag,
                                )?,
                            );
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableCharString, false))
                                )),
                                attr_read_result.as_ref().map(|_| ())
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} (end) -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableCharString, false))
                                )),
                                attr_read_result.as_ref().map(|_| ())
                            );
                            attr_read_result?;
                            rs_matter_crate::dm::Reply::complete(writer)
                        }
                        AttributeId::NullableEnumAttr => {
                            let attr_read_result = self.0.nullable_enum_attr(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableEnumAttr, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableEnumAttr, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::NullableStruct => {
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> (build) +",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableStruct, false))
                                ))
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> (build) +",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableStruct, false))
                                ))
                            );
                            let tag = rs_matter_crate::dm::Reply::tag(&writer);
                            let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                            let attr_read_result = self.0.nullable_struct(
                                &ctx,
                                rs_matter_crate::tlv::TLVBuilder::new(
                                    rs_matter_crate::tlv::TLVWriteParent::new(
                                        MetadataDebug((
                                            ctx.attr().endpoint_id,
                                            self,
                                            MetadataDebug((AttributeId::NullableStruct, false)),
                                        )),
                                        tw,
                                    ),
                                    tag,
                                )?,
                            );
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableStruct, false))
                                )),
                                attr_read_result.as_ref().map(|_| ())
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} (end) -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::NullableStruct, false))
                                )),
                                attr_read_result.as_ref().map(|_| ())
                            );
                            attr_read_result?;
                            rs_matter_crate::dm::Reply::complete(writer)
                        }
                        AttributeId::NullableRangeRestrictedInt8u => {
                            let attr_read_result = self.0.nullable_range_restricted_int_8_u(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((
                                        AttributeId::NullableRangeRestrictedInt8u,
                                        false
                                    ))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((
                                        AttributeId::NullableRangeRestrictedInt8u,
                                        false
                                    ))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::NullableRangeRestrictedInt8s => {
                            let attr_read_result = self.0.nullable_range_restricted_int_8_s(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((
                                        AttributeId::NullableRangeRestrictedInt8s,
                                        false
                                    ))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((
                                        AttributeId::NullableRangeRestrictedInt8s,
                                        false
                                    ))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::NullableRangeRestrictedInt16u => {
                            let attr_read_result = self.0.nullable_range_restricted_int_16_u(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((
                                        AttributeId::NullableRangeRestrictedInt16u,
                                        false
                                    ))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((
                                        AttributeId::NullableRangeRestrictedInt16u,
                                        false
                                    ))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::NullableRangeRestrictedInt16s => {
                            let attr_read_result = self.0.nullable_range_restricted_int_16_s(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((
                                        AttributeId::NullableRangeRestrictedInt16s,
                                        false
                                    ))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((
                                        AttributeId::NullableRangeRestrictedInt16s,
                                        false
                                    ))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::WriteOnlyInt8u => {
                            let attr_read_result = self.0.write_only_int_8_u(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::WriteOnlyInt8u, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::WriteOnlyInt8u, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        AttributeId::MeiInt8u => {
                            let attr_read_result = self.0.mei_int_8_u(&ctx);
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::MeiInt8u, false))
                                )),
                                attr_read_result
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::debug!(
                                "{:?} -> {:?}",
                                MetadataDebug((
                                    ctx.attr().endpoint_id,
                                    self,
                                    MetadataDebug((AttributeId::MeiInt8u, false))
                                )),
                                attr_read_result
                            );
                            rs_matter_crate::dm::Reply::set(writer, attr_read_result?)
                        }
                        #[allow(unreachable_code)]
                        other => {
                            #[cfg(feature = "defmt")]
                            rs_matter_crate::reexport::defmt::error!(
                                "Attribute {:?} not supported",
                                other
                            );
                            #[cfg(feature = "log")]
                            rs_matter_crate::reexport::log::error!(
                                "Attribute {:?} not supported",
                                other
                            );
                            Err(rs_matter_crate::error::ErrorCode::AttributeNotFound.into())
                        }
                    }
                }
            } else {
                Ok(())
            }
        }
        #[allow(unreachable_code)]
        fn write(
            &self,
            ctx: impl rs_matter_crate::dm::WriteContext,
        ) -> Result<(), rs_matter_crate::error::Error> {
            ctx.attr().check_dataver(self.0.dataver())?;
            if ctx.attr().is_system() {
                return Err(rs_matter_crate::error::ErrorCode::InvalidAction.into());
            }
            match AttributeId::try_from(ctx.attr().attr_id)? {
                AttributeId::Boolean => {
                    let attr_data: bool = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_boolean(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Boolean, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Boolean, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::Bitmap8 => {
                    let attr_data: Bitmap8MaskMap =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_bitmap_8(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Bitmap8, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Bitmap8, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::Bitmap16 => {
                    let attr_data: Bitmap16MaskMap =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_bitmap_16(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Bitmap16, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Bitmap16, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::Bitmap32 => {
                    let attr_data: Bitmap32MaskMap =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_bitmap_32(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Bitmap32, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Bitmap32, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::Bitmap64 => {
                    let attr_data: Bitmap64MaskMap =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_bitmap_64(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Bitmap64, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Bitmap64, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::Int8u => {
                    let attr_data: u8 = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_int_8_u(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int8u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int8u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::Int16u => {
                    let attr_data: u16 = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_int_16_u(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int16u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int16u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::Int24u => {
                    let attr_data: u32 = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_int_24_u(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int24u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int24u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::Int32u => {
                    let attr_data: u32 = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_int_32_u(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int32u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int32u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::Int40u => {
                    let attr_data: u64 = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_int_40_u(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int40u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int40u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::Int48u => {
                    let attr_data: u64 = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_int_48_u(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int48u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int48u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::Int56u => {
                    let attr_data: u64 = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_int_56_u(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int56u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int56u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::Int64u => {
                    let attr_data: u64 = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_int_64_u(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int64u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int64u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::Int8s => {
                    let attr_data: i8 = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_int_8_s(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int8s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int8s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::Int16s => {
                    let attr_data: i16 = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_int_16_s(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int16s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int16s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::Int24s => {
                    let attr_data: i32 = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_int_24_s(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int24s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int24s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::Int32s => {
                    let attr_data: i32 = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_int_32_s(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int32s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int32s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::Int40s => {
                    let attr_data: i64 = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_int_40_s(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int40s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int40s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::Int48s => {
                    let attr_data: i64 = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_int_48_s(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int48s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int48s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::Int56s => {
                    let attr_data: i64 = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_int_56_s(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int56s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int56s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::Int64s => {
                    let attr_data: i64 = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_int_64_s(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int64s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Int64s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::Enum8 => {
                    let attr_data: u8 = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_enum_8(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Enum8, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Enum8, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::Enum16 => {
                    let attr_data: u16 = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_enum_16(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Enum16, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Enum16, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::FloatSingle => {
                    let attr_data: f32 = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_float_single(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::FloatSingle, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::FloatSingle, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::FloatDouble => {
                    let attr_data: f64 = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_float_double(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::FloatDouble, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::FloatDouble, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::OctetString => {
                    let attr_data: rs_matter_crate::tlv::OctetStr<'_> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_octet_string(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::OctetString, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::OctetString, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::ListInt8u => {
                    let attr_data = rs_matter_crate::dm::ArrayAttributeWrite::new(
                        ctx.attr().list_index.clone(),
                        ctx.data(),
                    )?;
                    let attr_write_result = self.0.set_list_int_8_u(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::ListInt8u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::ListInt8u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::ListOctetString => {
                    let attr_data = rs_matter_crate::dm::ArrayAttributeWrite::new(
                        ctx.attr().list_index.clone(),
                        ctx.data(),
                    )?;
                    let attr_write_result = self.0.set_list_octet_string(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::ListOctetString, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::ListOctetString, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::ListStructOctetString => {
                    let attr_data = rs_matter_crate::dm::ArrayAttributeWrite::new(
                        ctx.attr().list_index.clone(),
                        ctx.data(),
                    )?;
                    let attr_write_result =
                        self.0.set_list_struct_octet_string(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::ListStructOctetString, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::ListStructOctetString, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::LongOctetString => {
                    let attr_data: rs_matter_crate::tlv::OctetStr<'_> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_long_octet_string(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::LongOctetString, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::LongOctetString, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::CharString => {
                    let attr_data: rs_matter_crate::tlv::Utf8Str<'_> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_char_string(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::CharString, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::CharString, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::LongCharString => {
                    let attr_data: rs_matter_crate::tlv::Utf8Str<'_> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_long_char_string(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::LongCharString, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::LongCharString, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::EpochUs => {
                    let attr_data: u64 = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_epoch_us(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::EpochUs, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::EpochUs, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::EpochS => {
                    let attr_data: u32 = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_epoch_s(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::EpochS, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::EpochS, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::VendorId => {
                    let attr_data: u16 = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_vendor_id(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::VendorId, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::VendorId, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::ListNullablesAndOptionalsStruct => {
                    let attr_data = rs_matter_crate::dm::ArrayAttributeWrite::new(
                        ctx.attr().list_index.clone(),
                        ctx.data(),
                    )?;
                    let attr_write_result = self
                        .0
                        .set_list_nullables_and_optionals_struct(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::ListNullablesAndOptionalsStruct, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::ListNullablesAndOptionalsStruct, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::EnumAttr => {
                    let attr_data: SimpleEnum =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_enum_attr(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::EnumAttr, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::EnumAttr, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::StructAttr => {
                    let attr_data: SimpleStruct<'_> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_struct_attr(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::StructAttr, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::StructAttr, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::RangeRestrictedInt8u => {
                    let attr_data: u8 = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result =
                        self.0.set_range_restricted_int_8_u(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::RangeRestrictedInt8u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::RangeRestrictedInt8u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::RangeRestrictedInt8s => {
                    let attr_data: i8 = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result =
                        self.0.set_range_restricted_int_8_s(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::RangeRestrictedInt8s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::RangeRestrictedInt8s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::RangeRestrictedInt16u => {
                    let attr_data: u16 = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self
                        .0
                        .set_range_restricted_int_16_u(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::RangeRestrictedInt16u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::RangeRestrictedInt16u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::RangeRestrictedInt16s => {
                    let attr_data: i16 = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self
                        .0
                        .set_range_restricted_int_16_s(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::RangeRestrictedInt16s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::RangeRestrictedInt16s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::ListLongOctetString => {
                    let attr_data = rs_matter_crate::dm::ArrayAttributeWrite::new(
                        ctx.attr().list_index.clone(),
                        ctx.data(),
                    )?;
                    let attr_write_result =
                        self.0.set_list_long_octet_string(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::ListLongOctetString, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::ListLongOctetString, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::ListFabricScoped => {
                    let attr_data = rs_matter_crate::dm::ArrayAttributeWrite::new(
                        ctx.attr().list_index.clone(),
                        ctx.data(),
                    )?;
                    let attr_write_result = self.0.set_list_fabric_scoped(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::ListFabricScoped, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::ListFabricScoped, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::TimedWriteBoolean => {
                    let attr_data: bool = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_timed_write_boolean(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::TimedWriteBoolean, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::TimedWriteBoolean, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::GeneralErrorBoolean => {
                    let attr_data: bool = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result =
                        self.0.set_general_error_boolean(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::GeneralErrorBoolean, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::GeneralErrorBoolean, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::ClusterErrorBoolean => {
                    let attr_data: bool = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result =
                        self.0.set_cluster_error_boolean(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::ClusterErrorBoolean, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::ClusterErrorBoolean, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::Unsupported => {
                    let attr_data: bool = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_unsupported(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Unsupported, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::Unsupported, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableBoolean => {
                    let attr_data: rs_matter_crate::tlv::Nullable<bool> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_nullable_boolean(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableBoolean, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableBoolean, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableBitmap8 => {
                    let attr_data: rs_matter_crate::tlv::Nullable<Bitmap8MaskMap> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_nullable_bitmap_8(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableBitmap8, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableBitmap8, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableBitmap16 => {
                    let attr_data: rs_matter_crate::tlv::Nullable<Bitmap16MaskMap> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_nullable_bitmap_16(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableBitmap16, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableBitmap16, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableBitmap32 => {
                    let attr_data: rs_matter_crate::tlv::Nullable<Bitmap32MaskMap> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_nullable_bitmap_32(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableBitmap32, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableBitmap32, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableBitmap64 => {
                    let attr_data: rs_matter_crate::tlv::Nullable<Bitmap64MaskMap> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_nullable_bitmap_64(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableBitmap64, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableBitmap64, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableInt8u => {
                    let attr_data: rs_matter_crate::tlv::Nullable<u8> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_nullable_int_8_u(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt8u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt8u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableInt16u => {
                    let attr_data: rs_matter_crate::tlv::Nullable<u16> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_nullable_int_16_u(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt16u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt16u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableInt24u => {
                    let attr_data: rs_matter_crate::tlv::Nullable<u32> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_nullable_int_24_u(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt24u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt24u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableInt32u => {
                    let attr_data: rs_matter_crate::tlv::Nullable<u32> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_nullable_int_32_u(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt32u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt32u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableInt40u => {
                    let attr_data: rs_matter_crate::tlv::Nullable<u64> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_nullable_int_40_u(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt40u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt40u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableInt48u => {
                    let attr_data: rs_matter_crate::tlv::Nullable<u64> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_nullable_int_48_u(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt48u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt48u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableInt56u => {
                    let attr_data: rs_matter_crate::tlv::Nullable<u64> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_nullable_int_56_u(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt56u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt56u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableInt64u => {
                    let attr_data: rs_matter_crate::tlv::Nullable<u64> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_nullable_int_64_u(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt64u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt64u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableInt8s => {
                    let attr_data: rs_matter_crate::tlv::Nullable<i8> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_nullable_int_8_s(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt8s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt8s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableInt16s => {
                    let attr_data: rs_matter_crate::tlv::Nullable<i16> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_nullable_int_16_s(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt16s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt16s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableInt24s => {
                    let attr_data: rs_matter_crate::tlv::Nullable<i32> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_nullable_int_24_s(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt24s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt24s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableInt32s => {
                    let attr_data: rs_matter_crate::tlv::Nullable<i32> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_nullable_int_32_s(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt32s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt32s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableInt40s => {
                    let attr_data: rs_matter_crate::tlv::Nullable<i64> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_nullable_int_40_s(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt40s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt40s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableInt48s => {
                    let attr_data: rs_matter_crate::tlv::Nullable<i64> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_nullable_int_48_s(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt48s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt48s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableInt56s => {
                    let attr_data: rs_matter_crate::tlv::Nullable<i64> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_nullable_int_56_s(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt56s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt56s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableInt64s => {
                    let attr_data: rs_matter_crate::tlv::Nullable<i64> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_nullable_int_64_s(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt64s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableInt64s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableEnum8 => {
                    let attr_data: rs_matter_crate::tlv::Nullable<u8> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_nullable_enum_8(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableEnum8, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableEnum8, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableEnum16 => {
                    let attr_data: rs_matter_crate::tlv::Nullable<u16> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_nullable_enum_16(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableEnum16, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableEnum16, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableFloatSingle => {
                    let attr_data: rs_matter_crate::tlv::Nullable<f32> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result =
                        self.0.set_nullable_float_single(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableFloatSingle, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableFloatSingle, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableFloatDouble => {
                    let attr_data: rs_matter_crate::tlv::Nullable<f64> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result =
                        self.0.set_nullable_float_double(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableFloatDouble, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableFloatDouble, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableOctetString => {
                    let attr_data: rs_matter_crate::tlv::Nullable<
                        rs_matter_crate::tlv::OctetStr<'_>,
                    > = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result =
                        self.0.set_nullable_octet_string(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableOctetString, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableOctetString, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableCharString => {
                    let attr_data: rs_matter_crate::tlv::Nullable<
                        rs_matter_crate::tlv::Utf8Str<'_>,
                    > = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result =
                        self.0.set_nullable_char_string(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableCharString, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableCharString, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableEnumAttr => {
                    let attr_data: rs_matter_crate::tlv::Nullable<SimpleEnum> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_nullable_enum_attr(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableEnumAttr, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableEnumAttr, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableStruct => {
                    let attr_data: rs_matter_crate::tlv::Nullable<SimpleStruct<'_>> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_nullable_struct(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableStruct, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableStruct, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableRangeRestrictedInt8u => {
                    let attr_data: rs_matter_crate::tlv::Nullable<u8> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self
                        .0
                        .set_nullable_range_restricted_int_8_u(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableRangeRestrictedInt8u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableRangeRestrictedInt8u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableRangeRestrictedInt8s => {
                    let attr_data: rs_matter_crate::tlv::Nullable<i8> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self
                        .0
                        .set_nullable_range_restricted_int_8_s(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableRangeRestrictedInt8s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableRangeRestrictedInt8s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableRangeRestrictedInt16u => {
                    let attr_data: rs_matter_crate::tlv::Nullable<u16> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self
                        .0
                        .set_nullable_range_restricted_int_16_u(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableRangeRestrictedInt16u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableRangeRestrictedInt16u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::NullableRangeRestrictedInt16s => {
                    let attr_data: rs_matter_crate::tlv::Nullable<i16> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self
                        .0
                        .set_nullable_range_restricted_int_16_s(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableRangeRestrictedInt16s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::NullableRangeRestrictedInt16s, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::WriteOnlyInt8u => {
                    let attr_data: u8 = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_write_only_int_8_u(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::WriteOnlyInt8u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::WriteOnlyInt8u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                AttributeId::MeiInt8u => {
                    let attr_data: u8 = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let attr_write_result = self.0.set_mei_int_8_u(&ctx, attr_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::MeiInt8u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.attr().endpoint_id,
                            self,
                            MetadataDebug((AttributeId::MeiInt8u, false))
                        )),
                        attr_data,
                        attr_write_result
                    );
                    attr_write_result?;
                }
                other => {
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::error!("Attribute {:?} not supported", other);
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::error!("Attribute {:?} not supported", other);
                    return Err(rs_matter_crate::error::ErrorCode::AttributeNotFound.into());
                }
            }
            self.0.dataver_changed();
            Ok(())
        }
        #[allow(unreachable_code)]
        fn invoke(
            &self,
            ctx: impl rs_matter_crate::dm::InvokeContext,
            reply: impl rs_matter_crate::dm::InvokeReply,
        ) -> Result<(), rs_matter_crate::error::Error> {
            match CommandId::try_from(ctx.cmd().cmd_id)? {
                CommandId::Test => {
                    let cmd_invoke_result = self.0.handle_test(&ctx);
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?} -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::Test)
                        )),
                        cmd_invoke_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?} -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::Test)
                        )),
                        cmd_invoke_result
                    );
                    cmd_invoke_result?;
                }
                CommandId::TestNotHandled => {
                    let cmd_invoke_result = self.0.handle_test_not_handled(&ctx);
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?} -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestNotHandled)
                        )),
                        cmd_invoke_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?} -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestNotHandled)
                        )),
                        cmd_invoke_result
                    );
                    cmd_invoke_result?;
                }
                CommandId::TestSpecific => {
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?} -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestSpecific)
                        ))
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?} -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestSpecific)
                        ))
                    );
                    let mut writer = reply.with_command(0u32)?;
                    let tag = rs_matter_crate::dm::Reply::tag(&writer);
                    let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                    let cmd_invoke_result = self.0.handle_test_specific(
                        &ctx,
                        rs_matter_crate::tlv::TLVBuilder::new(
                            rs_matter_crate::tlv::TLVWriteParent::new(
                                MetadataDebug((
                                    ctx.cmd().endpoint_id,
                                    self,
                                    MetadataDebug(CommandId::TestSpecific),
                                )),
                                tw,
                            ),
                            tag,
                        )?,
                    );
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestSpecific)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestSpecific)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    cmd_invoke_result?;
                    rs_matter_crate::dm::Reply::complete(writer)?
                }
                CommandId::TestUnknownCommand => {
                    let cmd_invoke_result = self.0.handle_test_unknown_command(&ctx);
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?} -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestUnknownCommand)
                        )),
                        cmd_invoke_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?} -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestUnknownCommand)
                        )),
                        cmd_invoke_result
                    );
                    cmd_invoke_result?;
                }
                CommandId::TestAddArguments => {
                    let cmd_data = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestAddArguments)
                        )),
                        cmd_data
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestAddArguments)
                        )),
                        cmd_data
                    );
                    let mut writer = reply.with_command(1u32)?;
                    let tag = rs_matter_crate::dm::Reply::tag(&writer);
                    let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                    let cmd_invoke_result = self.0.handle_test_add_arguments(
                        &ctx,
                        cmd_data,
                        rs_matter_crate::tlv::TLVBuilder::new(
                            rs_matter_crate::tlv::TLVWriteParent::new(
                                MetadataDebug((
                                    ctx.cmd().endpoint_id,
                                    self,
                                    MetadataDebug(CommandId::TestAddArguments),
                                )),
                                tw,
                            ),
                            tag,
                        )?,
                    );
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestAddArguments)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestAddArguments)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    cmd_invoke_result?;
                    rs_matter_crate::dm::Reply::complete(writer)?
                }
                CommandId::TestSimpleArgumentRequest => {
                    let cmd_data = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestSimpleArgumentRequest)
                        )),
                        cmd_data
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestSimpleArgumentRequest)
                        )),
                        cmd_data
                    );
                    let mut writer = reply.with_command(2u32)?;
                    let tag = rs_matter_crate::dm::Reply::tag(&writer);
                    let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                    let cmd_invoke_result = self.0.handle_test_simple_argument_request(
                        &ctx,
                        cmd_data,
                        rs_matter_crate::tlv::TLVBuilder::new(
                            rs_matter_crate::tlv::TLVWriteParent::new(
                                MetadataDebug((
                                    ctx.cmd().endpoint_id,
                                    self,
                                    MetadataDebug(CommandId::TestSimpleArgumentRequest),
                                )),
                                tw,
                            ),
                            tag,
                        )?,
                    );
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestSimpleArgumentRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestSimpleArgumentRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    cmd_invoke_result?;
                    rs_matter_crate::dm::Reply::complete(writer)?
                }
                CommandId::TestStructArrayArgumentRequest => {
                    let cmd_data = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestStructArrayArgumentRequest)
                        )),
                        cmd_data
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestStructArrayArgumentRequest)
                        )),
                        cmd_data
                    );
                    let mut writer = reply.with_command(3u32)?;
                    let tag = rs_matter_crate::dm::Reply::tag(&writer);
                    let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                    let cmd_invoke_result = self.0.handle_test_struct_array_argument_request(
                        &ctx,
                        cmd_data,
                        rs_matter_crate::tlv::TLVBuilder::new(
                            rs_matter_crate::tlv::TLVWriteParent::new(
                                MetadataDebug((
                                    ctx.cmd().endpoint_id,
                                    self,
                                    MetadataDebug(CommandId::TestStructArrayArgumentRequest),
                                )),
                                tw,
                            ),
                            tag,
                        )?,
                    );
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestStructArrayArgumentRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestStructArrayArgumentRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    cmd_invoke_result?;
                    rs_matter_crate::dm::Reply::complete(writer)?
                }
                CommandId::TestStructArgumentRequest => {
                    let cmd_data = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestStructArgumentRequest)
                        )),
                        cmd_data
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestStructArgumentRequest)
                        )),
                        cmd_data
                    );
                    let mut writer = reply.with_command(8u32)?;
                    let tag = rs_matter_crate::dm::Reply::tag(&writer);
                    let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                    let cmd_invoke_result = self.0.handle_test_struct_argument_request(
                        &ctx,
                        cmd_data,
                        rs_matter_crate::tlv::TLVBuilder::new(
                            rs_matter_crate::tlv::TLVWriteParent::new(
                                MetadataDebug((
                                    ctx.cmd().endpoint_id,
                                    self,
                                    MetadataDebug(CommandId::TestStructArgumentRequest),
                                )),
                                tw,
                            ),
                            tag,
                        )?,
                    );
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestStructArgumentRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestStructArgumentRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    cmd_invoke_result?;
                    rs_matter_crate::dm::Reply::complete(writer)?
                }
                CommandId::TestNestedStructArgumentRequest => {
                    let cmd_data = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestNestedStructArgumentRequest)
                        )),
                        cmd_data
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestNestedStructArgumentRequest)
                        )),
                        cmd_data
                    );
                    let mut writer = reply.with_command(8u32)?;
                    let tag = rs_matter_crate::dm::Reply::tag(&writer);
                    let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                    let cmd_invoke_result = self.0.handle_test_nested_struct_argument_request(
                        &ctx,
                        cmd_data,
                        rs_matter_crate::tlv::TLVBuilder::new(
                            rs_matter_crate::tlv::TLVWriteParent::new(
                                MetadataDebug((
                                    ctx.cmd().endpoint_id,
                                    self,
                                    MetadataDebug(CommandId::TestNestedStructArgumentRequest),
                                )),
                                tw,
                            ),
                            tag,
                        )?,
                    );
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestNestedStructArgumentRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestNestedStructArgumentRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    cmd_invoke_result?;
                    rs_matter_crate::dm::Reply::complete(writer)?
                }
                CommandId::TestListStructArgumentRequest => {
                    let cmd_data = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestListStructArgumentRequest)
                        )),
                        cmd_data
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestListStructArgumentRequest)
                        )),
                        cmd_data
                    );
                    let mut writer = reply.with_command(8u32)?;
                    let tag = rs_matter_crate::dm::Reply::tag(&writer);
                    let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                    let cmd_invoke_result = self.0.handle_test_list_struct_argument_request(
                        &ctx,
                        cmd_data,
                        rs_matter_crate::tlv::TLVBuilder::new(
                            rs_matter_crate::tlv::TLVWriteParent::new(
                                MetadataDebug((
                                    ctx.cmd().endpoint_id,
                                    self,
                                    MetadataDebug(CommandId::TestListStructArgumentRequest),
                                )),
                                tw,
                            ),
                            tag,
                        )?,
                    );
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestListStructArgumentRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestListStructArgumentRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    cmd_invoke_result?;
                    rs_matter_crate::dm::Reply::complete(writer)?
                }
                CommandId::TestListInt8UArgumentRequest => {
                    let cmd_data = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestListInt8UArgumentRequest)
                        )),
                        cmd_data
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestListInt8UArgumentRequest)
                        )),
                        cmd_data
                    );
                    let mut writer = reply.with_command(8u32)?;
                    let tag = rs_matter_crate::dm::Reply::tag(&writer);
                    let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                    let cmd_invoke_result = self.0.handle_test_list_int_8_u_argument_request(
                        &ctx,
                        cmd_data,
                        rs_matter_crate::tlv::TLVBuilder::new(
                            rs_matter_crate::tlv::TLVWriteParent::new(
                                MetadataDebug((
                                    ctx.cmd().endpoint_id,
                                    self,
                                    MetadataDebug(CommandId::TestListInt8UArgumentRequest),
                                )),
                                tw,
                            ),
                            tag,
                        )?,
                    );
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestListInt8UArgumentRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestListInt8UArgumentRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    cmd_invoke_result?;
                    rs_matter_crate::dm::Reply::complete(writer)?
                }
                CommandId::TestNestedStructListArgumentRequest => {
                    let cmd_data = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestNestedStructListArgumentRequest)
                        )),
                        cmd_data
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestNestedStructListArgumentRequest)
                        )),
                        cmd_data
                    );
                    let mut writer = reply.with_command(8u32)?;
                    let tag = rs_matter_crate::dm::Reply::tag(&writer);
                    let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                    let cmd_invoke_result = self.0.handle_test_nested_struct_list_argument_request(
                        &ctx,
                        cmd_data,
                        rs_matter_crate::tlv::TLVBuilder::new(
                            rs_matter_crate::tlv::TLVWriteParent::new(
                                MetadataDebug((
                                    ctx.cmd().endpoint_id,
                                    self,
                                    MetadataDebug(CommandId::TestNestedStructListArgumentRequest),
                                )),
                                tw,
                            ),
                            tag,
                        )?,
                    );
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestNestedStructListArgumentRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestNestedStructListArgumentRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    cmd_invoke_result?;
                    rs_matter_crate::dm::Reply::complete(writer)?
                }
                CommandId::TestListNestedStructListArgumentRequest => {
                    let cmd_data = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestListNestedStructListArgumentRequest)
                        )),
                        cmd_data
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestListNestedStructListArgumentRequest)
                        )),
                        cmd_data
                    );
                    let mut writer = reply.with_command(8u32)?;
                    let tag = rs_matter_crate::dm::Reply::tag(&writer);
                    let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                    let cmd_invoke_result =
                        self.0.handle_test_list_nested_struct_list_argument_request(
                            &ctx,
                            cmd_data,
                            rs_matter_crate::tlv::TLVBuilder::new(
                                rs_matter_crate::tlv::TLVWriteParent::new(
                                    MetadataDebug((
                                        ctx.cmd().endpoint_id,
                                        self,
                                        MetadataDebug(
                                            CommandId::TestListNestedStructListArgumentRequest,
                                        ),
                                    )),
                                    tw,
                                ),
                                tag,
                            )?,
                        );
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestListNestedStructListArgumentRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestListNestedStructListArgumentRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    cmd_invoke_result?;
                    rs_matter_crate::dm::Reply::complete(writer)?
                }
                CommandId::TestListInt8UReverseRequest => {
                    let cmd_data = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestListInt8UReverseRequest)
                        )),
                        cmd_data
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestListInt8UReverseRequest)
                        )),
                        cmd_data
                    );
                    let mut writer = reply.with_command(4u32)?;
                    let tag = rs_matter_crate::dm::Reply::tag(&writer);
                    let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                    let cmd_invoke_result = self.0.handle_test_list_int_8_u_reverse_request(
                        &ctx,
                        cmd_data,
                        rs_matter_crate::tlv::TLVBuilder::new(
                            rs_matter_crate::tlv::TLVWriteParent::new(
                                MetadataDebug((
                                    ctx.cmd().endpoint_id,
                                    self,
                                    MetadataDebug(CommandId::TestListInt8UReverseRequest),
                                )),
                                tw,
                            ),
                            tag,
                        )?,
                    );
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestListInt8UReverseRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestListInt8UReverseRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    cmd_invoke_result?;
                    rs_matter_crate::dm::Reply::complete(writer)?
                }
                CommandId::TestEnumsRequest => {
                    let cmd_data = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestEnumsRequest)
                        )),
                        cmd_data
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestEnumsRequest)
                        )),
                        cmd_data
                    );
                    let mut writer = reply.with_command(5u32)?;
                    let tag = rs_matter_crate::dm::Reply::tag(&writer);
                    let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                    let cmd_invoke_result = self.0.handle_test_enums_request(
                        &ctx,
                        cmd_data,
                        rs_matter_crate::tlv::TLVBuilder::new(
                            rs_matter_crate::tlv::TLVWriteParent::new(
                                MetadataDebug((
                                    ctx.cmd().endpoint_id,
                                    self,
                                    MetadataDebug(CommandId::TestEnumsRequest),
                                )),
                                tw,
                            ),
                            tag,
                        )?,
                    );
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestEnumsRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestEnumsRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    cmd_invoke_result?;
                    rs_matter_crate::dm::Reply::complete(writer)?
                }
                CommandId::TestNullableOptionalRequest => {
                    let cmd_data = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestNullableOptionalRequest)
                        )),
                        cmd_data
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestNullableOptionalRequest)
                        )),
                        cmd_data
                    );
                    let mut writer = reply.with_command(6u32)?;
                    let tag = rs_matter_crate::dm::Reply::tag(&writer);
                    let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                    let cmd_invoke_result = self.0.handle_test_nullable_optional_request(
                        &ctx,
                        cmd_data,
                        rs_matter_crate::tlv::TLVBuilder::new(
                            rs_matter_crate::tlv::TLVWriteParent::new(
                                MetadataDebug((
                                    ctx.cmd().endpoint_id,
                                    self,
                                    MetadataDebug(CommandId::TestNullableOptionalRequest),
                                )),
                                tw,
                            ),
                            tag,
                        )?,
                    );
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestNullableOptionalRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestNullableOptionalRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    cmd_invoke_result?;
                    rs_matter_crate::dm::Reply::complete(writer)?
                }
                CommandId::TestComplexNullableOptionalRequest => {
                    let cmd_data = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestComplexNullableOptionalRequest)
                        )),
                        cmd_data
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestComplexNullableOptionalRequest)
                        )),
                        cmd_data
                    );
                    let mut writer = reply.with_command(7u32)?;
                    let tag = rs_matter_crate::dm::Reply::tag(&writer);
                    let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                    let cmd_invoke_result = self.0.handle_test_complex_nullable_optional_request(
                        &ctx,
                        cmd_data,
                        rs_matter_crate::tlv::TLVBuilder::new(
                            rs_matter_crate::tlv::TLVWriteParent::new(
                                MetadataDebug((
                                    ctx.cmd().endpoint_id,
                                    self,
                                    MetadataDebug(CommandId::TestComplexNullableOptionalRequest),
                                )),
                                tw,
                            ),
                            tag,
                        )?,
                    );
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestComplexNullableOptionalRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestComplexNullableOptionalRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    cmd_invoke_result?;
                    rs_matter_crate::dm::Reply::complete(writer)?
                }
                CommandId::SimpleStructEchoRequest => {
                    let cmd_data = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::SimpleStructEchoRequest)
                        )),
                        cmd_data
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::SimpleStructEchoRequest)
                        )),
                        cmd_data
                    );
                    let mut writer = reply.with_command(9u32)?;
                    let tag = rs_matter_crate::dm::Reply::tag(&writer);
                    let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                    let cmd_invoke_result = self.0.handle_simple_struct_echo_request(
                        &ctx,
                        cmd_data,
                        rs_matter_crate::tlv::TLVBuilder::new(
                            rs_matter_crate::tlv::TLVWriteParent::new(
                                MetadataDebug((
                                    ctx.cmd().endpoint_id,
                                    self,
                                    MetadataDebug(CommandId::SimpleStructEchoRequest),
                                )),
                                tw,
                            ),
                            tag,
                        )?,
                    );
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::SimpleStructEchoRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::SimpleStructEchoRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    cmd_invoke_result?;
                    rs_matter_crate::dm::Reply::complete(writer)?
                }
                CommandId::TimedInvokeRequest => {
                    let cmd_invoke_result = self.0.handle_timed_invoke_request(&ctx);
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?} -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TimedInvokeRequest)
                        )),
                        cmd_invoke_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?} -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TimedInvokeRequest)
                        )),
                        cmd_invoke_result
                    );
                    cmd_invoke_result?;
                }
                CommandId::TestSimpleOptionalArgumentRequest => {
                    let cmd_data: TestSimpleOptionalArgumentRequestRequest<'_> =
                        rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    let cmd_invoke_result = self
                        .0
                        .handle_test_simple_optional_argument_request(&ctx, cmd_data.clone());
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestSimpleOptionalArgumentRequest)
                        )),
                        cmd_data,
                        cmd_invoke_result
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestSimpleOptionalArgumentRequest)
                        )),
                        cmd_data,
                        cmd_invoke_result
                    );
                    cmd_invoke_result?;
                }
                CommandId::TestEmitTestEventRequest => {
                    let cmd_data = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestEmitTestEventRequest)
                        )),
                        cmd_data
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestEmitTestEventRequest)
                        )),
                        cmd_data
                    );
                    let mut writer = reply.with_command(10u32)?;
                    let tag = rs_matter_crate::dm::Reply::tag(&writer);
                    let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                    let cmd_invoke_result = self.0.handle_test_emit_test_event_request(
                        &ctx,
                        cmd_data,
                        rs_matter_crate::tlv::TLVBuilder::new(
                            rs_matter_crate::tlv::TLVWriteParent::new(
                                MetadataDebug((
                                    ctx.cmd().endpoint_id,
                                    self,
                                    MetadataDebug(CommandId::TestEmitTestEventRequest),
                                )),
                                tw,
                            ),
                            tag,
                        )?,
                    );
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestEmitTestEventRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestEmitTestEventRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    cmd_invoke_result?;
                    rs_matter_crate::dm::Reply::complete(writer)?
                }
                CommandId::TestEmitTestFabricScopedEventRequest => {
                    let cmd_data = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestEmitTestFabricScopedEventRequest)
                        )),
                        cmd_data
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestEmitTestFabricScopedEventRequest)
                        )),
                        cmd_data
                    );
                    let mut writer = reply.with_command(11u32)?;
                    let tag = rs_matter_crate::dm::Reply::tag(&writer);
                    let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                    let cmd_invoke_result =
                        self.0.handle_test_emit_test_fabric_scoped_event_request(
                            &ctx,
                            cmd_data,
                            rs_matter_crate::tlv::TLVBuilder::new(
                                rs_matter_crate::tlv::TLVWriteParent::new(
                                    MetadataDebug((
                                        ctx.cmd().endpoint_id,
                                        self,
                                        MetadataDebug(
                                            CommandId::TestEmitTestFabricScopedEventRequest,
                                        ),
                                    )),
                                    tw,
                                ),
                                tag,
                            )?,
                        );
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestEmitTestFabricScopedEventRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestEmitTestFabricScopedEventRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    cmd_invoke_result?;
                    rs_matter_crate::dm::Reply::complete(writer)?
                }
                CommandId::TestBatchHelperRequest => {
                    let cmd_data = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestBatchHelperRequest)
                        )),
                        cmd_data
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestBatchHelperRequest)
                        )),
                        cmd_data
                    );
                    let mut writer = reply.with_command(12u32)?;
                    let tag = rs_matter_crate::dm::Reply::tag(&writer);
                    let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                    let cmd_invoke_result = self.0.handle_test_batch_helper_request(
                        &ctx,
                        cmd_data,
                        rs_matter_crate::tlv::TLVBuilder::new(
                            rs_matter_crate::tlv::TLVWriteParent::new(
                                MetadataDebug((
                                    ctx.cmd().endpoint_id,
                                    self,
                                    MetadataDebug(CommandId::TestBatchHelperRequest),
                                )),
                                tw,
                            ),
                            tag,
                        )?,
                    );
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestBatchHelperRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestBatchHelperRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    cmd_invoke_result?;
                    rs_matter_crate::dm::Reply::complete(writer)?
                }
                CommandId::TestSecondBatchHelperRequest => {
                    let cmd_data = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestSecondBatchHelperRequest)
                        )),
                        cmd_data
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestSecondBatchHelperRequest)
                        )),
                        cmd_data
                    );
                    let mut writer = reply.with_command(12u32)?;
                    let tag = rs_matter_crate::dm::Reply::tag(&writer);
                    let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                    let cmd_invoke_result = self.0.handle_test_second_batch_helper_request(
                        &ctx,
                        cmd_data,
                        rs_matter_crate::tlv::TLVBuilder::new(
                            rs_matter_crate::tlv::TLVWriteParent::new(
                                MetadataDebug((
                                    ctx.cmd().endpoint_id,
                                    self,
                                    MetadataDebug(CommandId::TestSecondBatchHelperRequest),
                                )),
                                tw,
                            ),
                            tag,
                        )?,
                    );
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestSecondBatchHelperRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestSecondBatchHelperRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    cmd_invoke_result?;
                    rs_matter_crate::dm::Reply::complete(writer)?
                }
                CommandId::TestDifferentVendorMeiRequest => {
                    let cmd_data = rs_matter_crate::tlv::FromTLV::from_tlv(ctx.data())?;
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestDifferentVendorMeiRequest)
                        )),
                        cmd_data
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?}({:?}) -> (build) +",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestDifferentVendorMeiRequest)
                        )),
                        cmd_data
                    );
                    let mut writer = reply.with_command(4294049979u32)?;
                    let tag = rs_matter_crate::dm::Reply::tag(&writer);
                    let tw = rs_matter_crate::dm::Reply::writer(&mut writer);
                    let cmd_invoke_result = self.0.handle_test_different_vendor_mei_request(
                        &ctx,
                        cmd_data,
                        rs_matter_crate::tlv::TLVBuilder::new(
                            rs_matter_crate::tlv::TLVWriteParent::new(
                                MetadataDebug((
                                    ctx.cmd().endpoint_id,
                                    self,
                                    MetadataDebug(CommandId::TestDifferentVendorMeiRequest),
                                )),
                                tw,
                            ),
                            tag,
                        )?,
                    );
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestDifferentVendorMeiRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::debug!(
                        "{:?} (end) -> {:?}",
                        MetadataDebug((
                            ctx.cmd().endpoint_id,
                            self,
                            MetadataDebug(CommandId::TestDifferentVendorMeiRequest)
                        )),
                        cmd_invoke_result.as_ref().map(|_| ())
                    );
                    cmd_invoke_result?;
                    rs_matter_crate::dm::Reply::complete(writer)?
                }
                other => {
                    #[cfg(feature = "defmt")]
                    rs_matter_crate::reexport::defmt::error!("Command {:?} not supported", other);
                    #[cfg(feature = "log")]
                    rs_matter_crate::reexport::log::error!("Command {:?} not supported", other);
                    return Err(rs_matter_crate::error::ErrorCode::CommandNotFound.into());
                }
            }
            self.0.dataver_changed();
            Ok(())
        }
    }
    impl<T, Q> core::fmt::Debug for MetadataDebug<(u16, &HandlerAdaptor<T>, Q)>
    where
        T: ClusterHandler,
        Q: core::fmt::Debug,
    {
        #[allow(unreachable_code)]
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(
                f,
                "Endpt(0x{:02x})::Cluster::{}(0x{:04x})::{:?}",
                self.0 .0, "UnitTesting", 4294048773u32, self.0 .2
            )
        }
    }
    #[cfg(feature = "defmt")]
    impl<T, Q> rs_matter_crate::reexport::defmt::Format for MetadataDebug<(u16, &HandlerAdaptor<T>, Q)>
    where
        T: ClusterHandler,
        Q: rs_matter_crate::reexport::defmt::Format,
    {
        #[allow(unreachable_code)]
        fn format(&self, f: rs_matter_crate::reexport::defmt::Formatter<'_>) {
            rs_matter_crate::reexport::defmt::write!(
                f,
                "Endpt(0x{:02x})::Cluster::{}(0x{:04x})::{:?}",
                self.0 .0,
                "UnitTesting",
                4294048773u32,
                self.0 .2
            )
        }
    }
    impl<T> rs_matter_crate::dm::NonBlockingHandler for HandlerAdaptor<T> where T: ClusterHandler {}
}
"#;
}
